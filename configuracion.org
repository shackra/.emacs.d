#+TITLE: Mi configuración de GNU Emacs
#+AUTHOR: Jorge Javier Araya Navarro (Shackra Sislock)
#+EMAIL: elcorreo@deshackra.com
#+OPTIONS: toc:3 num:nil ^:nil
#+STARTUP: content

#+begin_quote
Latin: Actiones nostras tibi comítimus, Dómine, ut ad maiorem gloriam tuam
repleamur.

Español: Te encomendamos, Señor, nuestras actividades para que las
realicemos a mayor gloria tuya.
#+end_quote

* Configuración de GNU Emacs en un archivo de org-mode
He decidido mover mi configuración a un sólo archivo. Anteriormente mi configuración estaba dividida en varios
archivos =.el=, esto no era malo, sin embargo debo estar visitando diferentes archivos si deseo realizar
varios cambios en mi configuración creándome una plétora de buffers en Emacs. Además, con =org-mode= me es
posible documentar varios aspectos de mi configuración, sí, sí... ya sé que esto se puede hacer con
comentarios en el código. Otro beneficio de usar =org-mode= y =babel= es la capacidad de contraer o expandir
varias secciones de la configuración, o navegar rápidamente entre secciones (cosa que aun no sé hacer),
además, con Babel no me veo restringido a ejecutar solamente código elisp ¡también puedo correr código
Python!.

* La Configuración
Pasemos a la materia. Esta configuración se carga de la siguiente manera desde el archivo
=~/.emacs.d/init.el=:

#+BEGIN_SRC emacs-lisp :tangle no
  ;; init.el para esta configuración. Tu Emacs debe ser versión 24.
  (package-initialize)
  (require 'ob-tangle)
  (org-babel-load-file
   (expand-file-name "emacs-init.org"
                     user-emacs-directory))
#+END_SRC

activamos algunas opciones para depuración en caso de que Emacs falle en cargar la configuración.

#+BEGIN_SRC emacs-lisp :tangle no
  (toggle-debug-on-error)
  (toggle-debug-on-quit) ;; Se activa cuando el usuario presiona C-g
#+END_SRC

** Información personal
#+BEGIN_SRC emacs-lisp
  (setf user-full-name "Jorge Araya Navarro"
        user-mail-address "elcorreo@deshackra.com"
        calendar-location-name "Siquirres, CR"
        calendar-latitude 10.083333
        calendar-longitude -83.5)
#+END_SRC

** Repositorio de paquetes
Desde la versión 24 Emacs permite la instalación de paquetes de la misma manera como se realiza en
distribuciones de GNU/Linux.

El sistema de paquetes de Emacs no es perfecto, para que algunos paquetes funcionen como deben, aun debes
poner algunas cosas en tu configuración de Emacs y tal. Lo posible es que las mismas instrucciones estén dadas
en la descripción del paquete.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (when (< emacs-major-version 24)
    ;; Para importes librerias que requieren compatibilidad como cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

Para ver que paquetes hay disponibles, y cuales desea instalar, puede hacer uso del comando =M-x package-list-pactares=

** Listado, revisión e instalación de paquetes con Melpa
*La situación es la siguiente:* Quiero poder usar mi configuración en muchas partes, o quizás otros usuarios
de GNU Emacs desean usar mi configuración. Sin embargo, no cuento con una lista de paquetes que tengo
instalado en mi Emacs, y si alguien desea usar mi configuración puede tener errores debido a que no tiene los
paquetes instalados que yo tengo.

*Solución:* usar org-babel para correr un trozo de código Python que genere un código Elisp que se encargue
del problema :D.

Pero primero nos aseguramos de decirle a babel que nos habilite Python para usar ejecutar desde el archivo
org!

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (python . t)
     (sh . t)
     )
  )
#+END_SRC

#+RESULTS:

*** script generador de la lista de paquetes a instalar
#+name: codigopython
#+BEGIN_SRC python :results output :file paquetes.el
  import os

  if os.path.isdir(os.path.expanduser("~/.emacs.d/elpa/")):
      melpapackages = os.listdir(os.path.expanduser("~/.emacs.d/elpa/"))
      packagestoinstall = []
      for package in melpapackages:
          if os.path.isdir(os.path.expanduser("~/.emacs.d/elpa/") + package):
              index = package.rfind("-")
              if index >= 0:
                  name = package[:index]
              else:
                  name = package
                  
              if not name.startswith("archives") and not name.startswith("gnupg"):
                  packagestoinstall.append(
                      "(ignore-errors (use-package {0}\n  :ensure {0}))".format(
                          name))

      # Remove any repeated package. This can happen if different directories
      # with the same package name exists in the elpa/ directory
      packagestoinstall = list(set(packagestoinstall))

      # Sort things, please!
      packagestoinstall.sort()
      print("\n".join(packagestoinstall))
#+END_SRC

#+RESULTS: codigopython
[[file:paquetes.el]]

Y cargamos ese archivo :)

#+BEGIN_SRC emacs-lisp :results silent
  (unless (file-exists-p (expand-file-name "elpa/archives/melpa" user-emacs-directory))
    (package-refresh-contents))

  (when (not (package-installed-p 'use-package))
    (package-install 'use-package))

  (require 'use-package)
  (load-file (expand-file-name "paquetes.el" user-emacs-directory))
#+END_SRC

Así es como, por el momento y de manera no muy elegante, resolvemos esta deficiencia! Código elisp para la instalación de los paquetes extraído de [[https://github.com/adamrt/emacs.d/][ésta otra configuración]] de Emacs.

Cargamos paquetes que no se instalan con ELPA.

#+BEGIN_SRC emacs-lisp
  ;; carga un agregado para cuando se escriben correos usando mu4e
  (load-file (expand-file-name "site-packages/u-vm-color/u-vm-color.el" user-emacs-directory))
#+END_SRC

*** Ubicación de temas personalizados
Emacs ofrece la posibilidad de tener una carpeta exclusiva para colocar temas personalizados o de terceros a traves de una variable llamada =custom-theme-load-path=. Todos los temas iran en la carpeta /themes/ dentro de la carpeta raíz de Emacs.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (expand-file-name "themes" user-emacs-directory))
#+END_SRC

** Paquetes requeridos con =require=
Existen algunos paquetes que deben ser "requeridos" para la correcta
activación de algunos modos mayores, funcionalidades, y demás cosas
proveídas por Emacs o paquetes instalados en Emacs.

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (require 'helm-config)
  (require 'helm-files)
  (require 'helm-grep)
  (require 'helm-buffers)
  (require 'helm-org)
  (require 'helm-descbinds)
  (require 'htmlize)
  (require 'company)
  (require 'hlinum)
  (require 'fixmee)
  (require 'expand-region)
  (require 'web-mode)
  (require 'epa-file)
  (require 'visual-regexp)
  (require 'visual-regexp-steroids)
  (when (file-exists-p "/usr/share/emacs/site-lisp/go-mode.el")
    (require 'go-mode-load))

  (require 'company-go)
  (require 'org)
  (require 'org-page)
  (require 'undo-tree)
  (require 'muse-mode)
  (require 'muse-docbook)
  (require 'muse-book)
  (require 'muse-wiki)
  (require 'muse-project)
  (require 'mediawiki)
  (require 'theme-changer)
  (require 'keyfreq)
#+END_SRC

** Códigos elisp
funciones de Emacs lisp escritas por mi u otras personas (y que yo he recolectado para mi propio beneficio)

*** función para insertar etiquetas <kbd>
Gracias a Malabarba en su [[http://emacs.stackexchange.com/a/2208/690][respuesta desde Emacs.stackexchange]].

#+BEGIN_SRC emacs-lisp
  (defun endless/insert-key (key)
    "Ask for a key then insert its description.
  Will work on both org-mode and any mode that accepts plain html."
    (interactive "kType key sequence: ")
    (let* ((is-org-mode (derived-mode-p 'org-mode))
           (tag (if is-org-mode
                    "@@html:<kbd>%s</kbd>@@"
                  "<kbd>%s</kbd>")))
      (if (null (equal key "\r"))
          (insert
           (format tag (help-key-description key nil)))
        (insert (format tag ""))
        (forward-char (if is-org-mode -8 -6)))))
#+END_SRC

*** funciones con expresiones regulares que uso a menudo en edición de texto
estas son funciones que uso muy a menudo durante la edición de texto, tenerlos como comandos interactivos me ahorra tiempo escribiendo las expresiones regulares una y otra vez.

#+BEGIN_SRC emacs-lisp
  (defun shackra/regexp-una-sola-linea (start end)
    "Elimina todos los saltos de linea en la selección"
    (interactive "r")
    (vr/replace "\n+" " " start end)
    )

  (defun shackra/regexp-un-solo-espacio (start end)
    "Elimina todos los espacios en blanco seguidos en la selección"
    (interactive "r")
    (vr/replace " +" " " start end)
    )

  (defun shackra/muse-regexp-un-solo-marcado (start end)
    "Elimina los * que existan entre espacios en blanco en la selección para formar un solo termino marcado"
    (interactive "r")
    (vr/replace "\* \*" " " start end)
    )
#+END_SRC

*** reemplazo para comment-dwim
#+BEGIN_SRC emacs-lisp
  ;; Original idea from
  ;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
  (defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
          If no region is selected and current line is not blank
          and we are not at the end of the line, then comment
          current line.  Replaces default behaviour of
          comment-dwim, when it inserts comment at the end of the
          line."
    (interactive "*P")
    (comment-normalize-vars)
    (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position))
      (comment-dwim arg)))
#+END_SRC

*** =find-file= y =switch-buffer= personalizados
Problema: Cuando estoy dentro de un proyecto con Projectile-mode, me gusta visitar archivos y buffers relacionados con el proyecto en el cual estoy trabajando. Projectile-helm es de mucha ayuda, sin embargo la combinación de teclas es muy extensa y la mayoría de veces no las uso.

Solución: Crear mis funciones personalizadas para =find-file= y =switch-buffer=.

**** =find-file= personalizado
#+BEGIN_SRC emacs-lisp
  (defun shackra:find-file ()
    (interactive)
    (call-interactively (if (equal current-prefix-arg '(4))
                            'find-file
                          ;; si no se llamo a la función con el argumento
                          ;; universal C-u. El comando se comporta normalmente
                          (if (projectile-project-p)
                              'helm-projectile-find-file
                            'find-file))))
#+END_SRC

**** =switch-buffer= personalizado
#+BEGIN_SRC emacs-lisp
  (defun shackra:switch-buffer ()
    (interactive)
    (call-interactively (if (equal current-prefix-arg '(4))
                            'helm-mini
                          ;; si no se llamo a la función con el argumento
                          ;; universal C-u. El comando se comporta normalmente
                          (if (projectile-project-p)
                              'helm-projectile-switch-to-buffer
                            'helm-mini))))
#+END_SRC

*** abrir archivos que estén en modo de solo lectura como root
Código sacado de [[https://gist.github.com/robru/8c62d4891eb889107e9f][aquí]], según éste [[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][post en Emacs Redux]].

#+BEGIN_SRC emacs-lisp
  (defun find-file-sudo ()
    "reabre el archivo actual, si existe, usando sudo"
    (when (and buffer-file-name
             (not (file-writable-p buffer-file-name))
             (file-exists-p buffer-file-name))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

*** Encierra los bloques =_SRC= de org en etiquetas =<pre><code>=
Le pedimos a org-mode que no meta las patas cuando exporta archivos a HTML. Nosotros manejaremos el marcado de sintaxis de código fuente.

Muchas gracias a [[http://emacs.stackexchange.com/users/202/chen-bin][chen bin]] por los [[http://emacs.stackexchange.com/a/9839/690][trozos de código]] sacados de su [[https://github.com/redguardtoo/org2nikola/blob/master/org2nikola.el][propio proyecto]] :)

#+BEGIN_SRC emacs-lisp
  (defun org2html-trim-string (string)
    (replace-regexp-in-string "\\`[ \t\n]*" "" (replace-regexp-in-string "[ \t\n]*\\'" "" string)))

  (defun org2html--char-to-string (ch)
    (let ((chspc 32)
          (chsq 39)
          (ch0 48)
          (ch9 57)
          (cha 97)
          (chz 122)
          (chA 65)
          (chZ 90)
          (chdot 46)
          (chminus 45)
          (chunderscore 95)
          rlt)
      (cond
       ((or (and (<= ch0 ch) (<= ch ch9))
            (and (<= cha ch) (<= ch chz))
            (and (<= chA ch) (<= ch chZ))
            (= chunderscore ch)
            (= chminus ch)
            )
        (setq rlt (char-to-string ch)))
       ((or (= chspc ch) (= chsq ch) (= chdot ch))
        (setq rlt "-")))
      rlt
      ))

  (defun org2html-get-slug (str)
    (let (slug )
      (setq slug (mapconcat 'org2html--char-to-string str ""))
      ;; clean slug a little bit
      (setq slug (replace-regexp-in-string "\-\-+" "-" slug))
      (setq slug (replace-regexp-in-string "^\-+" "" slug))
      (setq slug (replace-regexp-in-string "\-+$" "" slug))
      (setq slug (org2html-trim-string slug))
      (setq slug (downcase slug))
      slug))

  (defun org2html-replace-pre (html)
    "Replace pre blocks with sourcecode shortcode blocks.
  shamelessly copied from org2blog/wp-replace-pre()"
    (save-excursion
      (let (pos code lang info params header code-start code-end html-attrs pre-class)
        (with-temp-buffer
          (insert html)
          (goto-char (point-min))
          (save-match-data
            (while (re-search-forward "<pre\\(.*?\\)>" nil t 1)

              ;; When the codeblock is a src_block
              (unless
                  (save-match-data
                    (setq pre-class (match-string-no-properties 1))
                    (string-match "example" pre-class))
                ;; Replace the <pre...> text
                (setq lang (replace-regexp-in-string ".*src-\\([a-zA-Z0-9]+\\).*" "\\1" pre-class)  )

                (replace-match "")
                (setq code-start (point))

                ;; Go to end of code and remove </pre>
                (re-search-forward "</pre.*?>" nil t 1)
                (replace-match "")
                (setq code-end (point))
                (setq code (buffer-substring-no-properties code-start code-end))

                ;; Delete the code
                (delete-region code-start code-end)
                ;; Stripping out all the code highlighting done by htmlize
                (setq code (replace-regexp-in-string "<.*?>" "" code))

                ;; default is highlight.js, it's the best!
                (insert (concat "\n<pre><code class=\"lang-"
                                lang
                                "\">\n"
                                code
                                "</code></pre>\n"))

                )))

          ;; Get the new html!
          (setq html (buffer-substring-no-properties (point-min) (point-max))))
        ))
    html)

  (defun org2html--render-subtree ()
    "Render current subtree"
    (let ((org-directory default-directory)
           html-file
           tags
           title
           post-slug
           html-text)

      ;; set title
      (setq title (nth 4 (org-heading-components)))

      ;; set POST_SLUG if its does not exist
      (setq post-slug (org2html-get-slug title))
      ;; html file
      (setq html-file (concat (file-name-as-directory default-directory) post-slug ".html"))
      (setq html-text (org2html-export-into-html-text))

      (save-excursion
        (setq html-text (org2html-replace-pre html-text)))

      (with-temp-file html-file
        (insert html-text))
      (message "%s created" html-file)
      ))

  (defun org2html-export-into-html-text ()
    (let (html-text b e)

      (save-excursion
        (org-mark-element)
        (forward-line) ;; donot export title
        (setq b (region-beginning))
        (setq e (region-end))
        )

      ;; org-export-as will detect active region and narrow to the region
      (save-excursion
        (setq html-text
              (cond
               ((version-list-< (version-to-list (org-version)) '(8 0 0))
                (if (fboundp 'org-export-region-as-html)
                    (org-export-region-as-html b e t 'string)))
               (t
                (if (fboundp 'org-export-as)
                    (org-export-as 'html t nil t)))
               )))
      html-text))

  (defun org2html-export-subtree ()
    "Export current first level subtree into HTML"
    (interactive)
    (let ((org-directory default-directory)
          html-file
          tags
          title
          post-slug
          html-text)

      ;; just goto the root element
      (condition-case nil
          (outline-up-heading 8)
        (error
         (message "at the beginning ...")))

      ;; should be nil
      (org2html--render-subtree)
      ))


  (defun org2html-wrap-blocks-in-code (src backend info)
    (if (org-export-derived-backend-p backend 'html)
        (org2html-replace-pre src)))
#+END_SRC

*** Recrea el blog para probar el diseño
Llamamos al comando =op/do-publication= con algunos parámetros para ahorrarnos el procedimiento manual de publicar el blog a una carpeta

#+BEGIN_SRC emacs-lisp
  (defun shackra:ppp ()
    "Llama op/do-publication con una serie de parámetros predeterminados. Útil cuando se esta diseñando un tema"
    (interactive)
    (op/do-publication t t "/tmp/blog" nil))
#+END_SRC

*** Generación del blog y sincronización con RacketSpace

#+BEGIN_SRC emacs-lisp
  (defun shackra:syncblog ()
    "Sincroniza el blog generado con el contenedor en Racketspace"
    (interactive)
    ;; usa rclone para hacer la re-sincronización
    (start-process "sync rclone" (get-buffer-create "*rclone*") "rclone"
                   "sync"
                   (expand-file-name "~/Documentos/deshackra.com/elblog.deshackra.com")
                   "rscf:elblog.deshackra.com")
    )

  (defun shackra:genblog ()
    "Genera y sincroniza el blog"
    (interactive)
    ;; borra el directorio con los datos antiguos y vuelve a generar el blog
    (delete-directory (expand-file-name "~/Documentos/deshackra.com/elblog.deshackra.com") t nil)
    (op/do-publication nil "HEAD^1" "~/Documentos/deshackra.com/elblog.deshackra.com/" nil)
    ;; sincroniza
    (shackra:syncblog))
#+END_SRC

*** función para =delete-frame-functions=
#+BEGIN_SRC emacs-lisp
  (defun shackra:run-delete-frame-hooks (frame)
    "Esta función corre algunas funciones que no son llamadas cuando Emacs
  corre como proceso de segundo plano"
    (when (server-running-p)
      (savehist-save)
      (recentf-save-list)))
#+END_SRC

*** salva algunos buffers al perder Emacs el foco
Sacado de [[http://timothypratley.blogspot.nl/2015/07/seven-specialty-emacs-settings-with-big.html][Programming: Seven specialty Emacs settings with big payoffs]]

#+BEGIN_SRC emacs-lisp
  (defun guardar-todo ()
    (interactive)
    (save-some-buffers t))
#+END_SRC
** EN-ESPERA Emacs, no hagas éstas cosas... AKA "sane defaults"
- State "EN-ESPERA"  from ""           [2015-04-30 jue 00:34] \\
  powerline-mode ha sido desactivado por un tiempo
Una colección de sentencias para cambiar algunas cosas de Emacs que son poco sanas, de ahí el nombre de "sane defaults" u /opciones sanas predeterminadas/. Debido a que esta sección de mi configuración se estaba llenando innecesariamente de entras decidí colocar todas las opciones dentro de un sólo bloque de código elisp.

#+BEGIN_SRC emacs-lisp :tangle no
  (setf ;;solarized-high-contrast-mode-line t
        solarized-distinct-fringe-background t
        solarized-use-more-italic t
        solarized-scale-org-headlines t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; cambia el tema dependiendo de la hora del día
  (change-theme 'material-light 'material)
#+END_SRC

Establecemos la tipografía a usar

#+BEGIN_SRC emacs-lisp
  (ignore-errors
    (set-frame-font "SourceCodePro 12")
    (add-to-list (quote default-frame-alist) (quote (font . "SourceCodePro-12"))))

  (defun shackra:arregla-emojis (&optional frame)
    (ignore-errors
      (set-fontset-font "fontset-default" nil (font-spec :size 20 :name "Symbola") frame 'append)
      (message "tipografías “fallback” aplicadas")))

  (add-hook 'after-make-frame-functions 'shackra:arregla-emojis)
  (shackra:arregla-emojis)
#+END_SRC

Cuando corremos Emacs en una terminal, no aplica tema de colores alguno. Según: [[https://www.reddit.com/r/emacs/comments/3bjbq9/dont_use_colors_or_theme_when_run_from_terminal/][don't use colors or theme when run from terminal : emacs]]

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(tty-color-mode . -1))
#+END_SRC

Guarda algunos buffers cuando Emacs pierde el foco.

#+BEGIN_SRC emacs-lisp
  (add-hook 'focus-out-hook 'guardar-todo)
#+END_SRC

Cuando Emacs cierra, en verdad quiero que también mate a todos los procesos en segundo plano (y no me preguntes sobre ello; sacado de [[http://timothypratley.blogspot.nl/2015/07/seven-specialty-emacs-settings-with-big.html][Programming: Seven specialty Emacs settings with big payoffs]])

#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
             (flet ((process-list ())) ad-do-it))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;(powerline-center-theme)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (recentf-mode 1)
  (savehist-mode 1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-auto-revert-mode 1)
  (column-number-mode 1)
  (global-subword-mode 1)
  (global-font-lock-mode 1)
  (show-paren-mode t)
  (delete-selection-mode 1)

  (setf
   ;; hace que el buffer inicial al abrir un nuevo cuadro de Emacs sea la agenda
   ;; de org-mode
   initial-buffer-choice "~/org/cosasporhacer.org"
   x-underline-at-descent-line t ;; la linea que subraya es puesta en la base de
                                 ;; la tipografía en lugar de en la linea base.
   load-prefer-newer t
   save-interprogram-paste-before-kill t
   bookmark-default-file (expand-file-name "bookmarks" user-emacs-directory)
   bookmark-save-flag 1
   inhibit-startup-message t
   inhibit-startup-echo-area-message "jorge"
   initial-scratch-message nil
   line-spacing 1
   make-backup-files nil
   global-auto-revert-non-file-buffers t
   auto-revert-verbose nil
   echo-keystrokes 0.1
   shift-select-mode nil
   byte-compile-warnings '(not nresolved
                             free-vars
                             callargs
                             redefine
                             obsolete
                             noruntime
                             cl-functions
                             interactive-only)
   fill-column 80
   blink-matching-paren nil
   uniquify-buffer-name-style (quote forward)
   recentf-max-saved-items 100
   history-length 1000
   x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
   enable-recursive-minibuffers t
   gc-cons-percentage 0.125
   undo-tree-mode-lighter ""
   ediff-diff-options "-w"
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   )

  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (setq-default truncate-lines t)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (if
      (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setf default-buffer-file-coding-system 'utf-8))

  ;;(eval-after-load "yasnippet" '(diminish 'yas/minor-mode))
  (eval-after-load "button-lock" '(diminish 'button-lock-mode))
  (eval-after-load "org-indent" '(diminish 'org-indent-mode))
  (eval-after-load "helm-mode" '(diminish 'helm-mode))
  (eval-after-load "fixmee" '(diminish 'fixmee-mode))
  (eval-after-load "elpy" '(diminish 'elpy-mode))
  (eval-after-load "highlight-indentation" '(diminish 'highlight-indentation-mode))
  (eval-after-load "autopair" '(diminish 'autopair-mode))
  (eval-after-load "flycheck" '(diminish 'flycheck-mode))
  (eval-after-load "flyspell" '(diminish 'flyspell-mode))
  (eval-after-load "simple" '(diminish 'auto-fill-function))
  (eval-after-load "company" '(diminish 'company-mode))
  (eval-after-load "eyebrowse" '(diminish 'eyebrowse-mode))
  ;; modos menores no necesitan ser encerrados en sentencias `eval-after-load'
  (diminish 'subword-mode)
  (diminish 'visual-line-mode)
  (diminish 'eldoc-mode)
  (diminish 'outline-minor-mode)
#+END_SRC

*** Mover el cursos de manera inteligente al inicio de la linea
He tenido el problema, desde que no uso =auto-indent-mode=, que al presionar M-a el cursor va a la columna 0
en lugar de posicionarse en el primer carácter no-blanco de la linea, que es un comportamiento deseado cuando
se esta programando. En [[http://stackoverflow.com/a/145359/2020214][Stackoverflow hay una respuesta]] para el problema :)

#+BEGIN_SRC emacs-lisp
  (defun smart-beginning-of-line ()
    "Move point to first non-whitespace character or beginning-of-line.

  Move point to the first non-whitespace character on this line.
  If point was already at that position, move point to beginning of line."
    (interactive)
    (let ((oldpos (point)))
      (back-to-indentation)
      (and (= oldpos (point))
         (beginning-of-line))))

  (global-set-key [home] 'smart-beginning-of-line)
  (global-set-key (kbd "C-a") 'smart-beginning-of-line)
#+END_SRC

*** EN-ESPERA Modificación de los caracteres en el mode-line
- State "EN-ESPERA"  from ""           [2015-02-20 vie 18:24] \\
  Tengo que liarme con `powerline' primero para poder tocar siquiera la variable `mode-line-format'
Los caracteres en el mode-line de Emacs pueden ser modificados ¿No es genial? (según [[http://tromey.com/blog/?p%3D831][The Cliffs of Inanity]], también [[http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html][lunarsite]]. referencias sobre =mode-line-format= en la [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Format.html][referencia de Elisp]])

#+BEGIN_SRC emacs-lisp
  ;; Si usas `powerline', editar la variable mode-line-format es algo complicado,
  ;; pero no imposible
#+END_SRC
** Custom.el
 El archivo customize sera éste. Cualquier modificación de Emacs que
 se haga a través de =customize= ira en éste archivo:

#+BEGIN_SRC emacs-lisp
  (setf custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

 Me da la impresión que estas modificaciones pueden ser sobre-escritas
 si se cargan al puro inicio. De ahí que sean movidas a la ultima
 parte de la configuración.

Y cargamos el archivo, ¡No lo olvide!.

 #+BEGIN_SRC emacs-lisp
   (load custom-file)
 #+END_SRC

** Variables personalizadas
Variables usadas por funciones escritas (o copiadas de por ahí) por mi

#+BEGIN_SRC emacs-lisp
  (defvar-local shackra:var-python-ver 2
    "Indica que versión de Python estamos usando, Python2 o Python3")
  (put 'shackra:var-python-ver 'safe-local-variable-values #'integerp)
#+END_SRC
** Otras configuraciones
Existen ciertos cambios que no tienen cabida en otra parte, y ciertamente colocarlos debajo de [[*Modos%20de%20Emacs][Modos de Emacs]] no es una opción... porque lo veo como algo desordenado.

*** Desata algunas teclas rápidas y sus respectivos comandos
=C-z= es una combinación de teclas que no me sirven para algo, así que lo desato de su comando =suspend-frame= para darle un mejor uso. También =M-z= puede tener un mejor uso que ejecutar el comando de borrado =zap-to-char=
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "M-z"))
#+END_SRC
** Modos de Emacs
   La configuración especifica a cada modo mayor, menor, o paquete con
   funcionalidades. Dividió por secciones.

*** after-init-hook
modos que se activan luego de que emacs carga

#+BEGIN_SRC emacs-lisp
  (defun shackra:after-init ()
    "funcion para el gancho `after-init-hook'"
    (helm-mode 1)
    (helm-adaptative-mode 1)
    (helm-autoresize-mode 1)
    (helm-descbinds-mode)
    (projectile-global-mode)
    (helm-projectile-on)
    (global-flycheck-mode)
    (global-pretty-mode t)
    (global-company-mode)
    (company-quickhelp-mode 1) ;; hace que el demonio de Emacs no termine de
    ;; iniciarse
    (company-statistics-mode)
    (global-fixmee-mode 1)
    (global-undo-tree-mode 1)
    (unkillable-scratch 1)
    (when (fboundp 'winner-mode)
      (winner-mode 1))
    ;; find-file y switch-to-buffer personalizados
    (define-key global-map (kbd "C-x C-f") 'shackra:find-file)
    (define-key global-map (kbd "C-x b") 'shackra:switch-buffer)
    (when (daemonp)
      (keyfreq-mode 1)
      (keyfreq-autosave-mode 1)))

  (add-hook 'after-init-hook #'shackra:after-init)

  (defalias 'redo 'undo-tree-redo)

  (global-set-key (kbd "C-ç") 'undo)
  (global-set-key (kbd "M-ç") 'redo)
  (global-set-key (kbd "M-¡") 'text-scale-increase)
  (global-set-key (kbd "M-'") 'text-scale-decrease)
  (define-key global-map (kbd "M-o") 'other-window)
  (define-key global-map (kbd "M-p") 'ace-window)
  ;; salta a la nueva ventana creada despues de dividir la actual
  (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+END_SRC

*** Org-mode
CLOSED: [2014-10-15 mié 17:38]
¡Organiza tu vida usando Emacs!

Se cambio la combinación de teclas para =er/expand-region= a C-¡ debido a que org-mode usa la
combinación C-' para otra cosa.

     #+BEGIN_SRC emacs-lisp 
       (setf org-footnote-auto-adjust t
             org-html-htmlize-output-type 'css
             org-html-htmlize-font-prefix "org-"
             org-habit-graph-column 55
             org-directory (expand-file-name "~/org")
             org-archive-location (concat org-directory "/archivado.org::* Entradas viejas y archivadas")
             org-special-ctrl-k t
             org-ctrl-k-protect-subtree t ;; al usar C-k, evitamos perder todo el subarbol
             org-catch-invisible-edits 'show
             org-return-follow-link t
             ;;org-blank-before-new-entry t
             org-startup-indented t
             org-startup-folded nil
             org-imenu-depth 5
             org-log-done 'time
             org-clock-persist 'history
             org-default-notes-file (concat org-directory "/diario.org")

             org-agenda-files (list (concat org-directory "/cosasporhacer.org")
                                    (concat org-directory "/agenda.org"))

             org-mobile-directory "~/orgmobile/"

             org-capture-templates `(("p" "Cosas por hacer" entry (file+headline ,(concat org-directory "/cosasporhacer.org") "Tareas")
                                      "* POR-HACER %^{breve descripcion}\n%?\nAgregado: %U\nEn: %a" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("d" "Escribir una nota en el diario" plain (file org-default-notes-file)
                                      "%?\n\nEscrito el: %U\nEn: %a" :empty-lines 1)
                                     ("x" "Proyectos de clientes en PeoplePerHour" entry (file+headline ,(concat org-directory "/cosasporhacer.org") "Proyectos en PeoplePerHour")
                                      "* POR-HACER %^{Titulo del proyecto}\n%^{cliente}p\n%^{ID}p\nDescripción: %?" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("c" "Calendario" entry (file+headline ,(concat org-directory "/cosasporhacer.org") "Calendario")
                                      "* %^{Nombre del evento}\n SCHEDULED: %:date" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("a" "Cumpleaños y aniversarios" entry (file+headline ,(concat org-directory "/agenda.org") "Cumpleaños y aniversarios")
                                      "* %^{Nombre del cumpleañero o aniversario}\n SCHEDULED: %:date\n %?" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("g" "Algún día/Tal vez" entry (file+headline ,(concat org-directory "/quizas.org") "En 'veremos'")
                                      "* %^{breve descripcion}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("l" "Algún día/Tal vez (Libros)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Libros por leer")
                                      "* Leer %^{titulo del libro} por %^{autor o autores}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("v" "Algún día/Tal vez (Peliculas)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Películas por ver")
                                      "* Ver la pelicula %^{titulo de la pelicula}\n %?\n Added: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("m" "Algún día/Tal vez (Música)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Música por escuchar")
                                      "* Escuchar cierta(s) cancion(es) de %^{artista}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("b" "Algún día/Tal vez (Blogs)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Blogs por leer")
                                      "* Leer [[%:url][%^{titulo de la entrada de blog}]] por %^{autor}\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("z" "Algún día/Tal vez (Por hacer)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Cosas por hacer")
                                      "* %^{breve descripcion de la tarea}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("w" "Algún día/Tal vez (Aprender)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Cosas por aprender")
                                      "* %^{breve descripcion}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("n" "Algún día/Tal vez (Nuevo proyecto)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Nuevos proyectos")
                                      "* %^{breve descripcion}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     )

             org-todo-keywords '((sequence "POR-HACER(p)"
                                           "EN-PROGRESO(g)"
                                           "EN-ESPERA(e@/!)"
                                           "EN-REVISIÓN(r@/!)"
                                           "|" "CANCELADO(c@)"
                                           "TERMINADO(t!)"))

             org-todo-keyword-faces '(("POR-HACER" . (:foreground "#ff4500" :weight bold))
                                      ("EN-PROGRESO" . (:foreground "#ffa500" :weight bold))
                                      ("EN-ESPERA" . (:foreground "#0000ff" :weight bold))
                                      ("EN-REVISIÓN" . (:foreground "#ffff00" :weight bold))
                                      ("TERMINADO" . (:foreground "#32cd32" :weight bold))
                                      ("CANCELADO" . (:foreground "#8b0000" :weight bold))))

       (global-set-key (kbd "C-c l") 'org-store-link)
       (global-set-key (kbd "C-c a") 'org-agenda)
       (define-key global-map (kbd "C-c c") 'org-capture)
       (define-key org-mode-map (kbd "C-¡") 'er/expand-region)
       (define-key org-mode-map (kbd "C-c k") #'endless/insert-key)

       (org-clock-persistence-insinuate)

       ;; sacado de http://emacs.stackexchange.com/a/2103/690
       (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
       (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
       (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))

       (add-hook 'org-mode-hook #'visual-fill-column-mode)
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
     #+END_SRC

*** Org-page
Genera un blog estático con [[https://github.com/kelvinh/org-page][org-page]].
la variable =op/category-config-alist= fue redefinida (o al menos eso creo) porque de verdad quiero
castellanizar los enlaces y sus títulos en el blog.

#+BEGIN_SRC emacs-lisp 
    (setf op/repository-directory "/home/jorge/Documentos/elblog.deshackra.com/"
          op/repository-org-branch "master"
          op/repository-html-branch nil
          op/site-domain "http://elblog.deshackra.com"
          op/site-main-title "El blog de Shackra"
          op/site-sub-title "No seas tan abierto de mente o tu cerebro se caerá"
          op/personal-github-link "https://github.com/shackra"
          op/theme-root-directory (expand-file-name "org-page-themes" user-emacs-directory)
          op/theme 'shackra
  ;;      org-html-htmlize-output-type nil
    )

    (eval-after-load 'ox
      '(progn
         (add-to-list 'org-export-filter-src-block-functions
                      'org2html-wrap-blocks-in-code)
         ))
      #+END_SRC

*** text-mode
Esta configuración afecta a todos los modos texto en los buffers.
     
     #+BEGIN_SRC emacs-lisp 
       (defun shackra:text-mode ()
         (turn-on-visual-line-mode)
         (flyspell-mode)
         (set (make-local-variable 'fill-column) 110))

       (add-hook 'text-mode-hook #'shackra:text-mode)
     #+END_SRC

*** HELM
Es un paquete que esta en su propia liga. Éste paquete te ayudara a aumentar tu productividad, reducir tu calvicie y hará que tu ex-novia sexy que te dejo hace 20 años vuelva muerta de amor por vos ;)

Acá se definen primero los keybindings para Helm, todo en un solo sitio.
#+BEGIN_SRC emacs-lisp 
  ;; establece el tamaño de la ventada de Helm a un 20% (40% por defecto)
  (setf helm-autoresize-max-height 20
        helm-autoresize-min-height 20)

  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  (global-set-key (kbd "C-x f") 'helm-recentf)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-c i") 'helm-imenu)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-c h o") 'helm-occur)
  (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
  (global-set-key (kbd "C-c h x") 'helm-register)
  (global-set-key (kbd "C-c h g") 'helm-google-suggest)
  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)
  (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
  (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
  (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
  (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)
#+END_SRC

Y acá el resto de la configuración de Helm
#+BEGIN_SRC emacs-lisp 
  (when (executable-find "curl")
    (setf helm-google-suggest-use-curl-p t))

  (setf
   helm-split-window-in-side-p t          ; open helm buffer inside current window, not
                                          ; occupy whole other window
   helm-move-to-line-cycle-in-source t    ; move to end or beginning of source when
                                          ; reaching top or bottom of source.
   helm-ff-search-library-in-sexp t       ; search for library in `require' and
                                          ; `declare-function' sexp.
   helm-scroll-amount 8                   ; scroll 8 lines other window using M-<next>/M-<prior>
   helm-ff-file-name-history-use-recentf t
   helm-locate-command "locate %s -e -A --regex %s"
   helm-locate-fuzzy-match t
   helm-M-x-fuzzy-match t
   helm-buffers-fuzzy-matching t
   helm-recentf-fuzzy-match    t
   helm-boring-buffer-regexp-list '("\\` "
                                    "\\*helm"
                                    "\\*helm-mode"
                                    "\\*Echo Area"
                                    "\\*Minibuf"
                                    "\\*monky-cmd-process\\*"
                                    "\\*epc con"
                                    "\\*Compile-Log\\*"
                                    "\\*monky-process\\*"
                                    "\\*CEDET CScope\\*"
                                    "\\*Messages\\*"
                                    "\\*Flycheck error"
                                    "\\*Elpy"
                                    "\\*elpy-rpc"
                                    "\\*.+(.+)"
                                    "\\*fsm-debug\\*"
                                    "elpa/.+"
                                    "tramp/.+"
                                    "\\*Gofmt Errors\\*"
                                    "\\*autopep8"
                                    "\\*magit.")
   
   helm-boring-file-regexp-list (quote
                                 ("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$"
                                  "\\._darcs$" "\\.la$" "\\.o$" "~$"
                                  "\\.pyc$" "\\.elc$" "TAGS" "\#*\#"
                                  "\\.exe$" "\\.jar$" "\\.img$" "\\.iso$"
                                  "\\.xlsx$" "\\.epub$" "\\.docx$"))
   helm-ff-skip-boring-buffers t
   helm-truncate-lines t
   helm-projectile-sources-list '(helm-source-projectile-files-list)
   helm-semantic-fuzzy-match t
   helm-imenu-fuzzy-match t)

  ;; Instalar ack o ack-grep
  (when (executable-find "ack")
    (setq helm-grep-default-command "ack -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack -H --no-group --no-color %e %p %f"))

  ;; en caso de que ack-grep sea el programa disponible
  (when (executable-find "ack-grep")
    (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
  (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
     #+END_SRC
     
*** helm-flycheck
Muestra los errores y advertencias marcados por flycheck usando Helm!

#+BEGIN_SRC emacs-lisp 
  (define-key flycheck-mode-map (kbd "C-c h !") 'helm-flycheck)
#+END_SRC
*** Projectile
Es un paquete que nos permite el manejo de archivos en proyectos. Un proyecto, por definición, puede ser
cualquier repositorio de código fuente de software, como =mercurial=, =git=, etc. También es posible definir
un proyecto en una carpeta dejando caer en él un archivo =.projectile=, dentro de este archivo se puede
definir qué archivos/carpetas ignorar y cuales no. Para más información ver la [[http://batsov.com/projectile/][pagina del proyecto]].

     #+BEGIN_SRC emacs-lisp 
       (setf
        projectile-completion-system 'helm
        projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-globally-ignored-files (quote ("TAGS" "\#*\#" "*~" "*.la"
                                            "*.o" "~" "*.pyc" "*.elc" "*.exe"
                                            "*.zip" "*.tar.*" "*.rar" "*.7z"))
        projectile-switch-project-action  'helm-projectile-find-file
        )
     #+END_SRC

*** Multi-term
Ofrece un excelente emulador de terminal *dentro* de Emacs
#+BEGIN_SRC emacs-lisp 
  (defun shackra:maybe-disable-yasnippet ()
    "Desactiva yasnippet a pedido"
    (yas-minor-mode -1))

  (setf multi-term-buffer-name "shell-"
        multi-term-program "/bin/bash"
        term-bind-key-alist (list (cons "C-c C-c" 'term-interrupt-subjob)
                                  (cons "C-p" 'previous-line)
                                  (cons "C-n" 'next-line)
                                  (cons "M-f" 'term-send-forward-word)
                                  (cons "M-b" 'term-send-backward-word)
                                  (cons "C-c C-j" 'term-line-mode)
                                  (cons "C-c C-k" 'term-char-mode)
                                  (cons "M-DEL" 'term-send-backward-kill-word)
                                  (cons "M-d" 'term-send-forward-kill-word)
                                  (cons "<C-left>" 'term-send-backward-word)
                                  (cons "<C-right>" 'term-send-forward-word)
                                  (cons "C-r" 'term-send-reverse-search-history)
                                  (cons "M-p" 'term-send-raw-meta)
                                  (cons "M-y" 'term-send-raw-meta)
                                  (cons "C-y" 'term-send-raw)))

  (add-hook 'term-mode-hook #'shackra:maybe-disable-yasnippet)

  (global-set-key [f1] 'multi-term)
  (global-set-key [C-next] 'multi-term-next)
  (global-set-key [C-prior] 'multi-term-prev)
#+END_SRC

*** company
El paquete da funcionalidades de auto completado. Esta opcion es
cada día más popular como remplazo a =auto-complete=.

     #+BEGIN_SRC emacs-lisp 
       (setf company-idle-delay 0.3
             company-tooltip-limit 30
             company-minimum-prefix-length 1
             company-echo-delay 0
             company-auto-complete nil)

       (define-key company-mode-map (kbd "C-ñ") 'helm-company)
       (define-key company-mode-map (kbd "C-ñ") 'helm-company)

       (add-to-list 'company-backends 'company-dabbrev t)
       (add-to-list 'company-backends 'company-ispell t)
       (add-to-list 'company-backends 'company-files t)
       (add-to-list 'company-backends 'company-yasnippet t)
     #+END_SRC
     
*** Python
Configuraciones para mi modo estrella: Python-mode!  Estoy omitiendo usar auto-indent-mode debido a un [[https://github.com/mlf176f2/auto-indent-mode.el/issues/43][fallo]] en el modo Python. Por lo tanto, estoy reuniendo la tecla RET con la función =newline-and-indent= que funciona de lo más bien.

#+BEGIN_SRC emacs-lisp 
  ;; configuración basica para python-mode y elpy-mode
  (setf py-return-key 'py-newline-and-indent
        python-mode-modeline-display "python-mode"
        py-auto-fill-mode t
        py-shell-name "python2")
#+END_SRC

#+BEGIN_SRC emacs-lisp 
  (defun shackra:python-mode ()
    ;; esto puede que no funcione en emacs 24.3 y anteriores
    (electric-indent-local-mode -1)
    (jedi:setup)
    (add-to-list 'company-backends 'company-jedi)
    (pyvenv-mode)
    ;; activa la definicion personalizada para este modo mayor para
    ;; header2
    (setf make-header-hook '(shackra:header-python-shebang-coding
                             shackra:header-sep-line
                             shackra:header-project-name
                             header-file-name
                             header-creation-date
                             header-author
                             shackra:header-sep-line
                             header-modification-date
                             header-modification-author
                             header-update-count
                             shackra:header-sep-line
                             shackra:header-free-software
                             shackra:header-sep-line
                             shackra:header-code))
    (auto-make-header)
    (py-autopep8-enable-on-save))

  (add-hook 'python-mode-hook #'shackra:python-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp 
  (define-key python-mode-map (kbd "C-M-,") 'comment-dwim-line)
  (define-key python-mode-map (kbd "C-c .") 'python-indent-shift-right)
  (define-key python-mode-map (kbd "C-c ,") 'python-indent-shift-left)
  (define-key python-mode-map (kbd "C-c -") 'iedit-mode-toggle-on-function)
  ;; (define-key python-mode-map (kbd "RET") 'py-newline-and-indent)
#+END_SRC

*** Jedi.el
Es un paquete de auto completado de Python para Emacs. Su objetivo es ayudar al programador en Python de una forma no destructiva. También ayuda a encontrar información sobre objetos Python como /docstrings/, argumentos de funciones y localización de código.

#+BEGIN_SRC emacs-lisp
  (setf jedi:complete-on-dot t)
#+END_SRC
*** iedit-mode
=iedit-mode= es un modo que permite editar un termino repetido en varios lugares a la vez en el buffer actual, es como =multiple-cursors=, pero sin la tener que marcar un area y luego llamar al modo mayor. En Python se llama a =iedit-mode-toggle-on-function= con @@html:<kbd>C</kbd>@@@@html:<kbd>c</kbd>@@ @@html:<kbd>,</kbd>@@.

Cuando =iedit-mode= esta activo, presionar la tecla @@html:<kbd>RET</kbd>@@ hará que se desactive, al igual que sucede con =multiple-cursors=.

#+BEGIN_SRC emacs-lisp 
  (define-key iedit-mode-keymap (kbd "RET") 'iedit-mode)
#+END_SRC

*** discover-my-major
Éste paquete nos muestra las combinaciones de teclas posibles para el modo mayor en el que estamos
actualmente, todo lo que hay que hacer es recordar una combinación especifica de teclas.

Esta combinación por defecto es C-h C-m ;)

      #+BEGIN_SRC emacs-lisp 
        (global-set-key (kbd "C-h C-m") 'discover-my-major)
      #+END_SRC

*** Expand-region
Provee una manera fácil de hacer selección de elementos en el buffer con presionar solo una tecla. Puede ver
éste paquete en acción en este episodio de [[http://emacsrocks.com/e09.html][Emacs Rocks]].

     #+BEGIN_SRC emacs-lisp 
       (global-set-key (kbd "C-'") 'er/expand-region)
     #+END_SRC

*** multiple-cursos
Marca varias partes del buffer dependiendo de la selección que hagas.
     
     #+BEGIN_SRC emacs-lisp 
       (define-key global-map (kbd "C-+") 'mc/mark-next-like-this)
       (define-key global-map (kbd "M-+") 'mc/mark-previous-like-this)
       (define-key global-map (kbd "C-M-+") 'mc/mark-all-like-this)
       ;; Para diseñadores web, marca la etiqueta de apertura y cierre
       ;;(define-key sgml-mode-map (kbd "C-'") 'mc/mark-sgml-tag-pair) ;;Symbol's value as variable is void: sgml-mode-map
     #+END_SRC

este paquete puedes tener configuraciones de teclas muy variadas, lo mejor es que visites la pagina del
proyecto en Github para más [[https://github.com/magnars/multiple-cursors.el#basic-usage][información]]. Las teclas usadas reflejan la reducida cantidad que existen en mi
laptop.
     
*** flycheck-mode
revisión-al-vuelo de la sintaxis mientras editas código. Hace una selección automática del mejor revisor de sintaxis que dispongas.
     
Tiene soporte para muchos lenguajes. Lo recomiendo por encima de flymake.

     #+BEGIN_SRC emacs-lisp 
       (setf
        flycheck-disabled-checkers '(emacs-lisp -checkdoc) ;; deshabilita el majadero revisor de documentación
        flycheck-indication-mode 'right-fringe
        )

       (eval-after-load "flycheck"
         '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
     #+END_SRC

*** web-mode
Un modo mayor autónomo que permite la edición de plantillas web: documentos HTML con partes embebidas
(CSS/Javascript) y bloques (del lado de cliente/servidor)

     #+BEGIN_SRC emacs-lisp 
       (defun shackra:web-mode ()
         (auto-fill-mode -1)
         (electric-indent-local-mode t)
         ;; (progn
         ;;   ;; según https://github.com/capitaomorte/yasnippet/issues/396#issuecomment-46340904
         ;;   ;; hace yasnippet funcionar con web-mode
         ;;   (yas-activate-extra-mode 'html-mode)
         ;;   (yas-minor-mode-on))
         (emmet-mode)
         (add-hook 'local-write-file-hooks #'delete-trailing-whitespace))

       (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.[gj]sp\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)) ;; para plantillas de Django.
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)) ;; para editar archivos HTML

       (setf web-mode-engines-alist
             '(("php"    . "\\.phtml\\'")))

       (define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)

       (add-hook 'web-mode-hook #'shackra:web-mode)
     #+END_SRC
*** mu4e
Un versátil cliente de correo electrónico. Éste paquete se carga de manera condicional si esta instalado en el sistema del usuario. Desgraciadamente no puedes instalarlo desde Melpa o algún otro repositorio de paquetes de Emacs.

Para saber como configurar mu4e para escribir correos con diferentes cuentas de correo, puedes mirar la
[[http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html][documentación]] es aconsejable que esa configuración viva en el archivo secreto...

#+BEGIN_SRC emacs-lisp 
  (when (file-exists-p "/usr/share/emacs/site-lisp/mu4e/")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
    (autoload 'mu4e "mu4e" "Mail client based on mu (maildir-utils)." t)

    (require 'mu4e-contrib)
    (require 'org-mu4e)
    (setf mu4e-view-show-images nil)
    (global-set-key (kbd "<f7>") 'mu4e)
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    ;;; message view action
    (defun mu4e-msgv-action-view-in-browser (msg)
      "Ver el cuerpo del mensaje HTML en el navegador web"
      (interactive)
      (let ((html (mu4e-msg-field (mu4e-message-at-point t) :body-html))
            (tmpfile (format "%s/%d.html" temporary-file-directory (random))))
        (unless html (error "No partes en HTML para este mensaje"))
        (with-temp-file tmpfile
          (insert
           "<html>"
           "<head><meta http-equiv=\"content-type\""
           "content=\"text/html;charset=UTF-8\">"
           html))
        (browse-url (concat "file://" tmpfile))))
    
    (add-to-list 'mu4e-view-actions
                 '("Ver en el navegador" . mu4e-msgv-action-view-in-browser) t)
    
    (setf
     ;; información de cuentas de correo
     mu4e-user-mail-address-list (list "elcorreo@deshackra.com"
                                        "kartelo@gmx.com")
   
     mu4e-compose-signature "Pax et bonum.\nJorge Araya Navarro.\nES: Diseñador Publicitario, Programador Python y colaborador en Parabola GNU/Linux-libre\nEN: Ads Designer, Python programmer and contributor Parabola GNU/Linux-libre\nEO: Anonco grafikisto, Pitino programalingvo programisto kai kontribuanto en Parabola GNU/Linux-libre\nhttps://es.gravatar.com/shackra"
     smtpmail-smtp-server "privateemail.com"
     smtpmail-local-domain "local"
     smtpmail-smtp-user "elcorreo@deshackra.com"
     ;; html2text es un paquete que debe estar instalado en tu sistema
     mu4e-confirm-quit nil
     mu4e-html2text-command 'mu4e-shr2text
     mu4e-get-mail-command "getmail.sh"
     mu4e-maildir "/home/jorge/correo"
     mu4e-update-interval nil
     mu4e-auto-retrieve-keys t
     mu4e-headers-leave-behavior 'apply
     mu4e-headers-visible-lines 8
     mu4e-hide-index-messages t
     message-kill-buffer-on-exit t
     mu4e-attachment-dir  "~/Descargas"
     mu4e-maildir       "~/correo" ;; top-level Maildir
     mu4e-sent-folder   "/personal/Enviados" ;; folder for sent messages
     mu4e-drafts-folder "/personal/Borradores" ;; unfinished messages
     mu4e-trash-folder  "/personal/Papelera"  ;; trashed messages
     mu4e-refile-folder "/personal/Archivados" ;; Mensajes salvados
     smtpmail-stream-type  'ssl
     smtpmail-smtp-service 465
     message-send-mail-function 'smtpmail-send-it
     mu4e-maildir-shortcuts
     '(("/personal/INBOX" . ?p)
       ("/gmx/INBOX"      . ?g)))
    (if (file-exists-p "/home/jorge/.secret/mu4e-cuentas.el")
        (load-file "/home/jorge/.secret/mu4e-cuentas.el")
      (notifications-notify :urgency critical :title "Cuentas de correo electronico" :body "El archivo '~/.secret/mu4e-cuentas.el' no se pudo cargar")))
#+END_SRC

*** dired y dired+
Extiende funcionalidades de =dired=. Se agrega una función personalizada que mata el buffer al presionar =q=,
porque verdaderamente no quiero saber nada más de esa carpeta en caso de desear salir de ella.

     #+BEGIN_SRC emacs-lisp 
       (require 'dired-sort)
       (require 'dired-details+)

       (setf dired-dwim-target t
             dired-recursive-deletes 'always
             dired-recursive-copies 'always
             delete-by-moving-to-trash t
             trash-directory "~/.local/share/Trash/files"
             dired-details-hide-link-targets nil
             diredp-hide-details-initially-flag nil
             dired-omit-mode t
             dired-details-propagate-flag t)

       (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.")
       (require 'dired+)
       (diredp-toggle-find-file-reuse-dir 1)

       (define-key ctl-x-map   "d" 'dired)
       (define-key ctl-x-4-map "d" 'diredp-dired-for-files-other-window)
       (define-key dired-mode-map (kbd ".") 'dired-up-directory)
       (define-key dired-mode-map (kbd "C-o") 'dired-omit-mode)
     #+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun shackra:dired ()
    "activa algunas cosas cuando entramos en dired"
    (dired-sort-name)
    (dired-details-activate)
    (dired-details-show)
    (dired-hide-details-mode -1)
    (dired-omit-mode))

  (add-hook 'dired-mode-hook #'shackra:dired)
#+END_SRC
*** avy-jump
reemplazo para [[*ace-jump][ace-jump]]
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-z") 'avy-goto-char)
  (global-set-key (kbd "C-S-z") 'avy-goto-line)
  (global-set-key (kbd "C-M-z") 'avy-goto-word-1)
  (global-set-key (kbd "M-z") 'avy-isearch)

  (setf
   avy-all-windows t
   avy-background t
   avy-timeout-seconds 5)
#+END_SRC
*** magit
Git en Emacs.

A decir verdad, amo a Mercurial y odio a Git.

     #+BEGIN_SRC emacs-lisp 
       (define-key global-map [C-f12] 'magit-status)
       (setf magit-last-seen-setup-instructions "1.4.0"
             magit-auto-revert-mode nil)
     #+END_SRC

*** monky
Mercurial en Emacs

Amo Mercurial ;)

     #+BEGIN_SRC emacs-lisp 
       (define-key global-map [f12] 'monky-status)
       (setf monky-process-type 'cmdserver)
     #+END_SRC

*** Visual-regexp y Visual-regexp-steroids
expresiones regulares con algo más moderno que lo ofrecido por Emacs:

       #+BEGIN_SRC emacs-lisp 
         (define-key global-map (kbd "C-c r") 'vr/replace)
         (define-key global-map (kbd "C-c q") 'vr/query-replace)
         (define-key global-map (kbd "C-c m") 'vr/mc-mark)
         (define-key esc-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
         (define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s
       #+END_SRC

*** Para todos los modos mayores de programación
En lo personal, me gustaría que al escribir los comentarios en mi código fuente, las lineas se rompan al
llegar a la columna 79.

    #+BEGIN_SRC emacs-lisp 
      (defun shackra:prog-mode ()
        (set (make-local-variable 'fill-column) 79)
        (set (make-local-variable 'comment-auto-fill-only-comments) t)
        ;; Nota: M-q rellena las columnas del párrafo actual
        ;;       M-o M-s centra una linea de texto
        (auto-fill-mode t)
        (hlinum-activate)
        (highlight-numbers-mode)
        (hes-mode)
        (electric-pair-mode)
        (rainbow-turn-on)
        (flyspell-prog-mode))

      (add-hook 'prog-mode-hook #'shackra:prog-mode)

      ;; redefinimos la tecla RET para que inserte un salto de linea y la
      ;; idente de manera adecuada.
      (define-key prog-mode-map (kbd "RET") 'newline-and-indent)
    #+END_SRC

*** golang
configuración para golang en emacs.

       #+BEGIN_SRC emacs-lisp 
         (defun shackra:go-mode ()
           (local-set-key (kbd "C-c C-r") 'go-remove-unused-imports)
           (local-set-key (kbd "C-c i") 'go-goto-imports)
           (local-set-key (kbd "M-.") 'godef-jump)
           (set (make-local-variable 'company-backends) '(company-go
                                                          company-files))
           (go-eldoc-setup)
           (nlinum-mode))

         (add-hook 'go-mode-hook #'shackra:go-mode)
       #+END_SRC
       
*** rustlang
configuración para rustlang en Emacs. Yo aun no olvido lo hipócrita que es Mozilla y "su web abierta" por lo que le hicieron (o no hicieron, si quiere) con Brendan Eich. LAS PERSONAS TIENEN EL DERECHO A FINANCIAR CON SU DINERO AQUELLAS CAMPAÑAS EN FAVOR DEL MATRIMONIO Y LA FAMILIA, NO HAY RAZÓN PARA QUE SEAN PERSEGUIDAS Y PIERDAN SUS TRABAJOS PORQUE LOS FASCISTAS DEL MOVIMIENTO LGTB QUIEREN QUE QUIENES PIENSAN DISTINTOS DE ELLOS SE MANTENGAN IGNORANTES SOBRE [[http://whatismarriagebook.com/][QUÉ ES EL MATRIMONIO]] EN REALIDAD Y CUAL ES SU FUNDAMENTO. ¡Mozilla, hipócrita, cuanta tolerancia y respeto hacía los demás!.

#+BEGIN_SRC emacs-lisp 
  (defun shackra:rust-mode ()
    (set (make-local-variable 'company-backends) '(company-racer
                                                   company-files)))

  (add-hook 'rust-mode-hook #'shackra:rust-mode)
#+END_SRC

*** C++
configuración para habilitar auto-completado en Emacs para la
programación en el lenguaje C++

#+BEGIN_SRC emacs-lisp 
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))

  (defun shackra:c++-mode ()
    (irony-mode)
    (set (make-local-variable 'company-backends)
         '(company-irony
           company-yasnippet
           company-files)))

  (add-hook 'c++-mode-hook #'shackra:c++-mode)

  (add-hook 'irony-mode-hook 
            (lambda ()
              (my-irony-mode-hook)
              (irony-cdb-autosetup-compile-options)))
  #+END_SRC
*** Muse
Configuración para Muse, un modo mayor en Emacs para la escritura y publicación de libros a varios formatos.

#+BEGIN_SRC emacs-lisp 
  ;; proyectos Muse
  (setf
   muse-project-alist
   '(("WikiCatolica" ("~/Documentos/deshackra.com/wikicatolica.deshackra.com" :default "index")
      (:base "html" :path "~/Documentos/deshackra.com/wikicatolica.deshackra.com/salidahtml"))))
#+END_SRC

*** gancho para antes de guardar el archivo
puede que gustemos de hacer algo con el archivo antes de guardarlo. Acá se enganchan un par de funciones.

      #+BEGIN_SRC emacs-lisp 
        (add-hook 'before-save-hook 'web-beautify-html-buffer t t)
        (add-hook 'before-save-hook 'gofmt-before-save)
       #+END_SRC

*** langtool
CLOSED: [2015-07-21 mar 12:36]
- State "TERMINADO"  from "EN-REVISIÓN" [2015-07-21 mar 12:36]
- State "EN REVISIÓN" from ""           [2014-10-27 lun 15:26] \\
  al momento de usar los comandos, da errores
[[https://www.languagetool.org/es/][Language Tool]] es una herramienta de software libre para revisión gramatical, ortográfica y de estilo.

#+BEGIN_SRC emacs-lisp 
  (require 'langtool)
  (setf langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"
        langtool-mother-tongue "es")
#+END_SRC

*** Jabber
Chat de jabber desde Emacs!!

#+BEGIN_SRC emacs-lisp 
  (setf
   ;; ver http://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
   jabber-account-list `(
                         ("jorgedice@blah.im/emacs"
                          (:password . ,(secrets-get-secret "Login" "contraseña usual"))
                          (:network-server . "jabber.blah.im")
                          (:port . 5222)
                          (:nickname . "Shackra Sislock")
                          (:connection-type . starttls))
                         )
   jabber-history-enabled t
   jabber-use-global-history nil
   jabber-backlog-number 40
   jabber-backlog-days 30
   jabber-alert-presence-message-function (lambda (who oldstatus newstatus statusnext) nil)
   jabber-invalid-certificate-servers '("chat.deshackra.com")
   jabber-default-status "«Faith is always at a disadvantage; it is a perpetually defeated thing which survives all of its conquerors» ~G. K. Chesterton."
   )

  (defun my-jabber-chat-delete-or-bury ()
    (interactive)
    (if (eq 'jabber-chat-mode major-mode)
        (condition-case e 
            (delete-frame)
          (error 
           (if (string= "Attempt to delete the sole visible or iconified frame" 
                        (cadr e))
               (bury-buffer))))))

  (add-hook 'jabber-chat-mode-hook #'turn-off-auto-fill)
  (add-hook 'jabber-chat-mode-hook #'turn-on-visual-line-mode)
  (add-hook 'jabber-chat-mode-hook #'flyspell-mode)

  ;; (if (daemonp)
  ;;     ;; Nos conectamos a Jabber sólo cuando Emacs corre como demonio
  ;;     (jabber-connect-all))
#+END_SRC

*** GNU TLS
Una implementación libre de los protocolos SSL, TLS y DTLS. Interado con Emacs

#+BEGIN_SRC emacs-lisp 
  (setf gnutls-min-prime-bits 1024)
#+END_SRC

*** notify.el
CLOSED: [2015-01-14 mié 02:20]
- State "TERMINADO"  from "EN-REVISIÓN" [2015-01-14 mié 02:20]
- State "EN-REVISIÓN" from ""           [2014-11-03 lun 14:13] \\
  el método definido no es multiplataforma
Permite a emacs enviar notificaciones por DBus o diferentes medios

#+BEGIN_SRC emacs-lisp 
  (setf notify-method 'notify-via-libnotify)
#+END_SRC
*** MediaWiki
Acceso para Emacs a sitios que usan Wikimedia
#+BEGIN_SRC emacs-lisp 
  (setf mediawiki-site-alist
        `(
          ("Wikipedia en español" "https://es.wikipedia.org/w/" "jorgejavieran"
           ,(secrets-get-secret "Login" "contraseña usual") "Portal:Iglesia_católica")
          ("Wikipedia en Inglés" "https://en.wikipedia.org/w/" "jorgejavieran"
           ,(secrets-get-secret "Login" "contraseña usual") "Portal:Catholicism")))

  (define-key mediawiki-mode-map (kbd "C-c o") 'mediawiki-browse)
#+END_SRC
*** EN-ESPERA skewer-mode
- State "EN-ESPERA"  from ""           [2015-07-21 mar 12:36] \\
  Por el momento no quiero que se active esto
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
  (add-hook 'web-mode-hook 'skewer-html-mode)
#+END_SRC
*** TRAMP
Un paquete para la edición de archivos remotos

#+BEGIN_SRC emacs-lisp 
  (setf tramp-default-method "ssh")

  (add-to-list 'tramp-default-method-alist '("\\`localhost\\'" "\\`root\\'" "su"))
#+END_SRC
*** js2-mode
Un modo mayor para editar JavaScript

#+BEGIN_SRC emacs-lisp 
  (add-to-list 'auto-mode-alist '("\\.js\\'" .  js2-mode))
#+END_SRC
*** CSS
#+BEGIN_SRC emacs-lisp 
  (add-hook 'css-mode-hook (lambda ()
                             (add-hook 'before-save-hook 'web-beautify-css-buffer t t)))
#+END_SRC
*** find-file
#+BEGIN_SRC emacs-lisp 
  (add-hook 'find-file-hook 'find-file-sudo)
#+END_SRC
*** httpd-mode
Servidor web dentro de Emacs
#+BEGIN_SRC emacs-lisp 
  (setf httpd-port 9300)
#+END_SRC
*** recentf
Mantiene una lista de archivos visitados recientemente

#+BEGIN_SRC emacs-lisp 
  (add-to-list 'recentf-exclude ".git/")
  (add-to-list 'recentf-exclude ".hg/")
  (add-to-list 'recentf-exclude "elpa/")
  (add-to-list 'recentf-exclude "\\.emacs.d/org-clock-save.el\\'")
  (add-to-list 'recentf-exclude "INBOX/")
#+END_SRC
*** delete-frame-functions
#+BEGIN_SRC emacs-lisp 
  (add-hook 'delete-frame-functions 'shackra:run-delete-frame-hooks)
#+END_SRC

*** SLIME
Es un modo de Emacs para desarrollo con Common Lisp.

#+BEGIN_SRC emacs-lisp 
  (setf inferior-lisp-program "clisp")
#+END_SRC
*** twittering-mode
Twitter desde Emacs
#+BEGIN_SRC emacs-lisp 
  (setf twittering-use-master-password t
        twittering-icon-mode t
        twittering-display-remaining t)

  (define-key twittering-mode-map (kbd "C-c f") 'twittering-favorite)
#+END_SRC
*** helm-unicode
Permite escoger caracteres /unicode/ por nombre usando [[*HELM][Helm]].

#+BEGIN_SRC emacs-lisp 
  (define-key global-map (kbd "C-c h u") 'helm-unicode)
#+END_SRC
*** ScreenShot
Hace capturas de pantalla de Emacs, desde Emacs

#+BEGIN_SRC emacs-lisp 
  (setf screenshot-schemes
        '(
          ("local"
           :dir "~/Imágenes/emacs/")
          ("Carpeta actual"
           :dir default-directory)))
  (setf screenshot-default-scheme "local"
        screenshot-take-delay 3)
#+END_SRC
*** elfeed
Lector de /RSS feeds/ dentro de Emacs
#+BEGIN_SRC emacs-lisp 
  (setf elfeed-feeds
        '(
          ("http://www.nacion.com/rss/nacional/" periodico)
          ("http://www.nacion.com/rss/sucesos/" periodico)
          "http://infocatolica.com/atom.php"
          "http://www.teologoresponde.com.ar/feed/"
          "http://www.polygon.com/rss/index.xml"
          ("http://endlessparentheses.com/atom.xml" emacs)
          ("oremacs.com/atom.xml" emacs)
          ))

  (add-hook 'elfeed-new-entry-hook
            (elfeed-make-tagger :before "5 days ago"
                                :remove 'unread))

  (global-set-key (kbd "C-x w") 'elfeed)
#+END_SRC
*** appt
/Appointments/ me alerta de mis citas o pendientes que tengo por hacer.

#+BEGIN_SRC emacs-lisp 
  ;; configuración adaptada de http://emacs.stackexchange.com/a/5821/690 Gracias
  ;; a http://redd.it/35kbf6
  (require 'appt)
  (appt-activate t)

  (setf appt-message-warning-time 5
        appt-display-interval (1+ appt-message-warning-time)
        appt-display-mode-line nil)

  (defun shackra:org-agenda-to-appt ()
    (interactive)
    (setf appt-time-msg-list nil)
    (org-agenda-to-appt))

  (shackra:org-agenda-to-appt)
  (run-at-time "12:05am" (* 24 3600) 'shackra:org-agenda-to-appt)

  (defun shackra:appt-muestra-notificacion (min-to-app new-time msg)
    (if (atom min-to-app)
        ;; envía la notificación usando libnotify. Esto no funcionara si DBus no
        ;; se esta usando
        (notifications-notify
         :title "Agenda Org"
         :body (format "<b>Cita en %s minuto(s):</b><br>%s<br>" min-to-app msg)
         :app-name "Emacs: Org"
         :app-icon "/usr/share/icons/Adwaita/32x32/status/appointment-soon.png"
         :urgency "critical"
         :sound-file "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga"
         :timeout 0)
      ;; no entiendo este trozo de código, pero asumo que itera una lista de
      ;; cosas por hacer.
      (dolist (i (number-sequence 0 (1- (length min-to-app))))
        (notifications-notify
         :title "Agenda Org"
         :body (format "<b>Cita en %s minuto(s):</b> %s" (nth i min-to-app) (nth i msg))
         :app-name "Emacs: Org"
         :app-icon "/usr/share/icons/Adwaita/32x32/status/appointment-soon.png"
         :urgency "critical"
         :sound-file "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga"
         :timeout 0))))

  ;; Muestra las citas como notificaciones en el manejador de ventanas
  (setf appt-disp-window-function 'shackra:appt-muestra-notificacion)

  (defun shackra:appt-update-when-file-updated ()
    "Actualiza appt cuando cierto archivo es actualizado"
    (if (string= (buffer-file-name) (concat org-directory "/cosasporhacer.org"))
                   (shackra:org-agenda-to-appt)))

  ;; automáticamente actualiza las citas cuando el archivo cosasporhacer.org es
  ;; salvado (ahí es donde yo guardo mi lista de cosas por hacer, y mi agenda)
  (add-hook 'after-save-hook #'shackra:appt-update-when-file-updated)
#+END_SRC
*** header2
Añade y actualiza de manera automática las cabeceras de los archivos de tus proyectos!

Actualiza las cabeceras de los archivos antes de guardar el archivo visitado.

#+BEGIN_SRC emacs-lisp 
  (add-hook 'write-file-hooks 'auto-update-file-header)
#+END_SRC

Funcion para generar el texto de la licencia dependiendo de si el archivo es parte de un proyecto o no

#+BEGIN_SRC emacs-lisp 
  (defun shackra:header-render-license ()
    "Retorna el texto de la licencia adecuado si se esta dentro de un proyecto o no"
    (if (projectile-project-p)
        (let ((projname nil))
          (setf projname (format-spec-make ?n (projectile-project-name)))
          (format-spec "This file is part of %n.

  %n is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  %n is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with %n. If not, see <http://www.gnu.org/licenses/>." projname))

  ;; Licensia para proyectos que constan de un sólo archivo
  "This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>."))

  (defun shackra:header-free-software ()
    "Inserta un texto diciendo que el archivo es software libre o parte de un proyecto de software libre"
    (let ((header-multiline ""))
      (setf header-multiline (shackra:header-render-license))
      (header-multiline)))

  (defun shackra:header-project-name ()
    "Inserta el nombre del proyecto, en caso de estar dentro de uno"
    (when (projectile-project-p)
      (insert header-prefix-string (format "Project: %n\n" (projectile-project-name)))))

  (defun shackra:header-sep-line ()
    "Inserta una linea de separación"
    (insert header-prefix-string)
    (insert-char ?-
                 (- fill-column
                    (current-column)))
    (insert "\n"))

  (defun shackra:header-blank-noprefix ()
    "Inserta una linea en blanco para hacer espacio con las lineas de comentarios"
    (insert "\n"))

  (defun shackra:header-code ()
    "Inserta \"Code: \""
    (insert header-prefix-string "Code:\n\n"))
#+END_SRC

Función para renderizar las dos primeras lineas de las cabeceras de forma diferente en Python

#+BEGIN_SRC emacs-lisp 
  (defun shackra:header-python-shebang-coding ()
    "Inserta los famosos shebang (#!) y “coding”"
    (if (eq shackra:var-python-ver 2)
        (insert "#!/usr/bin/python2\n")
      (insert "#!/usr/bin/python3\n"))
    ;; TODO: Insertar la leyenda VENI, SANCTE SPIRITUS centrado
    (insert header-prefix-string "-*- coding: utf-8 -*-\n\n"))
#+END_SRC
*** sh-mode

#+BEGIN_SRC emacs-lisp 
  (add-hook 'sh-mode-hook (lambda ()
                            (set (make-local-variable 'fill-column) 79)
                            (set (make-local-variable 'comment-auto-fill-only-comments) t)
                            (auto-fill-mode t)))
#+END_SRC
*** chronos
Chronos es un modo mayor que lleva cronómetros en cuenta regresiva o en conteo normal
#+BEGIN_SRC emacs-lisp
  (setf chronos-notification-wav "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga")
  ;; Cuando un contador expira, le pedimos a Chronos que nos lo haga saber
  (add-hook 'chronos-expiry-functions #'chronos-desktop-notifications-notify)
#+END_SRC
*** AUCTeX
#+BEGIN_SRC emacs-lisp
  ;; remueve la versión preinstalada de AUCTeX
  (setf TeX-auto-save t
        TeX-parse-self t
        TeX-newline-function 'newline-and-indent
        ;; identa bien bonito los comandos de LaTeX que están dentro de un ambiente
        LaTeX-item-indent 0)
  (setq-default TeX-master nil)
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-PDF-mode t)
  (company-auctex-init)
#+END_SRC
*** fm-bookmarks
Muestra tus marcadores de los manejadores de archivos, como PCmanFM o Nautilus, en Dired

#+BEGIN_SRC emacs-lisp
  (require 'fm-bookmarks)
  ;; abre fm-bookmarks dentro de dired con '
  (define-key dired-mode-map (kbd "'") #'fm-bookmarks)
  ;; abre fm-bookmarks fuera de dired
  (global-set-key (kbd "C-x '") #'fm-bookmarks)
  ;; 'media sólo esta disponible para el sistema operativo GNU/Linux y derivados
  (setf fm-bookmarks-enabled-file-managers '(pcmanfm custom media))
  ;; Marcadores personalizados
  (setf fm-bookmarks-custom-bookmarks
        '(("Raíz" . "/")
          ("Archivos temporales" . "/tmp/")
          ("Proyectos" . "/home/jorge/proyectos/")
          ("Freelance" . "/home/jorge/proyectos/bitbucket.org/jorgefreelance/")))
  ;; esconde ubicaciones repetidas (ya que varios manejadores de archivos pueden
  ;; contener marcadores a ubicaciones iguales)
  (defvar fm-bookmarks-hide-duplicated t)
  ;; hagase la cache
  (setq fm-bookmarks-enable-cache t)
#+END_SRC
*** dired-rainbow
Colorea archivos por extensión o por su =chmod=

#+BEGIN_SRC emacs-lisp
  (require 'dired-rainbow)

  (defconst dired-audio-files-extensions
    '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
    "Dired Audio files extensions")
  (dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

  (defconst dired-video-files-extensions
      '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
        "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
      "Dired Video files extensions")
  (dired-rainbow-define video "#B3CCFF" dired-video-files-extensions)
#+END_SRC
