#+TITLE: Mi configuración de GNU Emacs
#+AUTHOR: Jorge Javier Araya Navarro (Shackra Sislock)
#+EMAIL: elcorreo@deshackra.com
#+OPTIONS: toc:3 num:nil ^:nil
#+STARTUP: content

#+begin_quote
Latin: Actiones nostras tibi comítimus, Dómine, ut ad maiorem gloriam tuam
repleamur.

Español: Te encomendamos, Señor, nuestras actividades para que las
realicemos a mayor gloria tuya.
#+end_quote

* Configuración de GNU Emacs en un archivo de org-mode
He decidido mover mi configuración a un sólo archivo. Anteriormente mi configuración estaba dividida en varios archivos =.el=, esto no era malo, sin embargo debo estar visitando diferentes archivos si deseo realizar varios cambios en mi configuración creándome una plétora de buffers en Emacs. Además, con =org-mode= me es posible documentar varios aspectos de mi configuración, sí, sí... ya sé que esto se puede hacer con comentarios en el código. Otro beneficio de usar =org-mode= y =babel= es la capacidad de contraer o expandir varias secciones de la configuración, o navegar rápidamente entre secciones (cosa que aun no sé hacer), además, con Babel no me veo restringido a ejecutar solamente código elisp ¡también puedo correr código Python!.

* Cómo hacer que todo esto funcione: =init.el=
Pasemos a la materia. Esta configuración se carga de la siguiente manera desde el archivo
=~/.emacs.d/init.el=:

#+BEGIN_SRC emacs-lisp :tangle no
;; init.el para esta configuración. Tu Emacs debe ser versión 24.
(package-initialize)
(require 'ob-tangle)
;; cuando el archivo org es más reciente que el archivo elisp, el archivo elisp
;; se recrea a partir de los bloques de código en el archivo org. Esto deberia
;; ahorrarme unos segundos cuando Emacs se carga.
(if (file-newer-than-file-p
     (expand-file-name "configuracion.org" user-emacs-directory)
     (expand-file-name "configuracion.el" user-emacs-directory))
    ;; enreda los bloques de código en un archivo elisp
    (org-babel-load-file (expand-file-name "configuracion.org" user-emacs-directory))
  ;; en caso contrario, carga el archivo ya existente :)
  (load-file (expand-file-name "configuracion.el" user-emacs-directory)))
(put 'downcase-region 'disabled nil)
#+END_SRC

activamos algunas opciones para depuración en caso de que Emacs falle en cargar la configuración.

#+BEGIN_SRC emacs-lisp :tangle no
  (toggle-debug-on-error)
  (toggle-debug-on-quit) ;; Se activa cuando el usuario presiona C-g
#+END_SRC

* Información personal
#+BEGIN_SRC emacs-lisp
  (setf user-full-name "Jorge Araya Navarro"
        user-mail-address "elcorreo@deshackra.com"
        calendar-location-name "Siquirres, CR"
        calendar-latitude 10.083333
        calendar-longitude -83.5)
#+END_SRC
* Repositorio de paquetes
Desde la versión 24 Emacs permite la instalación de paquetes de la misma manera como se realiza en
distribuciones de GNU/Linux.

El sistema de paquetes de Emacs no es perfecto, para que algunos paquetes funcionen como deben, aun debes poner algunas cosas en tu configuración de Emacs y tal. Revisa la descripción de cualquier paquetes que vayas a instalar para tener más información.

#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (when (< emacs-major-version 24)
    ;; Para importes librerias que requieren compatibilidad como cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

Para ver que paquetes hay disponibles, y cuales desea instalar, puede hacer uso del comando =M-x package-list-pactares=
* Modos
** =uniquify=
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :ensure nil
    :init
    (setf uniquify-buffer-name-style 'forward))
#+END_SRC
** =htmlize=
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
** =hlinum=
Extiende el modo =linum-mode= y subraya el numero de linea actual.
#+BEGIN_SRC emacs-lisp
  (use-package hlinum
    :disabled t
    :config
    (add-hook 'prog-mode-hook #'hlinum-activate))
#+END_SRC
** =fixmee=
Subraya cualquier termino "TODO" en cualquier modo mayor de programación.
#+BEGIN_SRC emacs-lisp
  (use-package fixmee
    :diminish fixmee-mode)
#+END_SRC
** =keyfreq=
Registra la frecuencia con la que se usan ciertas teclas en Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :if (daemonp)
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
** =undo-tree=
Reemplaza el mecanismo de deshacer/hacer de Emacs con un sistema que trata los cambios realizados como un árbol con ramificaciones de cambios.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :bind (("C-ç" . undo)
           ("M-ç" . redo))
    :init
    (setf undo-tree-mode-lighter "")
    :config
    (defalias 'redo 'undo-tree-redo)
    (global-undo-tree-mode 1))
#+END_SRC
** =theme-changer=
Cambia el tema de Emacs dependiendo de la hora del día. Para que esto funcione adecuadamente hay que especificar las coordenadas geográficas del lugar donde vivimos, para saber más ver [[*Información personal][Información personal]].
#+BEGIN_SRC emacs-lisp
  (use-package theme-changer
    :init
    (use-package material-theme
      :ensure t)
    :config
    (change-theme 'material-light 'material))
#+END_SRC
** =helm=
Completado incremental y estrechamiento de selección de candidatos :)
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :demand t
    :config
    (require 'helm-config)
    (use-package helm-grep
      :ensure nil
      :config
      ;; Instalar ack o ack-grep
      (when (executable-find "ack")
        (setf helm-grep-default-command "ack -Hn --no-group --no-color %e %p %f"
              helm-grep-default-recurse-command "ack -H --no-group --no-color %e %p %f"))
      ;; en caso de que ack-grep sea el programa disponible
      (when (executable-find "ack-grep")
        (setf helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
              helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f")))
    (use-package helm-files
      :ensure nil
      :config
      (setf helm-boring-file-regexp-list '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$"
                                           "\\._darcs$" "\\.la$" "\\.o$" "~$"
                                           "\\.pyc$" "\\.elc$" "TAGS" "\#*\#"
                                           "\\.exe$" "\\.jar$" "\\.img$" "\\.iso$"
                                           "\\.xlsx$" "\\.epub$" "\\.docx$")))
    (use-package helm-buffers
      :ensure nil
      :bind ("C-x b" . helm-mini)
      :config
      (setf helm-buffers-fuzzy-matching t
          helm-truncate-lines t
          helm-ff-skip-boring-buffers t
          helm-boring-buffer-regexp-list '("\\` " "\\*helm" "\\*helm-mode"
                                           "\\*Echo Area" "\\*Minibuf" "\\*monky-cmd-process\\*"
                                           "\\*epc con" "\\*Compile-Log\\*" "\\*monky-process\\*"
                                           "\\*CEDET CScope\\*" "\\*Messages\\*" "\\*Flycheck error"
                                           "\\*.+(.+)" "elpa/.+" "tramp/.+"
                                           "\\*Gofmt Errors\\*" "\\*autopep8" "\\*Pymacs\\*")))
    (setf helm-autoresize-max-height 40
          helm-autoresize-min-height 20
          helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8
          helm-ff-file-name-history-use-recentf t
          helm-locate-command "locate %s -e -A --regex %s"
          helm-locate-fuzzy-match t
          helm-M-x-fuzzy-match t
          helm-recentf-fuzzy-match    t
          helm-projectile-sources-list '(helm-source-projectile-files-list)
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t)
    (helm-mode 1)
    (helm-adaptative-mode 1)
    (helm-autoresize-mode 1))
#+END_SRC
** =org-mode=
El modo Org (Org-mode) es un modo de edición del editor de texto Emacs mediante el cual se editan documentos jerárquicos en texto plano.

Su uso encaja con distintas necesidades, como la creación de notas de cosas por hacer, la planificación de proyectos y hasta la escritura de páginas web. Por ejemplo, los elementos to-do (cosas por hacer) pueden disponer de prioridades y fechas de vencimiento, pueden estar subdivididos en subtareas o en listas de verificación, y pueden etiquetarse o dársele propiedades. También puede generarse automáticamente una agenda de las entradas de cosas por hacer. ~[[https://es.wikipedia.org/wiki/Org-mode][org-mode - Wikipedia, la enciclopedia libre]]
#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    ;; TODO: Añadir er/expand-region y endless/insert-key
    :config
    (org-clock-persistence-insinuate)
    ;; sacado de http://emacs.stackexchange.com/a/2103/690
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
    (setf org-footnote-auto-adjust t
          org-html-htmlize-output-type 'css
          org-html-htmlize-font-prefix "org-"
          org-habit-graph-column 55
          org-directory (expand-file-name "~/org")
          org-archive-location (expand-file-name "~/org-archivos/archivado.org::* Entradas viejas y archivadas")
          org-special-ctrl-k t
          org-ctrl-k-protect-subtree t ;; al usar C-k, evitamos perder todo el subarbol
          org-catch-invisible-edits 'show
          org-return-follow-link t
          org-startup-indented t
          org-startup-folded nil
          org-imenu-depth 5
          org-log-done 'note
          org-log-reschedule 'note
          org-log-redeadline 'note
          org-log-note-clock-out 'note
          org-log-refile 'note
          org-log-into-drawer t
          org-clock-persist 'history
          org-default-notes-file (concat org-directory "/diario.org")

          org-agenda-files (list (concat org-directory "/cosasporhacer.org")))
      (setf org-todo-keywords
          '(
            ;; Secuencia para TAREAS
            ;; POR-HACER significa que la tarea necesita atención
            ;; EN-PROGRESO significa que la tarea tiene mi atención y la estoy
            ;;   realizando
            ;; EN-ESPERA significa que la tarea se a pospuesto para después
            ;; EN-REVISIÓN significa que la tarea necesita ser revisada/hay alguna
            ;;   contrariedad
            ;; CANCELADO significa que la tarea a sido cancelada
            ;; TERMINADO significa que la tarea se a realizado con exito
            (sequence "POR-HACER(p)" "EN-PROGRESO(g)" "EN-ESPERA(e@/!)" "EN-REVISIÓN(r@/!)" "|" "CANCELADO(c@)" "TERMINADO(t!)")
            (sequence "ENTREGAR(n)" "|" "OLVIDALO(x@)" "ENTREGADO(N!)")))
    (setf org-todo-keyword-faces
          '(
            ("POR-HACER"   . (:background "#f4a460" :foreground "#8b4513" :weight bold))
            ("EN-PROGRESO" . (:background "#87cefa" :foreground "#483d8b" :weight bold))
            ("EN-ESPERA"   . (:background "#ffe4e1" :foreground "#8b8989" :weight bold))
            ("EN-REVISIÓN" . (:background "#fff68f" :foreground "#8b6508" :weight bold))
            ("TERMINADO"   . (:background "#98fb98" :foreground "#556b2f" :weight bold))
            ("CANCELADO"   . (:background "#ffaeb9" :foreground "#ff3030" :weight bold))
            ("ENTREGAR"    . (:background "#f4a460" :foreground "#8b4513" :weight bold))
            ("ENTREGADO"   . (:background "#98fb98" :foreground "#556b2f" :weight bold))
            ("OLVIDALO"    . (:background "#ffaeb9" :foreground "#ff3030" :weight bold))))
    (setf org-capture-templates
          '(
            ("t" "Tareas")

            ("tp" "Añadir tarea 'Por hacer'" entry (file+headline "cosasporhacer.org" "Tareas")
             "* POR-HACER %^{breve descripcion}
  :PROPERTIES:
  :CREATED:%U
  :END:
  %?")
            ("tc" "Calendario" entry (file+headline "cosasporhacer.org" "Calendario")
             "* %^{Nombre del evento}
  SCHEDULED: %:date")

            ("r" "Recados")
            ("rd" "Nuevo recado" entry (file "~/recados.org")
             "* ENTREGAR recado de %^{Nombre de persona}
  :PROPERTIES:
  :DE: %\\1
  :CONTACTO: %^{contacto}
  :CREATED: %T
  :END:
  %?" :kill-buffer t)
            ("g" "Algún día/Tal vez" entry (file+headline "quizas.org" "En 'veremos'")
             "* %^{breve descripcion}
  :PROPERTIES:
  :CREATED: %T
  :END:
  %?" :kill-buffer t)
            ("d" "Escribir una nota en el diario" plain (file org-default-notes-file)
             "* %^{Querido diario...}
  :PROPERTIES:
  :CREATED: %T
  :END:
  %?" :empty-lines 1 :kill-buffer t)))
    (use-package org-bullets
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC
** =visual-fill-column=
/fill-column for visual-line-mode/
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :defer t
    :config
    (add-hook 'org-mode-hook #'visual-fill-column-mode))
#+END_SRC
** =python=
Modo mayor para programar en Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure nil
    :init
    (setf python-mode-modeline-display "python-mode")
    :bind-keymap (("C-c >" . python-indent-shift-right)
                  ("C-c <" . python-indent-shift-left)
                  ("C-M-," . comment-dwim))
    :interpreter ("ipython" . python-mode)
    :preface
    (use-package pyvenv :defer t)
    (use-package py-autopep8 :defer t)
    :config
    (defun shackra/python-mode ()
      "Cosas que deseo activar/desactivar cuando voy a programar en Python"
      (electric-indent-local-mode -1)
      (pyvenv-mode)
      (py-autopep8-enable-on-save))
    (add-hook 'python-mode-hook #'shackra/python-mode))
#+END_SRC
** =company=
Un mejor motor de autocompletado comparado con [[https://github.com/auto-complete/auto-complete][auto-complete/auto-complete]].
#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand t
    :preface
    (use-package company-jedi)
    (use-package helm-company)
    :bind-keymap ("C-ñ" . helm-company)
    :init
    (setf company-idle-delay 0.3)
    (setf company-tooltip-limit 30)
    (setf company-minimum-prefix-length 1)
    (setf company-echo-delay 0)
    (setf company-auto-complete nil)
    :config
    (add-to-list 'company-backends 'company-dabbrev t)
    (add-to-list 'company-backends 'company-ispell t)
    (add-to-list 'company-backends 'company-files t)
    (add-to-list 'company-backends 'company-yasnippet t)
    (add-hook 'after-init-hook #'global-company-mode))
#+END_SRC
** =jedi=
Autocompletado para [[*=python=][=python=]].
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :defer t
    :init
    (setf jedi:complete-on-dot t)
    :config
    (defun shackra/jedi ()
      (jedi:setup)
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook #'shackra/jedi))
#+END_SRC
