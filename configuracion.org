#+TITLE: Configuración de GNU Emacs
#+AUTHOR: Jorge Javier Araya Navarro (Shackra Sislock)
#+EMAIL: elcorreo@deshackra.com
#+OPTIONS: toc:5 num:nil ^:nil
#+STARTUP: overview

#+begin_quote
                                                 🕇
                              Actiones nostras tibi comítimus, Dómine,
                               ut ad maiorem gloriam tuam repleamur.
                                               🕇   🕇
#+end_quote

* Configuración de GNU Emacs en un archivo de org-mode
He decidido mover mi configuración a un sólo archivo. Anteriormente mi configuración estaba dividida en varios archivos =.el=, esto no era malo, sin embargo debo estar visitando diferentes archivos si deseo realizar varios cambios en mi configuración creándome una plétora de buffers en Emacs. Además, con =org-mode= me es posible documentar varios aspectos de mi configuración, sí, sí... ya sé que esto se puede hacer con comentarios en el código. Otro beneficio de usar =org-mode= y =babel= es la capacidad de contraer o expandir varias secciones de la configuración, o navegar rápidamente entre secciones (cosa que aun no sé hacer), además, con Babel no me veo restringido a ejecutar solamente código elisp ¡también puedo correr código Python!.

Acá he movido parte de mi init.el ya que otro codigo que he colocado ahí hace el trabajo de desenredar los bloques de código a un archivo elisp.
#+BEGIN_SRC emacs-lisp
  ;; sombrero de aluminio
  (setq network-security-level 'paranoid)

  (package-initialize)

  (defun shackra/update-one-package (package)
    "Actualiza un paquete PACKAGE"
    (when (package-installed-p package)
      (let* ((newest-pkg (car-safe (cdr (assq package package-archive-contents))))
             (new-ver (and newest-pkg (package-desc-version newest-pkg)))
             (builtin-pkg (cdr (assq package package--builtins)))
             (installed-pkg (car-safe (cdr (assq package package-alist))))
             (old-dir (and installed-pkg (package-desc-dir installed-pkg)))
             (old-ver (or (and installed-pkg (package-desc-version installed-pkg))
                         (and builtin-pkg (package--bi-desc-version builtin-pkg)))))
        (when (and new-ver (version-list-< old-ver new-ver))
          ;; Instalamos la nueva versión de org-mode
          (condition-case nil
              ;; en caso de algún error tratando de bajar algún paquete, captura
              ;; el error para que no interfiera con la inicialización de Emacs
              (progn (package-install newest-pkg)
                     (message (format "Paquete «%s» actualizado de la versión %s a la versión %s"
                                      (package-desc-name newest-pkg) old-ver new-ver))))
          (unless old-dir
            (delete-directory old-dir t))))))

  ;; repositorios de paquetes
  (setf package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))

  (unless package-archive-contents
    (package-refresh-contents))

  ;; revisamos si no tenemos use-package instalado, porque de ser verdadero esto,
  ;; lo instalamos
  (when (not (package-installed-p 'use-package))
    (package-install 'use-package))

  (if (not (package-installed-p 'org))
      (package-install 'org)
    ;; El paquete esta instalado. Actualiza el paquete org-mode.
    (shackra/update-one-package 'org))

  ;; Arreglo para LaTeX con Emacs en MacOS "El Capitan"
  (when (eq system-type 'darwin)
    (setf exec-path (append exec-path '("/Library/TeX/texbin"))))

  ;; En caso de que /usr/local/bin no este agregado
  (when (and (not (member "/usr/local/bin" exec-path)) (or (not (eq system-type 'windows-nt))
                                                      (not (eq system-type 'cygwin))
                                                      (not (eq system-type 'ms-dos))))
    (setf exec-path (append exec-path '("/usr/local/bin")))
    (setenv "PATH" "/usr/local/bin:/Library/TeX/texbin/:$PATH" t))

  (put 'downcase-region 'disabled nil)
  (require 'use-package)
  (setf use-package-always-ensure t)

  (defun shackra/org-confirm-babel-evaluate (lang body)
    (not (or (string= lang "emacs-lisp"))))
  (setf org-confirm-babel-evaluate #'shackra/org-confirm-babel-evaluate)

#+END_SRC
* Seguridad
Emacs no es muy seguro por defecto, por ejemplo, al descargar paquetes de los [[*Repositorio%20de%20paquetes][Repositorio de paquetes]] no comprobara las credenciales SSL del sitio web. Más aun, los desarrolladores de extensiones no suelen firmar los /commits/ de sus extensiones, lo que permitiría que un atacante cambie algunas lineas de código elisp de un paquete para crear una puerta trasera. Más información aquí [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html#fnref:4][Deciphering Glyph :: Your Text Editor Is Malware]].

Esta configuración mitigara un poco el problema con la confianza ciega que tiene Emacs con las credenciales SSL.
** Instalación de certificados que Emacs pueda leer
Para esto seria necesario tener Python 2.7.x instalado en el sistema.

#+BEGIN_SRC sh :results silent
  pip3 install -U --user certifi
#+END_SRC

Probamos que el modulo a sido instalado correctamente

#+BEGIN_SRC sh :results output :exports both
  python3 -m certifi
#+END_SRC

#+RESULTS:
: /home/jorge/.local/lib/python3.5/site-packages/certifi/cacert.pem

** Configuración de verificación de TLS
#+BEGIN_SRC emacs-lisp :tangle security.el :tangle no
  (if (fboundp 'gnutls-available-p)
      (fmakunbound 'gnutls-available-p))

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string "python3 -m certifi")))))
    (setf tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setf tls-checktrust t)
    (setf gnutls-verify-error t)
    (setf gnutls-log-level 0)
    (setf gnutls-trustfiles (list trustfile)))
#+END_SRC

** Verificación de que todo este funcionando de manera correcta
Por alguna extraña razón, sólo la primer linea de código dispara un error. Sin embargo las otras dos lineas no disparan ninguno.
#+BEGIN_SRC emacs-lisp :tangle no :results silent :exports both
  (url-retrieve "https://wrong.host.badssl.com/" (lambda (retrieved) t))
  (url-retrieve "https://self-signed.badssl.com/" (lambda (retrieved) t))
  (url-retrieve "https://badssl.com/" (lambda (retrieved) t))
#+END_SRC
* Información personal
#+BEGIN_SRC emacs-lisp
  (setf user-full-name "Jorge Araya Navarro"
        user-mail-address "elcorreo@deshackra.com"
        calendar-location-name "Siquirres, CR"
        calendar-latitude 10.083333
        calendar-longitude -83.5)
#+END_SRC
* Repositorio de paquetes
Desde la versión 24 Emacs permite la instalación de paquetes de la misma manera como se realiza en
distribuciones de GNU/Linux.

El sistema de paquetes de Emacs no es perfecto, para que algunos paquetes funcionen como deben, aun debes poner algunas cosas en tu configuración de Emacs y tal. Revisa la descripción de cualquier paquetes que vayas a instalar para tener más información. Para ver que paquetes hay disponibles, y cuales desea instalar, puede hacer uso del comando =M-x package-list-pactares=
* Códigos Elisp
funciones de Emacs lisp escritas por mi u otras personas (y que yo he recolectado para mi uso personal)
** función para insertar etiquetas <kbd>
Gracias a Malabarba en su [[http://emacs.stackexchange.com/a/2208/690][respuesta desde Emacs.stackexchange]].
#+BEGIN_SRC emacs-lisp
  (defun endless/insert-key (key)
    "Ask for a key then insert its description.
  Will work on both org-mode and any mode that accepts plain html."
    (interactive "kType key sequence: ")
    (let* ((is-org-mode (derived-mode-p 'org-mode))
           (tag (if is-org-mode
                    "@@html:<kbd>%s</kbd>@@"
                  "<kbd>%s</kbd>")))
      (if (null (equal key "\r"))
          (insert
           (format tag (help-key-description key nil)))
        (insert (format tag ""))
        (forward-char (if is-org-mode -8 -6)))))
#+END_SRC
** funciones con expresiones regulares que uso a menudo en edición de texto
estas son funciones que uso muy a menudo durante la edición de texto, tenerlos como comandos interactivos me ahorra tiempo escribiendo las expresiones regulares una y otra vez.

#+BEGIN_SRC emacs-lisp
  (defun shackra/no-saltos-linea (start end)
    "Elimina todos los saltos de linea en la selección"
    (interactive "r")
    (vr/replace "\n+" " " start end))

  (defun shackra/no-multiple-espacios (start end)
    "Elimina todos los espacios en blanco seguidos en la selección"
    (interactive "r")
    (vr/replace " +" " " start end))
#+END_SRC
** reemplazo para comment-dwim
Idea original de [[http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html][Re: comment-dwim has no behavior to comment out the current line without a region]]
#+BEGIN_SRC emacs-lisp
  (defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
          If no region is selected and current line is not blank
          and we are not at the end of the line, then comment
          current line.  Replaces default behaviour of
          comment-dwim, when it inserts comment at the end of the
          line."
    (interactive "*P")
    (comment-normalize-vars)
    (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position))
      (comment-dwim arg)))
#+END_SRC
** =find-file= y =switch-buffer= personalizados
Problema: Cuando estoy dentro de un proyecto con Projectile-mode, me gusta visitar archivos y buffers relacionados con el proyecto en el cual estoy trabajando. Projectile-helm es de mucha ayuda, sin embargo la combinación de teclas es muy extensa y la mayoría de veces no las uso.

Solución: Crear mis funciones personalizadas para =find-file= y =switch-buffer=.
*** =find-file= personalizado
#+BEGIN_SRC emacs-lisp
  (defun shackra/find-file (arg)
    (interactive "p")
    (cond
     ((= arg 4) (message "4") (call-interactively 'find-file))
     ((= arg 16) (message "16") (call-interactively 'view-file))
     (t (if (projectile-project-p)
            (call-interactively (or (when (fboundp 'counsel-projectile-find-file) 'counsel-projectile-find-file)) (when (fboundp 'helm-projectile) 'helm-projectile-find-file))
          (call-interactively 'find-file)))))
#+END_SRC
*** =switch-buffer= personalizado
#+BEGIN_SRC emacs-lisp
  (defun shackra/switch-buffer (arg)
    (interactive "p")
    (cond
     ((= arg 4) (or (when (fboundp 'ivy-mode) (ivy-switch-buffer)) (when (fboundp 'helm) (helm-mini))))
     (t (if (projectile-project-p) (call-interactively (or (when (fboundp 'counsel-projectile) 'counsel-projectile-switch-to-buffer) (when (fboundp 'helm-projectile) 'helm-projectile-switch-to-buffer))) (or (when (fboundp 'ivy-mode) (ivy-switch-buffer)) (when (fboundp 'helm) (helm-mini)))))))
#+END_SRC
** abrir archivos que estén en modo de solo lectura como root
Código sacado de [[https://gist.github.com/robru/8c62d4891eb889107e9f][aquí]], según éste [[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][post en Emacs Redux]].

#+BEGIN_SRC emacs-lisp
  (defun find-file-sudo ()
    "reabre el archivo actual, si existe, usando sudo"
    (when (and buffer-file-name
             (not (file-writable-p buffer-file-name))
             (file-exists-p buffer-file-name))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC
** Recrea el blog para probar el diseño
Llamamos al comando =op/do-publication= con algunos parámetros para ahorrarnos el procedimiento manual de publicar el blog a una carpeta

#+BEGIN_SRC emacs-lisp
  (defun shackra/ppp ()
    "Llama op/do-publication con una serie de parámetros predeterminados. Útil cuando se esta diseñando un tema"
    (interactive)
    (op/do-publication t t "/tmp/blog" nil))
#+END_SRC
** Generación del blog y sincronización con RacketSpace
#+BEGIN_SRC emacs-lisp
  (defun shackra/syncblog ()
    "Sincroniza el blog generado con el contenedor en Racketspace"
    (interactive)
    ;; usa rclone para hacer la re-sincronización
    (start-process "sync rclone" (get-buffer-create "*rclone*") "rclone"
                   "sync"
                   (expand-file-name "~/Documentos/deshackra.com/elblog.deshackra.com")
                   "rscf:elblog.deshackra.com"))

  (defun shackra/genblog ()
    "Genera y sincroniza el blog"
    (interactive)
    ;; borra el directorio con los datos antiguos y vuelve a generar el blog
    ;;(delete-directory (expand-file-name "~/Documentos/deshackra.com/elblog.deshackra.com") t nil)
    (op/do-publication nil "HEAD^1" "~/Documentos/deshackra.com/elblog.deshackra.com/" nil)
    ;; sincroniza
    (shackra/syncblog))
#+END_SRC
** función para =delete-frame-functions=
#+BEGIN_SRC emacs-lisp
  (defun shackra/run-delete-frame-hooks (frame)
    "Esta función corre algunas funciones que no son llamadas cuando Emacs
  corre como proceso de segundo plano"
    (when (server-running-p)
      (savehist-save)
      (recentf-save-list)))

  (add-hook 'delete-frame-functions 'shackra/run-delete-frame-hooks)
#+END_SRC
** salva algunos buffers al perder Emacs el foco
Sacado de [[http://timothypratley.blogspot.nl/2015/07/seven-specialty-emacs-settings-with-big.html][Programming: Seven specialty Emacs settings with big payoffs]]

#+BEGIN_SRC emacs-lisp
  (defun guardar-todo ()
    (interactive)
    (save-some-buffers t))
#+END_SRC
** No molestes, Shia LaBeouf!
#+BEGIN_SRC emacs-lisp
  (defun shackra/org-reschedule-tomorrow ()
    "Re-Programa para mañana una tarea que pude hacer hoy"
    (interactive)
    (org-schedule :time (format-time-string "%Y-%m-%d" (time-add (current-time) (seconds-to-time 86400)))))
#+END_SRC
** Modificación de los caracteres en el mode-line
Los caracteres en el mode-line de Emacs pueden ser modificados ¿No es genial? (según [[http://tromey.com/blog/?p%3D831][The Cliffs of Inanity]], también [[http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html][lunarsite]]. referencias sobre =mode-line-format= en la [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Format.html][referencia de Elisp]])

#+BEGIN_SRC emacs-lisp
  (defvar shackra/vc-mode nil)
  (make-variable-buffer-local 'shackra/vc-mode)

  (require 'vc)
  (defun shackra/vc-command-hook (&rest args)
    (let ((file-name (buffer-file-name)))
      (setq shackra/vc-mode (and file-name
                                 (not (vc-registered file-name))
                                 (ignore-errors
                                   (vc-responsible-backend file-name))))))

  (add-hook 'vc-post-command-functions #'shackra/vc-command-hook)
  (add-hook 'find-file-hook #'shackra/vc-command-hook)

  (defun shackra/vc-info ()
    (if shackra/vc-mode
        (propertize "±" 'face 'error)
      " "))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Si usas `powerline', editar la variable mode-line-format es algo complicado,
  ;; pero no imposible
  (setq-default mode-line-format
                '("%e"
                  (:eval (if (buffer-modified-p)
                             (propertize " ↓ " 'face 'error)
                           "  "))
                  (:eval (shackra/vc-info))
                  " " mode-line-buffer-identification
                  " " mode-line-position
                  " " mode-line-modes
                  mode-line-misc-info))
#+END_SRC
** =defadvice= temporal
#+BEGIN_SRC emacs-lisp
  (defmacro my/with-advice (adlist &rest body)
    "Execute BODY with temporary advice in ADLIST.

  Each element of ADLIST should be a list of the form
    (SYMBOL WHERE FUNCTION [PROPS])
  suitable for passing to `advice-add'.  The BODY is wrapped in an
  `unwind-protect' form, so the advice will be removed even in the
  event of an error or nonlocal exit."
    (declare (debug ((&rest (&rest form)) body))
             (indent 1))
    `(progn
       ,@(mapcar (lambda (adform)
                   (cons 'advice-add adform))
                 adlist)
       (unwind-protect (progn ,@body)
         ,@(mapcar (lambda (adform)
                     `(advice-remove ,(car adform) ,(nth 2 adform)))
                   adlist))))
#+END_SRC
** Omitir confirmación para =y-or-n-p=
#+BEGIN_SRC emacs-lisp
  (defun my/bypass-confirmation (function &rest args)
    "Call FUNCTION with ARGS, bypassing all `y-or-n-p' prompts."
    (my/with-advice
     ((#'y-or-n-p :override (lambda (prompt) t)))
     (apply function args)))

  (defun my/bypass-confirmation-all (function &rest args)
    "Call FUNCTION with ARGS, bypassing all prompts.
  This includes both `y-or-n-p' and `yes-or-no-p'."
    (my/with-advice
     ((#'y-or-n-p    :override (lambda (prompt) t))
      (#'yes-or-no-p :override (lambda (prompt) t)))
     (apply function args)))
#+END_SRC
** usar Emacsclient como git mergetool
#+BEGIN_SRC emacs-lisp
  (defun shackra/emerge (local remote base output)
    "difftool que se abre en emacsclient"
    (emerge-files-with-ancestor nil local remote base output nil 'shackra/emerge--close-current-frame))

  (defun shackra/emerge--close-current-frame ()
    "Cierra el frame actual"
    (delete-frame (selected-frame)))
#+END_SRC
Para hacer que Git use emacsclient como /mergetool/ hay que modificar la configuración de Git
#+BEGIN_EXAMPLE
  [merge]
          tool = emacsclient
  [mergetool "emacsclient"]
          cmd = emacsclient -c -a \"\" --eval \"(shackra/emerge \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" \\\"$OUTPUT\\\")\"
          trustExitCode = true
#+END_EXAMPLE
** Generar enlaces de descargas para descargas directas y BitTorrent
#+BEGIN_SRC emacs-lisp
  (defun shackra/owp-descargas (title hashalist)
    "Enlaces Magnet a HTML."
    (let* ((nuevalista '())
           (nuevoelement (ht-create))
           (uri "")
           (nombre "")
           (tipo "")
           (!torrent)
           (mustache-partial-paths (list (expand-file-name "" user-emacs-directory))))
      ;; recreamos la lista en `hashalist' como una lista ht
      (dolist (e hashalist)
        (setf nombre (car e))
        (setf !torrent (car (cddr e)))
        (if !torrent
            (progn
              (setf uri (car (cdr e)))
              (setf tipo "directa"))
          (progn
            (setf tipo "con BitTorrent")
            (setf uri (format "magnet:?xt=urn:btih:%s&dn=%s&tr=%s"
                              (car (cdr e))
                              (url-hexify-string (car e))
                              (url-hexify-string (concat "udp://tracker.openbittorrent.com:80"
                                                         "&tr=udp://opentor.org:2710"
                                                         "&tr=udp://tracker.ccc.de:80"
                                                         "&tr=udp://tracker.blackunicorn.xyz:6969"
                                                         "&tr=udp://tracker.coppersurfer.tk:6969"
                                                         "&tr=udp://tracker.leechers-paradise.org:6969"))))))
        (ht-set! nuevoelement "nombre" nombre)
        (ht-set! nuevoelement "uri" uri)
        (ht-set! nuevoelement "es-torrent" (not !torrent))
        (ht-set! nuevoelement "tipo" tipo)
        (add-to-list 'nuevalista (ht-copy nuevoelement)))
      (mustache-render "{{> descargas}}" (ht ("hash-alist" nuevalista) ("titulo" title)))))
#+END_SRC
* Custom.el
 El archivo customize sera éste. Cualquier modificación de Emacs que se haga a través de =customize= ira al archivo especificado.

#+BEGIN_SRC emacs-lisp
  (setf custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
* mapeo de combinaciones de teclas
Combinaciones de teclas que no pertenecen a ningún paquete en particular.
#+BEGIN_SRC emacs-lisp
  (use-package mdct ;; siglas para Mapeo de Combinaciones de Teclas
    :ensure nil
    :preface (provide 'mdct)
    :init
    (defun shackra/split-window-vertically ()
      "Divide la ventana por la mitad verticalmente y mueve el cursor a la ventana nueva"
      (interactive)
      (split-window-vertically)
      (other-window 1))

    (defun shackra/split-window-horizontally ()
      "Divide la ventana por la mitad horizontalmente y mueve el cursor a la ventana nueva"
      (interactive)
      (split-window-horizontally)
      (other-window 1))
    :config
    (bind-keys :map ctl-x-map
               ("2" . shackra/split-window-vertically)
               ("3" . shackra/split-window-horizontally)))
#+END_SRC
* Aliases
Nombres más cortos para comandos usados frecuentemente
#+BEGIN_SRC emacs-lisp
  (defalias 'eb 'eval-buffer)
  (defalias 'er 'eval-region)
  (defalias 'ed 'eval-defun)
#+END_SRC
* Paquetes de extensiones
** Utilidades
*** =better-defaults=
configuración sana de ciertas opciones en Emacs
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :config
    ;; Se cargan otras modificaciones para mejorar el comportamiento de Emacs
    (load-file (expand-file-name "sane.el" user-emacs-directory))
    (ido-mode nil))
#+END_SRC
**** Tipografía
Función que comprueba disponibilidad de tipografías en el sistema, además de establecer la tipografía.
#+BEGIN_SRC emacs-lisp
  (use-package existefuente
    :ensure nil
    :preface (provide 'existefuente)
    :init
    (defun font-exists-p (font)
      "Comprueba si una tipografía existe. Sacado de https://redd.it/1xe7vr"
      (if (not (find-font (font-spec :name font)))
          nil
        t))
    (defun shackra/arregla-emojis (&optional frame)
      (if (eq system-type 'darwin)
          ;; Para NS/Cocoa
          (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
        ;; Para GNU/Linux
        (if (font-exists-p "Symbola")
            (set-fontset-font t 'symbol (font-spec :size 20 :name "Symbola") frame 'prepend)))))

  (use-package misfuentes
    :ensure nil
    :preface (provide 'misfuentes)
    :init
    (defun shackra/font-set (&optional frame)
      (when (framep frame)
        (select-frame frame)
        (if (font-exists-p "Monoisome")
            (progn
              (set-frame-font "Monoisome 9")
              (add-to-list 'default-frame-alist '(font . "Monoisome-9")))
          (if (font-exists-p "Monoid")
              (progn
                (set-frame-font "Monoid 9")
                (add-to-list 'default-frame-alist '(font . "Monoid-9")))
            (if (font-exists-p "Source Code Pro")
                (progn
                  (set-frame-font "Source Code Pro 10")
                  (add-to-list 'default-frame-alist '(font . "Source Code Pro-10"))))))))
    :config
    (add-hook 'after-make-frame-functions #'shackra/arregla-emojis)
    (add-hook 'after-make-frame-functions #'shackra/font-set)
    (unless (daemonp)
      (shackra/arregla-emojis)
      (shackra/font-set)))
#+END_SRC
*** secreto
Saca cualquier rastro de tus archivos y datos privados de tu configuración de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package secreto
    :ensure nil
    :load-path "site-packages/secreto.el/"
    :config
    (load-secretos))
#+END_SRC
*** secretaria
Mi intento de hacer algo mejor que [[*=appt=][=appt-mode=]].
#+BEGIN_SRC emacs-lisp
  (use-package secretaria
    :load-path "site-packages/secretaria/"
    :ensure nil
    :init
    (setf secretaria-clocked-task-save-file "~/.secretaria-tarea")
    :config
    (secretaria-today-unknown-time-appt-always-remind-me))
#+END_SRC
*** =font-man=
Escala la altura de la tipografía en todos los buffers de manera temporal
#+BEGIN_SRC emacs-lisp
  (use-package font-man
    :preface (use-package switch-buffer-functions)
    :ensure nil
    :load-path "site-packages/font-man")
#+END_SRC
*** =swiper=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:46]
:END:
Reemplazo para =I-search=, Swiper es el nombre en inglés de Zorro, un personaje de la serie /Dora la exploradora/.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :demand t
    :bind (:map global-map
                ("C-s" . swiper)
                ("C-r" . swiper)
                ("C-c C-r" . ivy-resume))
    :init
    (setf ivy-count-format "(%d/%d) ")
    (setf ivy-height 15)
    :config
    (use-package counsel
      :demand t
      :config (use-package counsel-projectile)
      :bind (:map global-map
                  ("M-x" . counsel-M-x)
                  ("M-y" . counsel-yank-pop)
                  :map help-map
                  ("f" . counsel-describe-function)
                  ("v" . counsel-describe-variable)
                  ("b" . counsel-descbinds)
                  :map ctl-x-map
                  ("8 RET" . counsel-unicode-char)
                  ("l" . counsel-locate)
                  ("f" . counsel-recentf)
                  ("C-f" . shackra/find-file)
                  ("b" . shackra/switch-buffer)))
    (use-package ivy-hydra)
    (ivy-mode 1))
#+END_SRC
*** CANCELADO =helm=                                        :deshabilitado:
- State "CANCELADO"  from              [2016-09-28 mié 19:04] \\
  deshabilitado
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:38]
:END:
Completado incremental y estrechamiento de selección de candidatos :)
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :disabled (fboundp 'ivy-mode)
    :diminish helm-mode
    :bind (("M-y" . helm-show-kill-ring)
           ("C-x f" . helm-recentf)
           ("C-x C-f" . shackra/find-file))
    :config
    (add-hook 'after-init-hook '(lambda ()(helm-mode 1)) t)
    ;; re-ata combinaciones de teclas a los comandos de helm
    (substitute-key-definition 'execute-extended-command 'helm-M-x (current-global-map))
    ;; revierte cambios recientes en Helm, según http://emacs.stackexchange.com/a/20276/690
    (require 'helm-config)
    (use-package helm-grep
      :ensure nil
      :config
      ;; Instalar ack o ack-grep
      (when (executable-find "ack")
        (setf helm-grep-default-command "ack -Hn --no-group --no-color %e %p %f"
              helm-grep-default-recurse-command "ack -H --no-group --no-color %e %p %f"))
      ;; en caso de que ack-grep sea el programa disponible
      (when (executable-find "ack-grep")
        (setf helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
              helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f")))
    (use-package helm-files
      :ensure nil
      :config
      (setf helm-boring-file-regexp-list '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$"
                                           "\\._darcs$" "\\.la$" "\\.o$" "~$"
                                           "\\.pyc$" "\\.elc$" "TAGS" "\#*\#"
                                           "\\.exe$" "\\.jar$" "\\.img$" "\\.iso$"
                                           "\\.xlsx$" "\\.epub$" "\\.docx$")))
    (use-package helm-buffers
      :ensure nil
      :config
      (substitute-key-definition 'switch-to-buffer 'shackra/switch-buffer (current-global-map))
      (setf helm-buffers-fuzzy-matching t
            helm-truncate-lines t
            helm-ff-skip-boring-buffers t
            helm-boring-buffer-regexp-list '("\\` " "\\*helm" "\\*helm-mode"
                                             "\\*Echo Area" "\\*Minibuf" "\\*monky-cmd-process\\*"
                                             "\\*epc con" "\\*Compile-Log\\*" "\\*monky-process\\*"
                                             "\\*CEDET CScope\\*" "\\*Messages\\*" "\\*Flycheck error"
                                             "\\*.+(.+)" "elpa/.+" "tramp/.+"
                                             "\\*Gofmt Errors\\*" "\\*autopep8"
                                             "\\*magit-process:" "\\*magit-diff:" "\\*anaconda-mode\\*")))
    (setf helm-autoresize-max-height 40
          helm-autoresize-min-height 20
          helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8
          helm-ff-file-name-history-use-recentf t
          helm-locate-command "locate %s -e -A --regex %s"
          helm-locate-fuzzy-match t
          helm-M-x-fuzzy-match t
          helm-recentf-fuzzy-match    t
          helm-projectile-sources-list '(helm-source-projectile-files-list)
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t)
    (use-package helm-descbinds
      :config
      (bind-keys :map help-map
                 ("b" . helm-descbinds)))
    (use-package helm-adaptive
      :disabled nil ;; por el momento no es buena idea usar esto, ver https://github.com/emacs-helm/helm/issues/751
      :ensure nil
      :config
      (add-hook 'after-init-hook '(lambda () (helm-adaptive-mode))) t)
    (helm-autoresize-mode 1))
#+END_SRC
*** =hydra=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:45]
:END:
"/Cut off one head, Two more shall take its place. Hail HYDRA!/" [[http://marvel-movies.wikia.com/wiki/HYDRA][―miembro HYDRA]].

Permite tratar combinaciones de teclas como grupos... es algo difícil de explicar, puede ver este vídeo [[https://www.youtube.com/watch?v=_qZliI1BKzI][Switching Emacs windows with hydra and ace-window - YouTube]] para entender de qué trata este paquete.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :preface
    (require 'hydra-examples)
    (use-package windmove
      :ensure nil)
    (use-package winner
      :ensure nil
      :config
      (winner-mode 1))
    (use-package windresize)
    (use-package ace-window
      :bind ("M-o" . shackra/other-window)
      :init
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      (defun --count-frames ()
        "Retorna el numero de frames visibles"
        (let* ((frames (if (daemonp) (butlast (visible-frame-list) 1) (visible-frame-list))))
          (length frames)))
      (defun shackra/other-window ()
        "cambia la ventana en que el cursor esta"
        (interactive)
        (if (or (> (count-windows) 2) (> (--count-frames) 1))
            (let ((golden-ratio-state golden-ratio-mode))
              (when golden-ratio-state
                (golden-ratio-mode -1)
                (balance-windows))
              (ace-window 1)
              (when golden-ratio-state
                (golden-ratio-mode 1)
                (golden-ratio)))
          (progn
            (ace-window 0)
            (golden-ratio))))
      :config
      (setf aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
    :config
    (defhydra hydra-zoom (global-map "<f2>")
      "Acercamiento"
      ("f" text-scale-increase "in")
      ("j" text-scale-decrease "out"))
    (defhydra hydra-avy (:color blue :columns 2)
      "avy jump"
      ("z" avy-goto-line "Ir a la linea...")
      ("x" avy-goto-word-1 "Ir a la palabra...")
      ("c" avy-goto-char-in-line "Ir a la letra en la linea actual...")
      ("v" avy-goto-char "Ir a la palabra (2)..."))
    (bind-key "C-z" 'hydra-avy/body)
    ;; Hydra nos permite hacer magia con la administración de ventanas dentro de
    ;; un marco de Emacs. Varios paquetes estan especificados en el `:preface'
    ;; del macro para hydra
    (defhydra hydra-win (:columns 4 :color amaranth :pre (progn (golden-ratio-mode -1) (balance-windows)) :post (progn (golden-ratio-mode 1) (golden-ratio-adjust golden-ratio-adjust-factor)))
      "Manejo de ventanas"
      ("<up>" windmove-up "Cursor ↑")
      ("<left>" windmove-left "Cursor ←")
      ("<down>" windmove-down "Cursor ↓")
      ("<right>" windmove-right "Cursor →")
      ("C-<up>" hydra-move-splitter-up "Astilla ↑")
      ("C-<left>" hydra-move-splitter-left "Astilla ←")
      ("C-<down>" hydra-move-splitter-down "Astilla ↓")
      ("C-<right>" hydra-move-splitter-right "Astilla →")
      ("b" shackra/switch-buffer "Cambiar buffer")
      ("f" shackra/find-file "Visitar/Crear archivo")
      ("z" (lambda () (interactive) (ace-window 1) (add-hook 'ace-window-end-once-hook 'hydra-win/body)) "Mover cursor a otra ventana")
      ("2" (lambda () (interactive) (split-window-right) (windmove-right)) "Dividir |")
      ("3" (lambda () (interactive) (split-window-below) (windmove-down)) "Dividir -")
      ("c" (lambda () (interactive) (ace-window 4) (add-hook 'ace-window-end-once-hook 'hydra-win/body)) "Intercambiar buffer de ventana")
      ("s" save-buffer "Guardar buffer")
      ("x" delete-window "Borrar ventana")
      ("X" (lambda () (interactive) (ace-window 16) (add-hook 'ace-window-end-once-hook 'hydra-win/body)) "Borrar esta/otra ventana")
      ("1" ace-maximize-window "Maximizar esta ventana")
      ("," (progn (winner-undo) (setf this-command 'winner-undo)) "Deshacer ultimo cambio")
      ("." winner-redo "Rehacer ultimo cambio")
      ("SPC" nil "Salir"))
    (bind-key "M-1" #'hydra-win/body))
#+END_SRC
*** dired
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:45]
:END:
Manejador de archivos de serie para Emacs.

Algunas mejoras fueron sacadas de [[https://truongtx.me/2013/04/24/dired-as-default-file-manager-1-introduction/][Dired as Default File Manager - Introduction]].
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :bind-keymap (("<f1>" . multi-term)
                  ("C-o" . dired-omit-mode))
    :init
    (setq-default dired-omit-mode t)
    (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.")
    (setq-default dired-omit-verbose nil)
    (setf dired-dwim-target t)
    (defun shackra/dired-no-esconder-detalles ()
      "No esconder los detalles de los archivos en dired, se ven muy bien"
      (dired-hide-details-mode 0))
    (defun dired-sort-group-dirs ()
      "Sort dired listings with directories first."
      (save-excursion
        (let (buffer-read-only)
          (forward-line 2) ;; beyond dir. header
          (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
        (set-buffer-modified-p nil)))
    :config
    (add-hook 'dired-mode-hook 'shackra/dired-no-esconder-detalles)
    (defadvice dired-readin
        (after dired-after-updating-hook first () activate)
      "Sort dired listings with directories first before adding marks."
      (dired-sort-group-dirs))
    (use-package dired+
      :init
      (diredp-toggle-find-file-reuse-dir 1))
    (use-package dired-details+
      ;; Sólo activa este paquete en caso de que la versión de Emacs no sea mayor
      ;; a 24.4.
      :if (version< emacs-version "24.4")
      :init
      (setf dired-details-propagate-flag t
            dired-details-initially-hide nil))
    (use-package ranger
      :init
      (when (fboundp 'helm) (setf helm-descbinds-window-style 'same-window))
      (setf ranger-cleanup-eagerly t)))
#+END_SRC
*** =keyfreq=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:45]
:END:
Registra la frecuencia con la que se usan ciertas teclas en Emacs. Esta información se puede utilizar para saber a qué comandos dar combinaciones de teclas más fáciles de presionar.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :if (daemonp)
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
**** ¿Cómo procesar la información estadística obtenida por éste paquete?
Primero se ejecuta el comando =command-frequency-display= el cual popula un buffer con los datos, el contenido de ese buffer debe ser guardado en un archivo. Luego se usa un [[http://ergoemacs.org/emacs/command-frequency.py][script de Python]] que procesara ese archivo, saneara los datos y creara un archivo HTML el cual contendrá el reporte.
*** =undo-tree=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:45]
:END:
Reemplaza el mecanismo de deshacer/hacer de Emacs con un sistema que trata los cambios realizados como un árbol con ramificaciones de cambios.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :preface (require 'undo-tree)
    :diminish undo-tree-mode
    :bind (("C-ç" . undo)
           ("M-ç" . redo))
    :init
    (defadvice undo-tree-make-history-save-file-name
        (after undo-tree activate)
      (setq ad-return-value (concat ad-return-value ".7z")))
    (setf undo-tree-visualizer-timestamps t)
    :config
    (defalias 'redo 'undo-tree-redo)
    (global-undo-tree-mode 1))
#+END_SRC
*** CANCELADO =theme-changer=                               :deshabilitado:
- State "CANCELADO"  from              [2016-09-28 mié 19:05] \\
  deshabilitado
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:46]
:END:
Cambia el tema de Emacs dependiendo de la hora del día. Para que esto funcione adecuadamente hay que especificar las coordenadas geográficas del lugar donde vivimos, para saber más ver [[*Información personal][Información personal]].
#+BEGIN_SRC emacs-lisp
  (use-package theme-changer
    :disabled t
    :config
    (use-package zenburn-theme)
    (change-theme 'material-light 'base16-mocha-dark)
    (use-package tramp-theme
      :disabled t))
#+END_SRC
*** zenburn
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC
*** CANCELADO =hlinum=                                      :deshabilitado:
- State "CANCELADO"  from              [2016-09-28 mié 19:05] \\
  deshabilitado
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:47]
:END:
Extiende el modo =linum-mode= y subraya el numero de linea actual.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package hlinum
    :config
    (add-hook 'prog-mode-hook #'hlinum-activate))
#+END_SRC
*** nlinum
Muestra el numero de lineas al margen del buffer
#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :pin gnu
    :init
    (defun ancho-nlinum-mode-hook ()
      "Calcula el ancho de los números para evitar feos saltos al desplazarse"
      (when nlinum-mode
        (setq-local nlinum-format (concat "%" (number-to-string
                                               (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
                                          "d"))))
    (defun initialize-nlinum (&optional frame)
      "Flanque de error en nlinum al usar Emacs como demonio"
      (require 'nlinum)
      (add-hook 'prog-mode-hook 'nlinum-mode))
    (add-hook 'nlinum-mode-hook #'ancho-nlinum-mode-hook)
    (if (daemonp)
        (progn
          (add-hook 'window-setup-hook #'initialize-nlinum)
          (defadvice make-frame (around toggle-nlinum-mode compile activate)
            (nlinum-mode -1) ad-do-it (nlinum-mode 1)))
      (add-hook 'prog-mode-hook #'nlinum-mode)))
#+END_SRC
*** CANCELADO =ycmd=                                        :deshabilitado:
- State "CANCELADO"  from              [2016-09-28 mié 19:05] \\
  deshabilitado
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:49]
:END:
/A code-completion & code-comprehension server/

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ycmd
    :disabled t ;; hasta tener instalado ycmd
    :config
    (use-package company-ycmd))
#+END_SRC
*** =company=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:50]
:END:
Un mejor motor de autocompletado comparado con [[https://github.com/auto-complete/auto-complete][auto-complete/auto-complete]].
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :init
    (setf company-backends '((company-files
                              company-keywords
                              company-capf
                              company-yasnippet)
                             (company-abbrev company-dabbrev)))
    (setf company-idle-delay 0.3)
    (setf company-tooltip-limit 30)
    (setf company-minimum-prefix-length 1)
    (setf company-echo-delay 0)
    (setf company-auto-complete nil)
    :config
    (add-hook 'after-init-hook #'global-company-mode)
    (use-package helm-company
      :disabled (not (fboundp 'helm))
      :bind (:map company-mode-map
                  ("C-ñ" . helm-company)))
    (use-package company-quickhelp
      :config (company-quickhelp-mode 1))
    (use-package company-statistics
      :init
      (setf company-statistics-file "~/.company-statistics-cache.el")
      (add-hook 'after-init-hook 'company-statistics-mode)))
#+END_SRC
*** =projectile=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:50]
:END:
Manejo de archivos de un proyecto.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :init
    (setf projectile-completion-system (or (when (fboundp 'ivy-mode) 'ivy) (when (fboundp 'helm) 'helm))
          projectile-switch-project-action  (or (when (fboundp 'counsel-projectile) 'counsel-projectile-find-file) (when (fboundp 'helm-projectile) 'helm-projectile-find-file)))
    (setf
     projectile-file-exists-remote-cache-expire (* 10 60)
     projectile-globally-ignored-files '("TAGS" "\#*\#" "*~" "*.la"
                                         "*.o" "*.pyc" "*.elc" "*.exe"
                                         "*.zip" "*.tar.*" "*.rar" "*.7z"))
    :config
    (use-package ag)
    (use-package helm-projectile
      :disabled (not (fboundp 'helm))
      :config
      (helm-projectile-on))
    (add-hook 'after-init-hook #'projectile-global-mode))
#+END_SRC
*** =recentf=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
Archivos recientes abiertos en Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :ensure nil
    :init
    (setf recentf-max-saved-items 100)
    :config
    (add-to-list 'recentf-exclude ".git/")
    (add-to-list 'recentf-exclude ".hg/")
    (add-to-list 'recentf-exclude "elpa/")
    (add-to-list 'recentf-exclude "\\.emacs.d/org-clock-save.el\\'")
    (add-to-list 'recentf-exclude "INBOX/"))
#+END_SRC
*** =expand-region=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
Incrementa la selección por unidades semánticas.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :defer 3
    :bind ("C-c 0" . er/expand-region))
#+END_SRC
*** =avy-jump=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
El cursor salta en cualquier parte del buffer según un /árbol de decisiones/ basado en caracteres.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :defer 3
    :config
    (bind-keys :prefix-map shackra/avy-mode-map
               :prefix "C-c z"
               ("z" . avy-goto-line)
               ("x" . avy-goto-word-1)
               ("c" . avy-goto-char-in-line)
               ("v" . avy-goto-char)))
#+END_SRC
*** =multi-term=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
Ofrece un excelente emulador de terminal *dentro* de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :bind ([f1] . multi-term)
    :init
    (defun shackra/maybe-disable-yasnippet ()
      "Desactiva yasnippet a pedido"
      (if (fboundp 'yas-minor-mode)
          (yas-minor-mode -1)))
    (defun shackra/term-line-or-char-mode ()
      "Cambia entre `term-line-mode' y `term-char-mode'"
      (interactive)
      (when (string= (buffer-local-value 'major-mode (current-buffer)) "term-mode")
        (if (term-in-char-mode)
            (term-line-mode)
          (term-char-mode))))
    :config
    (setf multi-term-buffer-name "sh-"
          multi-term-program "/usr/bin/zsh"
          multi-term-program-switches "--login")
    (add-to-list 'term-bind-key-alist '("C-c C-c"   . term-interrupt-subjob))
    (add-to-list 'term-bind-key-alist '("C-p"       . previous-line))
    (add-to-list 'term-bind-key-alist '("C-n"       . next-line))
    (add-to-list 'term-bind-key-alist '("M-f"       . term-send-forward-word))
    (add-to-list 'term-bind-key-alist '("M-b"       . term-send-backward-word))
    (add-to-list 'term-bind-key-alist '("C-c C-j"   . shackra/term-line-or-char-mode))
    (add-to-list 'term-bind-key-alist '("C-DEL"     . term-send-backward-kill-word))
    (add-to-list 'term-bind-key-alist '("M-d"       . term-send-forward-kill-word))
    (add-to-list 'term-bind-key-alist '("<C-left>"  . term-send-backward-word))
    (add-to-list 'term-bind-key-alist '("<C-right>" . term-send-forward-word))
    (add-to-list 'term-bind-key-alist '("C-r"       . term-send-reverse-search-history))
    (add-to-list 'term-bind-key-alist '("M-p"       . term-send-raw-meta))
    (add-to-list 'term-bind-key-alist '("M-y"       . term-send-raw-meta))
    (add-to-list 'term-bind-key-alist '("C-y"       . term-paste))

    (add-hook 'term-mode-hook #'shackra/maybe-disable-yasnippet))
#+END_SRC
*** =magit=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
Git en Emacs. A decir verdad, amo Mercurial y odio Git.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :config
    (use-package gitignore-mode)
    (use-package gitconfig-mode)
    (use-package magit-gh-pulls
      :config
      (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
    (use-package git-commit-insert-issue
      :disabled (not (fboundp 'helm))
      :config
      (add-hook 'git-commit-mode-hook 'git-commit-insert-issue-mode))
    :init
    (setf magit-last-seen-setup-instructions "1.4.0"
          magit-auto-revert-mode nil
          magit-completing-read-function 'ivy-completing-read))
#+END_SRC
*** git-gutter-fring
Muestra información de =git diff= en el fringe.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode t))
#+END_SRC
*** =monky=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
Mercurial en Emacs. Amo Mercurial ;)

Ver opciones más actualizadas para Mercurial en [[https://www.reddit.com/r/emacs/comments/3nzp7a/best_way_to_use_mercurial_with_emacs/][Best way to use Mercurial with Emacs? : emacs]]
#+BEGIN_SRC emacs-lisp
  (use-package monky
    :defer t
    :bind ([C-f12] . monky-status)
    :init
    (setf monky-process-type 'cmdserver))

  (use-package hgignore-mode)
#+END_SRC
*** =kill-or-bury-alive=
Permite designar qué buffers queremos matar o enterrar (/bury/).
#+BEGIN_SRC emacs-lisp
  (use-package kill-or-bury-alive
    :bind (("C-x k" . kill-or-bury-alive))
    :config
    (setf kill-or-bury-alive-must-die-list
          '("^\\*Calendar\\*$" "^\\*Help\\*$" "^\\*Packages\\*$" dired-mode prog-mode text-mode rust-mode fundamental-mode "^\\*Backtrace\\*$"))
    (add-to-list 'kill-or-bury-alive-long-lasting-list "^\\*sh-<[:digit:]+>\\*$" t))
#+END_SRC
*** eldoc
Muestra en el =área de eco= la firma de la función actual.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :init
    (setf eldoc-idle-delay 0.3))
#+END_SRC
*** =auto-revert-mode=
Revierte el contenido de un buffer de manera automática cuando el contenido de un archivo a cambiado fuera de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package auto-revert-mode
    :preface
    (provide 'auto-revert-mode)
    :ensure nil
    :init
    (global-auto-revert-mode))
#+END_SRC
*** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (add-hook 'prog-mode-hook #'yas-minor-mode-on))
#+END_SRC
*** imenu-anywhere
Crea menús a partir de secciones de documentos
#+BEGIN_SRC emacs-lisp
  (use-package imenu-anywhere
    :config
    (bind-key "C-c i" (or (when (fboundp 'ivy-mode) 'ivy-imenu-anywhere) (when (fboundp 'helm) 'helm-imenu-anywhere)))
    (use-package imenu+
      :disabled t ;; ver razón en https://redd.it/3ahj2d
      :init
      (setf imenup-ignore-comments-flag t)))

#+END_SRC
*** Bookmark+
#+BEGIN_SRC emacs-lisp
  (use-package bookmark+
    :init
    (setf bmkp-auto-light-when-set 'all-in-buffer)
    (setf bookmark-save-flag 1)
    :bind (("C-c o" . hydra-bm/body))
    :config
    (defhydra hydra-bm (:color amaranth :hint nil)
      "
      Marcadores

      Cambiar                          Agregar           Editar
    ╭──────────────────────────────────────────────────────────────────────╯
     [_j_] Anterior (buffer actual)   [_f_] aquí...   [_e_] aquí...
     [_l_] Siguiente (buffer actul)
     [_k_] Saltar a...
     [_K_] Saltar a... (por tipo)
     [_i_] Saltar a... (otra vent.)
    -----------------------------------------------------------------------
  "
      ("j" bmkp-previous-bookmark-this-buffer)
      ("l" bmkp-next-bookmark-this-buffer)
      ("k" bmkp-jump-in-navlist :color blue)
      ("K" bmkp-jump-to-type :color blue)
      ("i" bmkp-jump-to-type-other-window :color blue)
      ("f" bmkp-bookmark-set-confirm-overwrite :color blue)
      ("e" bmkp-edit-bookmark-name-and-location :color blue)
      ("L" bookmark-bmenu-list "Menú de marcadores" :color blue)
      ("<ESC>" nil "Salir")))
#+END_SRC
*** Firefox desde Emacs
#+BEGIN_SRC emacs-lisp
  (use-package moz-controller)
#+END_SRC
** Comunicación
*** =mu4e=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:52]
- Refiled on [2015-11-12 jue 16:51]
:END:
Un versátil cliente de correo electrónico para Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :if (file-exists-p "/usr/share/emacs/site-lisp/mu4e")
    :preface
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
    :ensure nil
    :init
    (setf mu4e-get-mail-command "getmail.sh")
    ;; html2text es un paquete que debe estar instalado en tu sistema
    (setf mu4e-html2text-command 'mu4e-shr2text)
    ;; hace mu4e el programa por defecto para escribir correo
    (setq mail-user-agent 'mu4e-user-agent)
    (setf mu4e-confirm-quit nil)
    (setf mu4e-context-policy 'pick-first)
    (setf mu4e-change-filenames-when-moving t)
    (setf mu4e-headers-date-format "%d/%m/%Y %H:%M")
    (setf message-citation-line-format "\nEl %A %d de %B del %Y a las %H%M horas, %N escribió:\n")
    (setf message-citation-line-function 'message-insert-formatted-citation-line)
    (setf message-cite-reply-position 'below)
    (setf mu4e-auto-retrieve-keys t)
    (setf mu4e-headers-leave-behavior 'apply)
    (setf mu4e-headers-visible-lines 8)
    (setf mu4e-hide-index-messages t)
    (setf message-kill-buffer-on-exit t)
    ;; TODO: Modificar esto de manera dinámica para otros sistemas operativos
    (setf mu4e-attachment-dir  "~/Descargas")
    ;; TODO: modificar esto segun sistema operativo?
    (setf mu4e-maildir "~/Mail")
    (setf smtpmail-stream-type  'ssl)
    (setf smtpmail-smtp-service 465)
    (setf message-send-mail-function 'smtpmail-send-it)
    (setf mu4e-bookmarks
          '(("flag:unread" "No leido" ?n)
            ("flag:flagged" "Marcados como importantes" ?m)
            ("maildir:/personal/Drafts OR maildir:/personal/Borradores OR maildir:/gmx/Drafts OR maildir:/gmx/Borradores" "Borradores" ?b)))
    :preface
    ;;; message view action
    (defun mu4e-msgv-action-view-in-browser (msg)
      "Ver el cuerpo del mensaje HTML en el navegador web"
      (interactive)
      (let ((html (mu4e-msg-field (mu4e-message-at-point t) :body-html))
            (tmpfile (format "%s/%d.html" temporary-file-directory (random))))
        (unless html (error "No hay partes en HTML para este mensaje"))
        (with-temp-file tmpfile
          (insert
           "<html>"
           "<head><meta http-equiv=\"content-type\""
           "content=\"text/html;charset=UTF-8\">"
           html))
        (browse-url (concat "file://" tmpfile))))

    (defadvice mu4e (before mu4e-start activate)
      "Antes de ejecutar `mu4e' borramos todas las ventanas"
      (window-configuration-to-register :mu4e-fullscreen)
      (delete-other-windows))

    (defadvice mu4e-quit (after mu4e-close-and-push activate)
      "Despues de salir de mu4e ejecutamos un script para subir los cambios al buzon de correo y para también restaurar la disposición de ventanas"
      (start-process "pushmail" nil "pushmail.sh")
      (jump-to-register :mu4e-fullscreen))
    :config
    (defalias 'correo 'mu4e)
    (add-to-list 'mu4e-view-actions
                 '("navegador web" . mu4e-msgv-action-view-in-browser) t)
    (use-package mu4e-contrib
      :ensure nil)
    (use-package org-mu4e
      ;; http://www.djcbsoftware.nl/code/mu/mu4e/Org_002dmode-links.html#Org_002dmode-links
      :ensure nil
      :bind (:map mu4e-headers-mode-map
                  ("C-c c" . org-mu4e-store-and-capture)
                  :map mu4e-view-mode-map
                  ("C-c c" . org-m4e-store-and-capture))
      :init
      (setf org-mu4e-link-query-in-headers-mode nil)))
#+END_SRC
*** CANCELADO =jabber.el=                                   :deshabilitado:
- State "CANCELADO"  from              [2016-09-28 mié 19:06] \\
  el paquete no funciona correctamente
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:52]
:END:
¡¡Chat de jabber desde Emacs!!

Jabber puede usar el protocolo de cifrado [[https://en.wikipedia.org/wiki/Off-the-Record_Messaging][Off-the-Record]] a través de [[https://github.com/legoscia/emacs-jabber-otr][legoscia/emacs-jabber-otr]], el único requisito es tener el paquete [[https://github.com/python-otr/pure-python-otr][python-otr/pure-python-otr]] instalado en el sistema.
#+BEGIN_SRC sh :tangle no
  sudo pip install python-potr
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package jabber
    :disabled t ;; no inicia de manera exitosa por un error
    :if (daemonp)
    :defer 10
    :init
    (setf fsm-debug nil)
    ;; ver http://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
    (setf jabber-account-list `(("jorgedice@blah.im/emacs"
                                 (:password . ,(secrets-get-secret "Login" "contraseña usual"))
                                 (:network-server . "jabber.blah.im")
                                 (:port . 5222)
                                 (:nickname . "Shackra Sislock")
                                 (:connection-type . starttls))))
    :config
    (use-package jabber-otr
      :disabled t)
    (setf jabber-history-enabled t
          jabber-use-global-history nil
          jabber-backlog-number 40
          jabber-backlog-days 30
          jabber-alert-presence-message-function (lambda (who oldstatus newstatus statusnext) nil)
          jabber-default-status "«Faith is always at a disadvantage; it is a perpetually defeated thing which survives all of its conquerors» ~G. K. Chesterton.")
    (add-hook 'jabber-chat-mode-hook #'turn-off-auto-fill)
    (add-hook 'jabber-chat-mode-hook #'turn-on-visual-line-mode)
    (add-hook 'jabber-chat-mode-hook #'flyspell-mode)
    (jabber-connect-all))
#+END_SRC
**** *Nota:* Deshabilitado por extraño mensaje de error
#+BEGIN_EXAMPLE
  Error (use-package): jabber :config: Wrong type argument: symbolp, (:fsm jabber-connection :state nil :state-data nil :sleep #[(secs) "\301\302\"\207" [secs accept-process-output nil] 3] :deferred nil)
#+END_EXAMPLE
*** CANCELADO =tumblesocks-mode=                            :deshabilitado:
- State "CANCELADO"  from              [2016-09-28 mié 19:06] \\
  No funciona correctamente
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:53]
:END:
Tumblr desde Emacs
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package tumblesocks
    :disabled t
    :config
    (setf tumblesocks-blog "shackra.tumblr.com")
    (defalias 'ts 'tumblesocks-view-dashboard))
#+END_SRC
*** =twittering-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:53]
:END:
Twitter desde Emacs
#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
    :init
    (defalias 'tt 'twit)
    (setf twittering-use-master-password t)
    (setf twittering-display-remaining t)
    (setf twittering-icon-mode t)
    (setf twittering-timer-interval 300)
    (setf twittering-url-show-status nil)
    :config
    (defun shackra/tt-fav-rett (&optional arg)
      "Marca como favorito y retweetea un tweet"
      (interactive "P")
      (my/bypass-confirmation-all #'twittering-retweet t)
      (my/bypass-confirmation-all #'twittering-favorite))
    (bind-key "C-c f" 'twittering-favorite twittering-mode-map)
    (bind-key "C-c F" 'shackra/tt-fav-rett twittering-mode-map)

    (add-hook 'twittering-edit-mode-hook #'ispell-minor-mode)
    (add-hook 'twittering-edit-mode-hook #'flyspell-mode))
#+END_SRC
*** =sx=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:53]
:END:
Acceso a Stackoverflow y subsitios desde Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package sx
    :defer 10)
#+END_SRC
*** org-webpage
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:57]
- Refiled on [2015-11-12 jue 16:46]
:END:
Generador estático de sitios web que depende de Emacs, Git y Org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-webpage
    :config
    ;; Le pedimos a org-mode que no meta las patas cuando exporta archivos a
    ;; HTML. Nosotros manejaremos el marcado de sintaxis de código fuente.
    ;; Muchas gracias a Chen Bin[1] por los trozos de código[2] sacados de su
    ;; propio proyecto[3] :)
    ;;
    ;; [1]: http://emacs.stackexchange.com/users/202/chen-bin
    ;; [2]: http://emacs.stackexchange.com/a/9839/690
    ;; [3]: https://github.com/redguardtoo/org2nikola/blob/master/org2nikola.el
    (load-file (expand-file-name "srcprecode.el" user-emacs-directory))
    (owp/add-project-config '("El blog de Shackra"
                              :repository-directory "~/Documentos/elblog.deshackra.com/"
                              :ignore-file-name-regexp "README"
                              :remote (rclone "rscf" "elblog.deshackra.com")
                              :site-domain "http://elblog.deshackra.com"
                              :site-main-title "El blog de Shackra"
                              :site-sub-title "No seas tan abierto de mente o tu cerebro se caerá"
                              :theme-root-directory (:eval (list (expand-file-name "org-page-themes" user-emacs-directory)))
                              :theme (shackra)
                              :source-browse-url ("Bitbucket" "https://bitbucket.org/shackra/blog")
                              :confound-email t
                              :default-category "blog"
                              :about ("Sobre mi" "/about")
                              :rss ("RSS" "/rss.xml")
                              :summary (("etiquetas" :tags))
                              :source-browse-url ("Bitbucket" "https://bitbucket.org/shackra/blog/")
                              :web-server-docroot "~/Documentos/deshackra.com/elblog.deshackra.com"
                              :web-server-port 5777))

    (eval-after-load 'ox
      '(progn
         (add-to-list 'org-export-filter-src-block-functions
                      'org2html-wrap-blocks-in-code))))
#+END_SRC
*** mediawiki
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:58]
- Refiled on [2015-11-12 jue 16:53]
:END:
Interfaz para editar paginas en instancias de Mediawiki desde Emacs. [[http://wikemacs.org/wiki/Mediawiki.el][Mediawiki.el - WikEmacs]]
#+BEGIN_SRC emacs-lisp
  (use-package mediawiki
    :init
    (setf mediawiki-site-alist '(("Wikipedia en español" "https://es.wikipedia.org/w/" "" "" "Portal:Iglesia_católica")
                                 ("Wikipedia en Inglés" "https://en.wikipedia.org/w/" "" "" "Portal:Catholicism")
                                 ("Parabola GNU/Linux-libre" "https://wiki.parabola.nu/" "" "" "User:Shackra")
                                 ("Wikemacs" "http://wikemacs.org/" "" "" "User:Shackra")))
    (setf mediawiki-site-default "Wikemacs")
    :config
    (add-hook 'mediawiki-mode-hook '(lambda ()
                                      (turn-off-auto-fill)
                                      (visual-line-mode 1))))
#+END_SRC
*** Weechat
Conexión a Weechat desde Emacs
#+BEGIN_SRC emacs-lisp
  (use-package weechat
    :init
    (add-to-list 'weechat-modules 'weechat-spelling)
    :config
    (add-hook 'after-init-hook (lambda () (when (not (weechat-connected-p))
                                       (weechat-connect weechat-host-default weechat-port-default nil 'plain)))))
#+END_SRC
** Desarrollo de software
*** org-babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (sh . t)))
#+END_SRC
*** =prog-mode=
Cualquier modo mayor que /herede/ de =prog-mode= sera afectado por esta configuración.
#+BEGIN_SRC emacs-lisp
  (use-package prog-mode
    :ensure nil
    :preface
    (provide 'prog-mode)
    (use-package rainbow-mode)
    (use-package highlight-escape-sequences
      :config
      (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
      (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face))
    (use-package highlight-numbers)
    :init
    (defun shackra/prog-mode ()
      (set (make-local-variable 'fill-column) 79)
      (set (make-local-variable 'comment-auto-fill-only-comments) t)
      ;; Nota: M-q rellena las columnas del párrafo actual
      ;;       M-o M-s centra una linea de texto
      (auto-fill-mode t)
      (highlight-numbers-mode)
      (hes-mode)
      (electric-pair-mode)
      (rainbow-turn-on)
      (flyspell-prog-mode))
    :config
    (bind-key "RET" 'newline-and-indent)
    (bind-key* "C-M-," 'comment-dwim)
    (add-hook 'prog-mode-hook #'shackra/prog-mode))
#+END_SRC
*** =org-mode=
El modo Org (Org-mode) es un modo de edición del editor de texto Emacs mediante el cual se editan documentos jerárquicos en texto plano.

Su uso encaja con distintas necesidades, como la creación de notas de cosas por hacer, la planificación de proyectos y hasta la escritura de páginas web. Por ejemplo, los elementos to-do (cosas por hacer) pueden disponer de prioridades y fechas de vencimiento, pueden estar subdivididos en subtareas o en listas de verificación, y pueden etiquetarse o dársele propiedades. También puede generarse automáticamente una agenda de las entradas de cosas por hacer. ~[[https://es.wikipedia.org/wiki/Org-mode][org-mode - Wikipedia, la enciclopedia libre]]
#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :init
    (use-package org-indent
      :defer t
      :ensure nil
      :diminish org-indent-mode)
    ;; TODO: Añadir er/expand-region y endless/insert-key
    :config
    (use-package ox-reveal
      :init
      (setf org-reveal-root "http://cdn.deshackra.com/revealjs"))
    (org-clock-persistence-insinuate)
    (setf org-clock-modeline-total 'today)
    ;; sacado de http://emacs.stackexchange.com/a/2103/690
    (setq org-stuck-projects
          '("+LEVEL=2/-ARCHIVED" ("TERMINADO" "CANCELADO") nil "\\<IGNORE\\>"))
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
    (setf org-footnote-auto-adjust t
          org-directory (expand-file-name "~/org")
          ;; sacado de https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/czg008y
          org-refile-targets `((nil :maxlevel . 9)
                               (org-agenda-files :maxlevel . 9)
                               (org-default-notes-file :maxlevel . 9)
                               (,(expand-file-name "notas.org" org-directory) :maxlevel . 3))
          org-outline-path-complete-in-steps nil
          org-refile-use-outline-path t
          ;; fin de código sacado de Reddit/emacs
          org-html-htmlize-output-type 'css
          org-html-htmlize-font-prefix "org-"
          org-habit-graph-column 55
          org-archive-location (expand-file-name "~/org-archivos/archivado.org::* Entradas viejas y archivadas")
          org-special-ctrl-k t
          org-ctrl-k-protect-subtree t ;; al usar C-k, evitamos perder todo el subarbol
          org-catch-invisible-edits 'show
          org-return-follow-link t
          org-startup-indented t
          org-startup-folded nil
          ;; Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
          org-replace-disputed-keys t
          org-imenu-depth 5
          org-log-done nil
          org-log-reschedule 'note
          org-log-redeadline 'note
          org-log-note-clock-out nil
          org-log-refile nil
          org-log-into-drawer nil
          org-clock-persist 'history
          org-default-notes-file (expand-file-name "quizas.org" org-directory)
          org-agenda-files (list (expand-file-name "cosas por hacer.org" org-directory)
                                 (expand-file-name "fechas.org" org-directory)))
    (use-package org-projectile
      :demand t
      :bind (("C-c p x p" . org-projectile:project-todo-completing-read))
      :init
      (setf org-projectile:per-repo-filename "proyecto.org")
      :config
      (add-to-list 'org-capture-templates (org-projectile:project-todo-entry "P"))
      (setf org-agenda-files (append org-agenda-files (org-projectile:todo-files))))
    (setf org-todo-keywords
          '(
            ;; Secuencia para TAREAS
            ;; POR-HACER significa que la tarea necesita atención
            ;; EN-PROGRESO significa que la tarea tiene mi atención y la estoy
            ;;   realizando
            ;; EN-ESPERA significa que la tarea se a pospuesto para después
            ;; EN-REVISIÓN significa que la tarea necesita ser revisada/hay alguna
            ;;   contrariedad
            ;; CANCELADO significa que la tarea a sido cancelada
            ;; TERMINADO significa que la tarea se a realizado con exito
            (sequence "POR-HACER(p)" "EN-PROGRESO(g)" "EN-ESPERA(e@/!)" "EN-REVISIÓN(r@/!)" "|" "CANCELADO(c@)" "TERMINADO(t!)")
            ;; Recados
            (sequence "ENTREGAR(n)" "|" "OLVIDALO(x@)" "ENTREGADO(N!)")
            ;; Para aquellas cosas que están en `quiaz.org'
            (sequence "LEER(l)" "DESCARGAR(d)" "VER(v)" "COMPRAR(b)" "|" "CANCELADO(C@)" "TERMINADO(T!)")
            ))
    (setf org-todo-keyword-faces
          '(
            ("POR-HACER"   . (:background "#f4a460" :foreground "#8b4513" :weight bold))
            ("EN-PROGRESO" . (:background "#87cefa" :foreground "#483d8b" :weight bold))
            ("EN-ESPERA"   . (:background "#ffe4e1" :foreground "#8b8989" :weight bold))
            ("EN-REVISIÓN" . (:background "#fff68f" :foreground "#8b6508" :weight bold))
            ("LEER"        . (:background "#f4a460" :foreground "#8b4513" :weight bold))
            ("DESCARGAR"   . (:background "#87cefa" :foreground "#483d8b" :weight bold))
            ("VER"         . (:background "#ffe4e1" :foreground "#8b8989" :weight bold))
            ("COMPRAR"     . (:background "#fff68f" :foreground "#8b6508" :weight bold))
            ("TERMINADO"   . (:background "#98fb98" :foreground "#556b2f" :weight bold))
            ("CANCELADO"   . (:background "#ffaeb9" :foreground "#ff3030" :weight bold))
            ("ENTREGAR"    . (:background "#f4a460" :foreground "#8b4513" :weight bold))
            ("ENTREGADO"   . (:background "#98fb98" :foreground "#556b2f" :weight bold))
            ("OLVIDALO"    . (:background "#ffaeb9" :foreground "#ff3030" :weight bold))))
    ;; según http://orgmode.org/manual/Link-abbreviations.html#Link-abbreviations
    (setf org-link-abbrev-alist
          '(("katpelicula" . "https://kat.cr/usearch/\"%s\" category:movies seeds:5 lang_id:2")
            ("katanime" . "https://kat.cr/usearch/\"%s\" category:english-translated seeds:5 is_safe:1/")))
    (setf org-capture-templates
          '(("p" "Añadir tarea por hacer" entry (file "cosas por hacer.org")
             "* POR-HACER %^{breve descripcion} %^g\n:PROPERTIES:\n:CREATED:%U\n:END:\n%?" :kill-buffer t)
            ("l" "Añadir tarea por hacer (enlazado a algo)" entry (file "cosas por hacer.org")
             "* POR-HACER %^{breve descripcion} %^g\n:PROPERTIES:\n:CREATED:%U\n:END:\n%a %?" :kill-buffer t)
            ("f" "Fechas o eventos" entry (file "fechas.org")
             "* POR-HACER %^{Nombre del evento} %^g\nSCHEDULED: %^T%?\n:PROPERTIES:%(if (yes-or-no-p \"¿Es esto un cumpleaños?\") (format \"\n:NACIMIENTO: %s\" (with-temp-buffer (org-time-stamp nil t) (buffer-string))) \"\")\n:CREATED: %U\n:END:" :kill-buffer t)
            ("r" "Recado" entry (file "~/recados.org")
             "* ENTREGAR recado de %^{Nombre de persona}\n:PROPERTIES:\n:DE: %\\1\n:CONTACTO: %^{contacto}\n:CREATED: %T\n:END:\n%?" :kill-buffer t)
            ("d" "Escribir una nota en el diario" plain (file org-default-notes-file)
             "* %^{Querido diario...}\n:PROPERTIES:\n:CREATED: %T\n:END:\n%?" :empty-lines 1 :kill-buffer t)

            ("g" "Algún día")

            ("gp" "Tarea" entry (file+headline "quizas.org" "Cosas por hacer")
             "* %^{breve descripcion}\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?" :kill-buffer t)
            ("gt" "Aprender" entry (file+headline "quizas.org" "Cosas por hacer")
             "* Aprender sobre %^{cosa}\n:PROPERTIES:\n:CREATED: %T\n:END:\n%?" :kill-buffer t)
            ("gl" "Libro" entry (file+headline "quizas.org" "Libros")
             "* Leer /%^{Titulo}/ por %^{Autor}\n:PROPERTIES:\n:CREATED: %T\n:AUTOR: %\\2\n:END:\n%?" :kill-buffer t)
            ("gb" "Blog" entry (file+headline "quizas.org" "Blogs")
             "* Leer entrada de blog /%^{copy as org}/\n:PROPERTIES:\n:CREATED: %T\n:END:\n%\\1%?" :kill-buffer t)
            ("gx" "Idea de proyecto" entry (file+headline "quizas.org" "Ideas para posibles proyectos")
             "* %^{Titulo o breve descripción} ^%g\n:PROPERTIES:\n:CREATED: %T\n:END:\n%?" :kill-buffer t)
            ("gm" "Películas" entry (file+headline "quizas.org" "Películas")
             "* Ver /%^{Titulo}/\n:PROPERTIES:\n:CREATED: %T\n:END:\n[[katpelicula:%\\1][Buscar %\\1 en Kickass Torrents]]%?" :kill-buffer t)
            ("ga" "Anime" entry (file+headline "quizas.org" "Anime")
             "* Ver /%^{Anime}/\n:PROPERTIES:\n:CREATED: %T\n:CATEGORY: anime\n:EPISODIO: 1\n:EPISODIOS: %^{numero de episodios}\n:END:\n[[katanime:%\\1][Buscar %\\1 en Kickass Torrents]]%?" :kill-buffer t)))
    (use-package org-bullets
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC
*** =pkgbuild-mode=
Un modo mayor de Emacs para la edición de archivos =PKGBUILD=
#+BEGIN_SRC emacs-lisp
  (use-package pkgbuild-mode
    :ensure nil
    :mode "/PKGBUILD$")
#+END_SRC
**** Preparación previa
Si estas en Arch Linux o Parabola GNU/Linux-libre, tienes que instalar el paquete correspondiente desde el repositorio de software de la distribución
#+BEGIN_SRC sh
  sudo pacman -S emacs-pkgbuild-mode
#+END_SRC
*** =python=
Modo mayor para programar en Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure nil
    :if (or (executable-find "python") (executable-find "python3"))
    :interpreter ("python3" . python-mode)
    :preface
    (use-package pyvenv :defer t)
    (use-package py-autopep8 :defer t
      :preface (unless (executable-find "autopep8")
                 (message "¡autopep8 no esta instalado!")
                 (message "Use pip install autopep8 para resolver el problema")))
    :config
    (use-package company-anaconda
      :if (executable-find "python")
      :diminish anaconda-mode
      :preface
      (if (executable-find "python")
          (when (>= (call-process "python" nil nil nil "-m" "jedi") 1)
            (message (format "Modulo jedi no instalado para interprete Python: %s" "python"))
            (message "Auto-completado para Python no funcionara sin ese modulo"))
        (message "LOL! El interprete Python ni siquiera esta instalado en el sistema"))
      :config
      (add-hook 'python-mode-hook (lambda () (add-to-list (make-local-variable 'company-backends) '(company-anaconda :with company-yasnippet))))
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
    (if (fboundp 'defhydra)
        (prog1 (defhydra hydra-py (:columns 2)
                 "Python (re) sangrado de bloques"
                 ("<" python-indent-shift-left "Decrementa el sangrado")
                 (">" python-indent-shift-right "Incrementa el sangrado")
                 ("SPC" indent-region "sangra la región" :color blue))
          ;; atamos la funcion hydra-py
          (bind-key "C-c <" 'hydra-py/body python-mode-map)
          (bind-key "C-c >" 'hydra-py/body python-mode-map))
      ;; Hydra no esta disponible, no podemos definir nuestra hydra entonces
      ;; atamos los atajos del teclado como si nada hubiera sucedido
      (bind-key "C-c <" 'python-indent-shift-left python-mode-map)
      (bind-key "C-c >" 'python-indent-shift-right python-mode-map))

    (use-package pony-mode
      :init
      (defun shackra/pony-remove-beautify-html ()
        "Quita el gancho para embellecer el HTML"
        (remove-hook 'before-save-hook 'web-beautify-html-buffer t))
      :config
      ;; quitamos el gancho que embellece el HTML cuando es guardado para que no
      ;; estropeé las plantillas de DJango
      (add-hook 'pony-tpl-minor-mode-hook #'shackra/pony-remove-beautify-html))

    (defun shackra/python-mode ()
      "Cosas que deseo activar/desactivar cuando voy a programar en Python"
      (electric-indent-local-mode -1)
      (pyvenv-mode)
      (py-autopep8-enable-on-save))
    (add-hook 'python-mode-hook #'shackra/python-mode))
#+END_SRC
*** =auctex-mode=
Paquete extensivo para escribir y formatear documentos TeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :preface
    (provide 'auctex)
    :config
    (setf TeX-auto-save t
          TeX-parse-self t
          TeX-newline-function 'newline-and-indent
          LaTeX-item-indent 0)
    (setq-default TeX-master nil)
    (setq-default TeX-engine 'xetex)
    (setq-default TeX-PDF-mode t)
    (use-package company-auctex
      :config
      (company-auctex-init))
    (if (fboundp 'shackra/yas)
        (add-hook 'latex-mode-hook 'shackra/yas)
      (add-hook 'latex-mode-hook 'yas-minor-mode-on)))
#+END_SRC
*** =toml=
/El lenguaje minimalista y obvio de Tom/
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
    :defer 10)
#+END_SRC
*** =yaml=
/YAML: YAML Ain't Markup Language/
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :defer 10
    :mode "\\.yml$")
#+END_SRC
*** =rust=
Modo mayor para editar código fuente en Rust. Rust es es un lenguaje de programación de sistemas que corre realmente rapido, previene fallos de segmentación (segfaults), y garantiza seguridad en programas multi-hilo.
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :if (executable-find "rustc")
    :config
    (use-package rustfmt
      :config
      (add-hook 'rust-mode-hook #'rustfmt-enable-on-save))
    (use-package cargo
      :if (executable-find "cargo"))
    (use-package racer
      :init
      (setf racer-rust-src-path (getenv "RUST_SRC_PATH"))
      (setf racer-cmd (expand-file-name "~/.cargo/bin/racer"))
      :config
      (add-hook 'rust-mode-hook #'racer-mode)
      (add-hook 'racer-mode-hook #'eldoc-mode)
      (use-package company-racer
        :config
        (add-hook 'rust-mode-hook '(lambda ()
                                     (add-to-list (make-local-variable 'company-backends) '(company-racer :with company-yasnippet))))))
    (use-package flycheck-rust
      :config
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+END_SRC
*** emacs-traad
Una aproximación cliente servidor para usar la librería de refactorización [[https://github.com/python-rope/rope][rope]].
#+BEGIN_SRC emacs-lisp
  (use-package traad
    :config
    (use-package python-environment)
    (use-package traad-projectile
      :if (fboundp 'projectile-project-p)
      :preface
      (provide 'traad-projectile)
      :ensure nil
      :init
      (defun shackra/traad-open ()
        "Inicia un servidor traad usando la ubicación del proyecto actual"
        (interactive)
        (if (projectile-project-p)
            (traad-open (projectile-project-root))
          (message "No estas en ningún proyecto!"))))
    ;; Si aun no se ha creado el entorno virtual para traad, lo mandamos a crear
    ;; de manera automática
    (if (not (file-exists-p (expand-file-name (concat python-environment-directory "/traad") user-emacs-directory)))
        (traad-install-server))
    (use-package hydra-traad
      :preface (provide 'hydra-traad)
      :ensure nil
      :if (fboundp 'defhydra)
      :bind (:map python-mode-map ("C-c t" .  hydra-traad/body))
      :init
      (defhydra hydra-traad-history (:columns 2 :color blue)
        "Historial de cambios de rope"
        ("u" traad-undo "deshacer")
        ("r" traad-redo "re-hacer")
        ("h" traad-display-history "mostrar historial de cambios")
        ("b" hydra-traad/body "volver")
        ("q" nil "salir"))
      (defhydra hydra-traad-rename (:columns 2 :color blue)
        "Renombrar con rope"
        ("f" traad-rename-current-file "archivo/modulo actual")
        ("r" traad-rename "objeto en locación actual")
        ("b" hydra-traad/body "volver")
        ("q" nil "salir"))
      (defhydra hydra-traad-signature (:columns 2 :color blue)
        "Cambiar firma con rope"
        ("n" traad-normalize-arguments "normalizar argumentos")
        ("r" traad-remove-argument "remover argumentos")
        ("b" hydra-traad/body "volver")
        ("q" nil "salir"))
      (defhydra hydra-traad-extraction (:columns 2 :color blue)
        "Extracción con rope"
        ("m" traad-extract-method "método")
        ("v" traad-extract-variable "variable")
        ("b" hydra-traad/body "volver")
        ("q" nil "salir"))
      (defhydra hydra-traad-imports (:columns 3 :color blue)
        "Importaciones con rope"
        ("o" traad-organize-imports "organizar")
        ("s" traad-expand-star-imports "expandir *")
        ("f" traad-froms-to-imports "convertir 'from' a normales")
        ("r" traad-relatives-to-absolutes "convertir relativos a absolutos")
        ("l" traad-handle-long-imports "manejar importaciones largas")
        ("S" traad-imports-super-smackdown "Smackdown!")
        ("b" hydra-traad/body "volver")
        ("q" nil "salir"))
      (defhydra hydra-traad (:columns 2 :columns 2)
        "Refactorización en Python con rope"
        ("h" hydra-traad-history/body "Historial" :exit t)
        ("r" hydra-traad-rename/body "Renombrar" :exit t)
        ("s" hydra-traad-signature/body "Firma" :exit t)
        ("e" hydra-traad-extraction/body "Extracción" :exit t)
        ("i" hydra-traad-imports/body "Importaciones" :exit t))))
#+END_SRC
*** web-mode
Un modo mayor para editar paginas web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (use-package emmet-mode
      :config
      (add-hook 'sgml-mode-hook 'emmet-mode)
      (add-hook 'web-mode-hook 'emmet-mode))
    (use-package company-web
      :config
      (add-hook 'web-mode-hook (lambda ()
                                 (add-to-list (make-local-variable 'company-backends) '(company-web-html :with company-yasnippet))))
      (use-package ac-html-bootstrap))
    (use-package web-beautify
      :config
      (add-hook 'json-mode-hook
                (lambda ()
                  (add-hook 'before-save-hook 'web-beautify-js-buffer t t)))
      (add-hook 'html-mode-hook
                (lambda ()
                  (add-hook 'before-save-hook 'web-beautify-html-buffer t t)))
      (add-hook 'css-mode-hook
                (lambda ()
                  (add-hook 'before-save-hook 'web-beautify-css-buffer t t)))))
#+END_SRC
*** PHP
modo mayor para editar código PHP
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :config
    (use-package php-refactor-mode
      :config
      (add-hook 'php-mode-hook 'php-refactor-mode)))
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :if (executable-find "go")
    :bind (:map go-mode-map
                ("M-." . godef-jump)
                ("C-c C-a" . go-import-add)
                ("C-c C-r" . go-remove-unused-imports)
                ("C-c C-i" . go-goto-imports)
                ("C-c C-c" . compile))
    :init
    (use-package f) ;; requerido para `shackra/go-update-compile-definition'
    (setf gofmt-show-errors nil) ;; para mostrar los errores es que existe Flycheck
    (setf gofmt-command "goimports")
    (defun shackra/go-update-compile-definition ()
      "Actualiza la definición del comando COMPILE para go-mode"
      (interactive)
      (when (eq major-mode 'go-mode)
        (if (string-suffix-p "_test.go" (buffer-name))
            (set (make-local-variable 'compile-command) "go test -bench=. -v && go vet")
          (set (make-local-variable 'compile-command) (format "go build && go vet && ./%s" (f-base (f-dirname (f-full (buffer-name)))))))))
    :config
    (add-hook 'go-mode-hook (lambda () (add-to-list (make-local-variable 'grep-find-ignored-directories) "vendor")))
    (use-package company-go
      :if (executable-find "gocode")
      :config
      (add-hook 'go-mode-hook (lambda ()
                                (add-to-list (make-local-variable 'company-backends) '(company-go :with company-yasnippet)))))
    (use-package go-eldoc
      :config
      (add-hook 'go-mode-hook 'go-eldoc-setup))
    (use-package go-projectile
      :if (fboundp 'projectile-mode))
    (use-package go-rename)
    (use-package go-snippets)
    (use-package go-guru
      :bind (:map go-mode-map
                  ("M-." . go-guru-definition)
                  ("C-M-g c s" . go-guru-callees)
                  ("C-M-g c r" . go-guru-callers)
                  ("C-M-g c k" . go-guru-callstack)
                  ("C-M-g d f" . go-guru-definition)
                  ("C-M-g d b" . go-guru-describe)
                  ("C-M-g f v" . go-guru-freevars)
                  ("C-M-g f r" . go-guru-referrers)
                  ("C-M-g p e" . go-guru-peers)
                  ("C-M-g p p" . go-guru-pointsto)
                  ("C-M-g i"   . go-guru-implements)
                  ("C-M-g w e" . go-guru-whicherrs))
      :if (executable-find "guru")
      :config
      (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)
      (add-hook 'go-mode-hook (lambda () (when (projectile-project-p) (set (make-local-variable 'go-guru-scope) (concat (projectile-project-root) "..."))))))
    (use-package helm-go-package
      :disabled (not (fboundp 'helm))
      :config (eval-after-load 'go-mode
                '(substitute-key-definition 'go-import-add 'helm-go-package go-mode-map)))
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-hook 'go-mode-hook 'shackra/go-update-compile-definition)
    (add-hook 'after-save-hook 'shackra/go-update-compile-definition))
#+END_SRC
*** javascript
modo mayor para editar JavaScript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :config
    (use-package company-tern
      :if (executable-find "tern")
      :init
      (setf company-tern-property-marker " <p>")
      (setf company-tern-meta-as-single-line t)
      :config
      (dolist (hook '(js2-mode-hook
                      inferior-js-mode-hook))
        (add-hook hook (lambda ()
                         (add-to-list (make-local-variable 'company-backends) '(company-tern :with company-yasnippet))))))
    (use-package js2-refactor
      :config
      (add-hook 'js2-mode-hook #'js2-refactor-mode))
    (use-package skewer-mode
      :disabled t
      :config
      (add-hook 'js2-mode-hook 'skewer-mode)
      (add-hook 'css-mode-hook 'skewer-css-mode)
      (add-hook 'html-mode-hook 'skewer-html-mode)
      (when (fboundp 'web-mode)
        (add-hook 'web-mode-hook 'skewer-html-mode))))
#+END_SRC
*** =html-mode=
#+BEGIN_SRC emacs-lisp
  (use-package sgml-mode
    :ensure nil
    :init
    (setf sgml-basic-offset 4))
#+END_SRC
*** Android
Desarrollo de aplicaciones para Android desde GNU Emacs
#+BEGIN_SRC emacs-lisp
  (use-package android-mode
    :init (custom-set-variables '(android-mode-sdk-dir "~/opt/android")))
#+END_SRC
*** SLIME
SLIME is the Superior Lisp Interaction Mode for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :init
    ;; Estoy leyendo Land of Lisp, así que necesito usar CLISP
    (setf inferior-lisp-program "/usr/bin/clisp")
    (setf slime-contribs '(slime-fancy)))
#+END_SRC
*** Stylus
#+BEGIN_SRC emacs-lisp
  (use-package stylus-mode
    :init
    (add-hook 'stylus-mode-hook 'rainbow-mode))
#+END_SRC
*** SCSS
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :init (setf scss-compile-at-save nil))
#+END_SRC
** Edición de texto y generalidades relacionadas
*** =auto-fill-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:56]
- Refiled on [2015-11-12 jue 16:50]
:END:
Rompe lineas de texto de manera automática en cierta columna
#+BEGIN_SRC emacs-lisp
  (use-package auto-fill
    :ensure nil
    :diminish auto-fill-function
    :preface (provide 'auto-fill))
#+END_SRC
*** =flyspell-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:56]
- Refiled on [2015-11-12 jue 16:51]
:END:
Revisión ortográfica al vuelo.
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish flyspell-mode
    :ensure nil
    :config
    (use-package flyspell-correct-ivy
      :bind (:map flyspell-mode-map ("C-." . flyspell-correct-previous-word-generic))
      :init
      (setf flyspell-correct-auto-delay 2.0)
      ;;(add-hook 'flyspell-mode-hook #'flyspell-correct-auto-mode)
      ))

  (use-package shackra/ispell-dict-switch
    :bind (("<f8>" . shackra/ispell-cycle-dict))
    :ensure nil
    :preface (provide 'shackra/ispell-dict-switch)
    :config
    (setf shackra/ispell-dict-list (list "es" "en"))
    :init
    (defvar shackra/ispell-dict-list (list) "Lista de diccionarios para cambiar")
    (defun shackra--ispell-current-dict ()
      "Obtiene el diccionario actual o retorna el establecido por defecto"
      (if ispell-current-dictionary
          (cl-position ispell-current-dictionary shackra/ispell-dict-list :test 'string=)
        (if (stringp (getenv "LANG"))
            (cl-position (nth 0 (split-string (getenv "LANG") "_")) shackra/ispell-dict-list :test 'string=)
          0))) ;; retorna español mientras tanto

    (defun shackra/ispell-cycle-dict ()
      "Cambia de un diccionario a otro"
      (interactive)
      (let ((dict-list-size (- (length shackra/ispell-dict-list) 1))
            (dict-current-index (shackra--ispell-current-dict)))
        (if (> (+ dict-current-index 1) dict-list-size)
            (setf dict-current-index 0)
          (setf dict-current-index (+ dict-current-index 1)))
        ;; luego de realizar la matemática, cambiamos el diccionario
        (ispell-change-dictionary (nth dict-current-index shackra/ispell-dict-list)))
      ;; Nuevo diccionario, nada de palabras subrayadas
      (flyspell-delete-all-overlays)
      ;; Mandamos a revisar la ortografía del párrafo en que estamos
      (flyspell-region (line-beginning-position) (line-end-position))))
#+END_SRC
*** =flycheck-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:56]
- Refiled on [2015-11-12 jue 16:51]
:END:
Revisión de errores en el código fuente, al vuelo.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :init
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)) ;; deshabilita el majadero revisor de documentación
    (setf flycheck-indication-mode 'left-fringe)
    (setf flycheck-display-errors-delay 5.0)
    :config
    (use-package flycheck-package)
    (add-hook 'prog-mode-hook #'flycheck-mode))
#+END_SRC
*** =multiple-cursors=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:56]
- Refiled on [2015-11-12 jue 16:51]
:END:
Multiples cursores en Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :defer 4
    :config
    ;; Si mi hydra esta en uso...
    (if (fboundp 'defhydra)
        ;; creamos hydras y les damos atajos de teclado
        (progn
          (defhydra hydra-mc-next (:columns 4 :color amaranth)
            "Multiple-cursors: Siguiente"
            ("n"    mc/mark-next-like-this "Como este")
            ("N"    mc/unmark-next-like-this "Desmarcar")
            ("M-n"  mc/skip-to-next-like-this "Saltar")
            ("C-n"  mc/mark-next-lines "Linea")
            ("SPC" nil "Salir" :color blue))
          (defhydra hydra-mc-previous (:columns 4 :color amaranth)
            "Multiple-cursors: Anterior"
            ("p"   mc/mark-previous-like-this "Como este")
            ("P"   mc/unmark-previous-like-this "Desmarcar")
            ("M-p" mc/skip-to-previous-like-this "Saltar")
            ("C-p" mc/mark-previous-lines "Linea")
            ("SPC" nil "Salir" :color blue))
          (defhydra hydra-mc-others (:columns 4 :color blue)
            "Multiple-cursors: Otros/varios"
            ("0"   mc/insert-numbers "Insertar números")
            ("h"   mc/mark-sgml-tag-pair "Etiquetas XML/HTML")
            ("s"   mc/sort-regions "Ordenar región")
            ("S"   mc/reverse-regions "Invertir región")
            ("m"   set-rectangular-region-anchor "Ancla rectangular")
            ("l"   mc/edit-beginnings-of-lines "Inicio de lineas (región)")
            ("M-l" mc/edit-lines "Todas las lineas (región)")
            ("C-l" mc/edit-ends-of-lines "Final de lineas (región)"))
          (defhydra hydra-mc-dwim (:columns 4 :color red)
            "Multiple-cursors: Haz lo que quiero decir"
            ("a" mc/mark-all-dwim "Marca todos - DWIM")
            ("A" mc/mark-all-like-this-dwim "Marca todos como este - DWIM"))
          (bind-keys :prefix-map shackra/mc-map
                     :prefix "C-c n"
                     ("n"   . hydra-mc-next/mc/mark-next-like-this)
                     ("N"   . hydra-mc-next/mc/unmark-next-like-this)
                     ("M-n" . hydra-mc-next/mc/skip-to-next-like-this)
                     ("C-n" . hydra-mc-next/mc/mark-next-lines)
                     ("p"   . hydra-mc-previous/mc/mark-previous-like-this)
                     ("P"   . hydra-mc-previous/mc/unmark-previous-like-this)
                     ("M-p" . hydra-mc-previous/mc/skip-to-previous-like-this)
                     ("C-p" . hydra-mc-previous/mc/mark-previous-lines)
                     ("o"   . hydra-mc-others/body)
                     ("a"   . hydra-mc-dwim/mc/mark-all-dwim)
                     ("A"   . hydra-mc-dwim/mc/mark-all-like-this-dwim)
                     ("M-a" . mc/mark-all-words-like-this)
                     ("M-A" . mc/mark-all-words-like-this-in-defun)
                     ("0"   . mc/insert-numbers)
                     ("h"   . mc/mark-sgml-tag-pair)
                     ("s"   . mc/sort-regions)
                     ("m"   . set-rectangular-region-anchor)
                     ("S"   . mc/reverse-regions)
                     ("M-l" . mc/edit-lines)
                     ("l"   . mc/edit-beginnings-of-lines)
                     ("C-l" . mc/edit-ends-of-lines)))
      ;; Si por alguna razón hydra no esta activado, usamos los comandos de
      ;; multiple-cursors.
      (bind-keys :prefix-map shackra/mc-map
                 :prefix "C-c n"
                 ("n"   . mc/mark-next-like-this)
                 ("N"   . mc/unmark-next-like-this)
                 ("M-n" . mc/skip-to-next-like-this)
                 ("C-n" . mc/mark-next-lines)
                 ("p"   . mc/mark-previous-like-this)
                 ("P"   . mc/unmark-previous-like-this)
                 ("M-p" . mc/skip-to-previous-like-this)
                 ("C-p" . mc/mark-previous-lines)
                 ("a"   . mc/mark-all-dwim)
                 ("A"   . mc/mark-all-like-this-dwim)
                 ("M-a" . mc/mark-all-like-this-in-defun)
                 ("M-A" . mc/mark-all-words-like-this-in-defun)
                 ("0"   . mc/insert-numbers)
                 ("h"   . mc/mark-sgml-tag-pair)
                 ("s"   . mc/sort-regions)
                 ("m"   . set-rectangular-region-anchor)
                 ("S"   . mc/reverse-regions)
                 ("M-l" . mc/edit-lines)
                 ("l"   . mc/edit-beginnings-of-lines)
                 ("C-l" . mc/edit-ends-of-lines))))
#+END_SRC
*** visual-regexp
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:57]
- Refiled on [2015-11-12 jue 16:49]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :config
    (use-package visual-regexp-steroids
      :init
      (require 'visual-regexp-steroids)
      :bind (("C-c r" . vr/replace)
             ("C-c q" . vr/query-replace))))

  (use-package re-builder
    :init
    (setq reb-re-syntax 'string))
#+END_SRC
*** =visual-fill-column=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:57]
- Refiled on [2015-11-12 jue 16:49]
:END:
/fill-column for visual-line-mode/
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :defer t)
#+END_SRC
*** =subword-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:57]
- Refiled on [2015-11-12 jue 16:50]
:END:
Navegación y edición de /SubPalabras/. Siendo "HolaMundoAdios" una nomenclatura, =subword-mode= permite mover el cursor entre cada subpalabra, deteniéndolo en "Adios", "Mundo" y "Hola" si se mueve el cursor de derecha a izquierda presionando la tecla CTRL. Este modo menor es muy útil, especialmente para aquellos desarrolladores en Java que usan variables con JorobasDeCamello.
#+BEGIN_SRC emacs-lisp
  (use-package subword
    :ensure nil
    :diminish subword-mode)
#+END_SRC
*** =hungry-delete=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:58]
- Refiled on [2015-11-12 jue 16:53]
:END:
Borra espacios en blanco consecutivos con sólo presionar =backspace= una vez :)
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :diminish hungry-delete-mode
    :config
    (global-hungry-delete-mode))
#+END_SRC
*** =aggressive-indent-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:58]
- Refiled on [2015-11-12 jue 16:53]
:END:
Porque =electric-indent-mode= no es lo suficientemente bueno.
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :diminish aggressive-indent-mode
    :config
    (add-to-list
     'aggressive-indent-dont-indent-if
     '(and (derived-mode-p 'c++-mode)
           (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                               (thing-at-point 'line)))))
    (global-aggressive-indent-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+END_SRC
*** =text-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 17:00]
:END:
Cualquier modo mayor que /herede/ de =text-mode= sera afectado por esta configuración.
#+BEGIN_SRC emacs-lisp
  (use-package text-mode
    :ensure nil
    :preface
    (provide 'text-mode)
    (defun shackra/text-mode ()
      (flyspell-mode)
      (set (make-local-variable 'fill-column) 100)
      (turn-on-visual-line-mode))
    :config
    (add-hook 'text-mode-hook #'shackra/text-mode))
#+END_SRC
**** Mover el cursos de manera inteligente al inicio de la linea
He tenido el problema, desde que no uso =auto-indent-mode=, que al presionar M-a el cursor va a la columna 0 en lugar de posicionarse en el primer carácter no-blanco de la linea, que es un comportamiento deseado cuando se esta programando. En [[http://stackoverflow.com/a/145359/2020214][Stackoverflow hay una respuesta]] para el problema :)
#+BEGIN_SRC emacs-lisp
  (use-package sbol
    :ensure nil
    :preface (provide 'sbol)
    :bind (([home] . smart-beginning-of-line)
           ("C-a" . smart-beginning-of-line))
    :init
    (defun smart-beginning-of-line ()
      "Move point to first non-whitespace character or beginning-of-line.

  Move point to the first non-whitespace character on this line.
  If point was already at that position, move point to beginning of line."
    (interactive)
    (let ((oldpos (point)))
      (back-to-indentation)
      (and (= oldpos (point))
           (beginning-of-line)))))
#+END_SRC
*** transcription-mode
Modo mayor para editar transcripciones
#+BEGIN_SRC emacs-lisp
  (use-package transcription-mode
    :ensure nil
    :load-path "site-packages/transcription-mode")
#+END_SRC
*** paredit
Un modo menor para la edición de paréntesis. Para aprender qué hace este modo menor y sus posibilidades, ver [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][The Animated Guide to Paredit]].
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :diminish paredit-mode
    :config
    (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode))
#+END_SRC
*** Move-text
Mover texto a voluntad
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :config (move-text-default-bindings))
#+END_SRC
** Otros
*** =htmlize=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:47]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
*** mustache
#+BEGIN_SRC emacs-lisp
  (use-package mustache-mode)
#+END_SRC
*** =fixmee=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:49]
:END:
Subraya cualquier termino "TODO" en cualquier modo mayor de programación.
#+BEGIN_SRC emacs-lisp
  (use-package fixmee
    :diminish fixmee-mode
    :defer 5
    :config
    (add-hook 'prog-mode #'fixmee-mode))
#+END_SRC
*** all-the-icons
Paquete de utilidades para formatear varios fuentes de iconos dentro de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
*** =telephone-line=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:50]
:END:
"/Soy como =powerline=, pero mejor/"
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :preface (defun shackra/vc-state ()
               (if vc-mode
                   (vc-state (buffer-file-name (current-buffer)))
                 nil))
    :init
    (setf telephone-line-height 30)
    (custom-set-faces
     '(mode-line ((t (:box nil))))
     '(mode-line-inactive ((t (:box nil))))
     '(mode-line-highlight ((t (:box nil)))))
    :config
    (telephone-line-defsegment* shackra-buffer-vc-modified-segment
      (list (cond ((eq (shackra/vc-state) 'edited)
                   (propertize (format " %s" (all-the-icons-faicon "pencil")) 'face `(:height 1.3 :family ,(all-the-icons-faicon-family))
                               'display '(raise -0.1) 'help-echo "Buffer modificado, cambios sin registrar."))
                  ((buffer-modified-p)
                   (propertize (format " %s" (all-the-icons-faicon "pencil")) 'face `(:foreground "tomato" :height 1.3 :family ,(all-the-icons-faicon-family))
                               'display '(raise -0.1) 'help-echo "Buffer modificado.")))
            (cond ((eq (shackra/vc-state) 'missing)
                   (propertize (format " %s " (all-the-icons-faicon "trash")) 'face `(:height 1.3 :family ,(all-the-icons-faicon-family))
                               'display '(raise -0.1) 'help-echo "Archivo sólo existe en VCS, no en el disco duro."))
                  ((eq (shackra/vc-state) 'ignored)
                   (propertize (format " %s " (all-the-icons-faicon "ban")) 'face `(:height 1.3 :family ,(all-the-icons-faicon-family))
                               'display '(raise -0.1) 'help-echo "Archivo ignorado"))
                  ((eq (shackra/vc-state) 'added)
                   (propertize (format " %s " (all-the-icons-faicon "plus")) 'face `(:height 1.3 :family ,(all-the-icons-faicon-family))
                               'display '(raise -0.1) 'help-echo "Archivo será registrado en VCS en el siguiente commit."))
                  ((eq (shackra/vc-state) 'unregistered)
                   (propertize (format " %s " (all-the-icons-faicon "question")) 'face `(:height 1.3 :family ,(all-the-icons-faicon-family))
                               'display '(raise -0.1) 'help-echo "Archivo sin registrar al VCS.")))))

    (telephone-line-defsegment shackra-line-buffer-segment
      (telephone-line-raw mode-line-buffer-identification t))

    (telephone-line-defsegment* shackra-vc-info
      (when vc-mode
        (cond ((string-match "Git[:-]" vc-mode)
               (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
                 (concat
                  (propertize (format " %s" (all-the-icons-alltheicon "git")) 'face `(:foreground "orange" :height 1.3) 'display '(raise -0.1))
                  " · "
                  (propertize (format "%s" (all-the-icons-octicon "git-branch"))
                              'face `(:foreground "yellow" :height 1.3 :family ,(all-the-icons-octicon-family))
                              'display '(raise -0.1))
                  (propertize (format " %s" branch) 'face `(:foreground "yellow" :height 0.9)))))
              ((string-match "SVN-" vc-mode)
               (let ((revision (cadr (split-string vc-mode "-"))))
                 (concat
                  (propertize (format " %s" (all-the-icons-faicon "cloud")) 'face `(:height 1.3) 'display '(raise -0.1))
                  (propertize (format " · %s" revision) 'face `(:height 0.9)))))
              (t (format "%s" vc-mode)))))
    (telephone-line-defsegment* shackra-flycheck-status
      (let* ((text (pcase flycheck-last-status-change
                     (`finished (if flycheck-current-errors
                                    (let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
                                                   (+ (or .warning 0) (or .error 0)))))
                                      (propertize (format " ✖ %s problema%s" count (if (> count 1) "s" "")) 'face `(:foreground "orange")))
                                  (propertize " ✔ Sin problemas" 'face `(:foreground "dark grey"))))
                     (`running     (propertize " ⟲ En ejecución" 'face `(:foreground "deep sky blue")))
                     (`no-checker  (propertize " ⚠ No existe revisor" 'face `(:foreground "dim grey")))
                     (`not-checked (propertize " ✖ Sin revisar" 'face `(:foreground "dim grey")))
                     (`errored     (propertize " ⚠ Error" 'face `(:foreground "tomato")))
                     (`interrupted (propertize " ⛔ Interrumpido" 'face `(:foreground "tomato")))
                     (`suspicious  ""))))
        (propertize text
                    'help-echo "Muestra errores detectados por Flycheck"
                    'local-map (make-mode-line-mouse-map
                                'mouse-1 (lambda () (interactive) (flycheck-list-errors))))))

    (setf telephone-line-lhs
          '((accent . (shackra-line-buffer-segment shackra-buffer-vc-modified-segment))
            (nil .  (shackra-vc-info shackra-flycheck-status))))

    (setf telephone-line-rhs '((nil . (telephone-line-misc-info-segment telephone-line-major-mode-segment))
                               (accent . (telephone-line-minor-mode-segment telephone-line-position-segment))))
    (telephone-line-mode 1))
#+END_SRC
*** =visual-line-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:50]
:END:
Envuelve las filas de texto si son muy anchas visualmente en nuevas filas.
#+BEGIN_SRC emacs-lisp
  (use-package visual-line
    :diminish visual-line-mode
    :preface (provide 'visual-line)
    :ensure nil
    :init
    (setf visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow)))
#+END_SRC
*** =notify=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:52]
:END:
Permite a emacs enviar notificaciones por DBus o diferentes medios. En este caso usare libnotify (el método definido no es multiplataforma).
#+BEGIN_SRC emacs-lisp
  (setf notify-method 'notify-via-libnotify)
#+END_SRC
*** =vimish-fold=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:53]
:END:
Pleguar o desplegar bloques de texto
#+BEGIN_SRC emacs-lisp
  (use-package vimish-fold
    :defer 10
    :config
    (bind-keys :prefix-map shackra/vimish-fold-map
               :prefix "C-c v"
               ("v" . vimish-fold-toggle)
               ("V" . vimish-fold-toggle-all)
               ("f" . vimish-fold)
               ("u" . vimish-fold-unfold)
               ("u" . vimish-fold-unfold-all)
               ("d" . vimish-fold-delete)
               ("D" . vimish-fold-delete-all)
               ("n" . vimish-fold-next-fold)
               ("p" . vimish-fold-previous-fold))
    (add-hook 'prog-mode #'vimish-fold-mode))
#+END_SRC
*** =appt=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:53]
:END:
Appointments me alerta de mis citas o pendientes que tengo por hacer.
#+BEGIN_SRC emacs-lisp
  ;; configuración adaptada de http://emacs.stackexchange.com/a/5821/690 Gracias
  ;; a http://redd.it/35kbf6
  (use-package appt
    :if (not (eq system-type 'darwin))
    :ensure nil
    :init
    (use-package alert
      :init
      (setf alert-default-style 'libnotify)
      :config
      (defun shackra/appt-muestra-notificacion (min-to-app new-time msg)
        "Envia notificaciones usando libnotify. Esto no funcionara si DBus no esta instalado y corriendo"
        ;; `min-to-app' puede ser una lista, o no.
        (if (atom min-to-app)
            (alert
             (if (<= (string-to-number min-to-app) 1)
                 (format "<b>Cita en %s minuto</b>" min-to-app)
               (format "<b>Cita en %s minutos</b>" min-to-app))
             :title msg
             :mode 'Emacs-Org
             :severity 'high
             :persistent t)
          ;; no entiendo este trozo de código, pero asumo que itera una lista de
          ;; cosas por hacer.
          (dolist (i (number-sequence 0 (1- (length min-to-app))))
            (alert
             (if (<= (string-to-number (nth i min-to-app)) 1)
                 (format "<b>Cita en %s minuto</b>" (nth i min-to-app))
               (format "<b>Cita en %s minutos</b>" (nth i min-to-app)))
             :title (nth i msg)
             :mode 'Emacs-Org
             :severity 'high
             :persistent t)))))
    (setf appt-message-warning-time 10
          appt-display-interval (1+ appt-message-warning-time)
          appt-display-mode-line nil)
    ;; Muestra las citas como notificaciones en el manejador de ventanas
    (setf appt-disp-window-function 'shackra/appt-muestra-notificacion)
    ;;(setf appt-delete-window-function nil)
    :config
    (defun shackra/appt-update-when-file-updated ()
      "Actualiza appt cuando ciertos archivos son actualizados"
      ;; si `org-directory' es prefijo en el nombre del archivo del buffer
      ;; actual, ejecuta la funcion `shackra/org-agenda-to-appt'
      (if (string-prefix-p org-directory (buffer-file-name))
          (shackra/org-agenda-to-appt)))

    (defun shackra/org-agenda-to-appt ()
      (interactive)
      (setf appt-time-msg-list nil)
      (org-agenda-to-appt))

    (shackra/org-agenda-to-appt)
    (run-at-time "12:05am" (* 24 3600) 'shackra/org-agenda-to-appt)
    (appt-activate t)
    ;; automáticamente actualiza las citas cuando el archivo cosasporhacer.org es
    ;; salvado (ahí es donde yo guardo mi lista de cosas por hacer, y mi agenda)
    (add-hook 'after-save-hook #'shackra/appt-update-when-file-updated))
#+END_SRC
*** =uniquify=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:54]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :ensure nil
    :init
    (setf uniquify-buffer-name-style 'forward))
#+END_SRC
*** =systemd=
Modo mayor para editar archivos de servicio systemd.
#+BEGIN_SRC emacs-lisp
  (use-package systemd)
#+END_SRC
*** =pretty-mode=
#+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :config
    (add-hook 'prog-mode-hook 'turn-on-pretty-mode))
#+END_SRC
*** interfaz para AUR
#+BEGIN_SRC emacs-lisp
  (use-package aurel
    :init
    (setf aurel-download-directory "~/proyectos/aur/aurel")
    (setf aurel-aur-user-package-info-check t))
#+END_SRC
*** =golden-ratio=
Redimensiona las ventanas para hacer más cómoda la edición en cualquiera de ellas
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :diminish golden-ratio-mode
    :init
    (setf golden-ratio-auto-scale nil)
    :config
    (golden-ratio-mode 1))
#+END_SRC
*** RSS feed
Lector de RSS feed dentro de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :init
    (setf url-queue-timeout 30)
    (defun elfeed-search-format-date (date)
      (format-time-string "%d-%m-%Y %H:%M" (seconds-to-time date)))
    ;; fuentes RSS feed
    (setf elfeed-feeds '("http://stackoverflow.com/jobs/feed?allowsremote=True&type=Contract"
                         "https://weworkremotely.com/categories/2-programming/jobs.rss"
                         ("https://www.aciprensa.com/rss/noticias.xml" Iglesia noticias)
                         ("http://feeds.feedburner.com/santodeldia" Iglesia santoral)
                         ("http://www.ivoox.com/podcast-podcast-charlas-padre-fortea_fg_f167459_filtro_1.xml" Iglesia sermones Fortea)
                         ("http://localhost:9077/feed/diarioextra-nacionales/atom" noticias nacionales)
                         ("http://localhost:9077/feed/diarioextra-sucesos/atom" noticias nacionales sucesos)
                         ("http://localhost:9077/feed/rt-espanol/atom" noticias internacionales)
                         ("https://www.reddit.com/r/forhire/.rss" reddit)
                         ("https://costarica.craigslist.org/search/sof?employment_type=3&format=rss&is_telecommuting=1&nearbyArea=298&nearbyArea=586&searchNearby=2" craigslist)
                         ("https://toronto.craigslist.ca/search/web?employment_type=3&format=rss&is_telecommuting=1&nearbyArea=126&nearbyArea=130&nearbyArea=201&nearbyArea=213&nearbyArea=214&nearbyArea=234&nearbyArea=235&nearbyArea=252&nearbyArea=27&nearbyArea=275&nearbyArea=337&nearbyArea=385&nearbyArea=386&nearbyArea=388&nearbyArea=389&nearbyArea=40&nearbyArea=452&nearbyArea=453&nearbyArea=482&nearbyArea=483&nearbyArea=484&nearbyArea=486&nearbyArea=487&nearbyArea=555&nearbyArea=626&nearbyArea=627&nearbyArea=685&nearbyArea=700&nearbyArea=704&nearbyArea=706&searchNearby=2" craigslist Canada)
                         ("https://toronto.craigslist.ca/search/sof?employment_type=3&format=rss&is_telecommuting=1&nearbyArea=126&nearbyArea=130&nearbyArea=201&nearbyArea=213&nearbyArea=214&nearbyArea=234&nearbyArea=235&nearbyArea=252&nearbyArea=27&nearbyArea=275&nearbyArea=337&nearbyArea=385&nearbyArea=386&nearbyArea=388&nearbyArea=389&nearbyArea=40&nearbyArea=452&nearbyArea=453&nearbyArea=482&nearbyArea=483&nearbyArea=484&nearbyArea=486&nearbyArea=487&nearbyArea=555&nearbyArea=626&nearbyArea=627&nearbyArea=685&nearbyArea=700&nearbyArea=704&nearbyArea=706&searchNearby=2" craigslist Canada)
                         ("https://buffalo.craigslist.org/search/web?lang=es&cc=mx&employment_type=3&format=rss&is_telecommuting=1&nearbyArea=126&nearbyArea=130&nearbyArea=201&nearbyArea=213&nearbyArea=214&nearbyArea=234&nearbyArea=248&nearbyArea=25&nearbyArea=252&nearbyArea=275&nearbyArea=277&nearbyArea=337&nearbyArea=355&nearbyArea=385&nearbyArea=386&nearbyArea=388&nearbyArea=389&nearbyArea=452&nearbyArea=453&nearbyArea=463&nearbyArea=482&nearbyArea=483&nearbyArea=484&nearbyArea=487&nearbyArea=626&nearbyArea=685&nearbyArea=700&nearbyArea=704&nearbyArea=706&searchNearby=2" craigslist USA)
                         ("https://buffalo.craigslist.org/search/sof?lang=es&cc=mx&employment_type=3&format=rss&is_telecommuting=1&nearbyArea=126&nearbyArea=130&nearbyArea=201&nearbyArea=213&nearbyArea=214&nearbyArea=234&nearbyArea=248&nearbyArea=25&nearbyArea=252&nearbyArea=275&nearbyArea=277&nearbyArea=337&nearbyArea=355&nearbyArea=385&nearbyArea=386&nearbyArea=388&nearbyArea=389&nearbyArea=452&nearbyArea=453&nearbyArea=463&nearbyArea=482&nearbyArea=483&nearbyArea=484&nearbyArea=487&nearbyArea=626&nearbyArea=685&nearbyArea=700&nearbyArea=704&nearbyArea=706&searchNearby=2" craigslist USA)))
    :config
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "www\\.reddit\\.com/r/forhire/\\.rss"
                                  :entry-title '(not "Hiring")
                                  :add 'nointeres
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "2 weeks ago"
                                  :remove 'unread)))
#+END_SRC
*** =ws-butler=
Eliminación de espacios de manera no obstrusiva
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :diminish ws-butler-mode
    :config
    (add-hook 'prog-mode-hook 'ws-butler-mode)
    (add-hook 'text-mode-hook 'ws-butler-mode))
#+END_SRC
*** Mingus
Cliente para MPD
#+BEGIN_SRC emacs-lisp
  (use-package mingus
    :if (executable-find "mpd")
    :preface (require 'mingus-stays-home))
#+END_SRC
*** CANCELADO tareas de org a Google Calendar               :deshabilitado:
- State "CANCELADO"  from              [2016-09-28 mié 19:06] \\
  el paquete borra todos el contenido de todos mis archivos org-mode!
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-gcal
    :disabled t
    :init
    (setf org-gcal-client-id "719739047198-857v4t8pb09ptb76f20ag6brvmlnpk3n.apps.googleusercontent.com")
    (setf org-gcal-file-alist '(("shackrasislock0@gmail.com" . "~/org/cosas por hacer.org")
                                ("es.cr#holiday@group.v.calendar.google.com" . "~/org/festivos.org")
                                ("fmuk685cem8pufc6v996omoo6o@group.calendar.google.com" . "~/org/fechas.org")
                                ("#contacts@group.v.calendar.google.com" . "~/org/cumpleaños.org")))
    :config
    (add-hook 'after-init-hook (lambda () (org-gcal-fetch) (org-gcal-sync))))
#+END_SRC
*** camcorder
Permite hacer screen-casts de pequeños frames de Emacs y convertir eso a un GIF
#+BEGIN_SRC emacs-lisp
  (use-package camcorder)
#+END_SRC
*** Shackle
Como =display-buffer-alist= pero más sencillo
#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :init
    (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.3)
                          ((circe-server-mode circe-channel-mode circe-query-mode) :ignore t)
                          (compilation-mode :select t :align 'right :size 0.3)))
    :config
    (add-hook 'after-init-hook 'shackle-mode))
#+END_SRC
*** pdf-tools
Mejor visor de PDFs para Emacs
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode))
#+END_SRC
*** Emojify
Muestra imágenes de emojis en lugar de los caracteres utf-8
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :if (and (>= emacs-major-version 24) (>= emacs-minor-version 3))
    :config
    (use-package company-emoji
      :config (add-hook 'text-mode-hook
                        (lambda ()
                          (add-to-list
                           (make-local-variable 'company-backends) '(company-emoji :with company-yasnippet)))))
    (add-hook 'after-init-hook #'global-emojify-mode))
#+END_SRC
*** free-keys
Muestra cuales combinaciones de teclas están libres para asignar
#+BEGIN_SRC emacs-lisp
  (use-package free-keys
    :bind (:map help-map
                ("C-k" . free-keys)))
#+END_SRC
*** Pocket
#+BEGIN_SRC emacs-lisp
  (use-package el-pocket
    :preface (require 'thingatpt) (require 'el-pocket)
    :bind (:map mu4e-view-mode-map ("l" . el-pocket-add-url-at-point))
    :init (defun el-pocket-add-url-at-point ()
            "Add URL at point to Pocket"
            (interactive)
            (let* ((url-shr (get-text-property (point) 'shr-url))
                   (url-at-point (thing-at-point 'url))
                   (url (or url-shr url-at-point)))
              (el-pocket-add-url url)))
    :config (el-pocket-load-auth))
#+END_SRC
*** package-safe-delete
Borrado seguro de paquetes
#+BEGIN_SRC emacs-lisp
  (use-package package-safe-delete)
#+END_SRC
*** highlight-indent-guides
Modo menor que subraya los niveles de identación en el buffer usando font-lock. Los anchos de identación son descubiertos de manera dinámica.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :init
    (setf highlight-indent-guides-method 'character)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC
**** Limitaciones
Este modo menor no funciona bien con otros modos menores que hacen uso de la propiedad =display= de los textos en el buffer o que modifican como se muestran los espacios en blanco como hace whitespace-mode. Más info: [[https://github.com/DarthFennec/highlight-indent-guides#limitations][Limitations]].
*** Manejador de procesos para el sistema
#+BEGIN_SRC emacs-lisp
  (use-package proced
    :ensure nil
    :if (or (string-equal system-type "gnu/linux") (string-equal system-type "gnu/kfreebsd")))
#+END_SRC
** Yasnippet en todos los backends de Company                     :especial:
Company-mode siempre escogerá *un* backend a la vez, la única forma de hacer que muestre candidatos de auto-completado y candidatos yasnippet es agrupando los backends
#+BEGIN_SRC emacs-lisp
  ;; http://emacs.stackexchange.com/questions/10431/get-company-to-show-suggestions-for-yasnippet-names
  ;; Add yasnippet support for all company backends
  ;; https://github.com/syl20bnr/spacemacs/pull/179

  (defun company-mode/backend-with-yas (backend)
    (if (or (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setf company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+END_SRC
