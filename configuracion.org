#+TITLE: Mi configuración de GNU Emacs
#+AUTHOR: Jorge Javier Araya Navarro (Shackra Sislock)
#+EMAIL: elcorreo@deshackra.com
#+OPTIONS: toc:3 num:nil ^:nil
#+STARTUP: content

#+begin_quote
Latin: Actiones nostras tibi comítimus, Dómine, ut ad maiorem gloriam tuam
repleamur.

Español: Te encomendamos, Señor, nuestras actividades para que las
realicemos a mayor gloria tuya.
#+end_quote

* Configuración de GNU Emacs en un archivo de org-mode
He decidido mover mi configuración a un sólo archivo. Anteriormente mi configuración estaba dividida en varios archivos =.el=, esto no era malo, sin embargo debo estar visitando diferentes archivos si deseo realizar varios cambios en mi configuración creándome una plétora de buffers en Emacs. Además, con =org-mode= me es posible documentar varios aspectos de mi configuración, sí, sí... ya sé que esto se puede hacer con comentarios en el código. Otro beneficio de usar =org-mode= y =babel= es la capacidad de contraer o expandir varias secciones de la configuración, o navegar rápidamente entre secciones (cosa que aun no sé hacer), además, con Babel no me veo restringido a ejecutar solamente código elisp ¡también puedo correr código Python!.

* Cómo hacer que todo esto funcione: =init.el=
Pasemos a la materia. Esta configuración se carga de la siguiente manera desde el archivo
=~/.emacs.d/init.el=:

#+BEGIN_SRC emacs-lisp :tangle no
;; init.el para esta configuración. Tu Emacs debe ser versión 24.
(package-initialize)
(require 'ob-tangle)
;; cuando el archivo org es más reciente que el archivo elisp, el archivo elisp
;; se recrea a partir de los bloques de código en el archivo org. Esto deberia
;; ahorrarme unos segundos cuando Emacs se carga.
(if (file-newer-than-file-p
     (expand-file-name "configuracion.org" user-emacs-directory)
     (expand-file-name "configuracion.el" user-emacs-directory))
    ;; enreda los bloques de código en un archivo elisp
    (org-babel-load-file (expand-file-name "configuracion.org" user-emacs-directory))
  ;; en caso contrario, carga el archivo ya existente :)
  (load-file (expand-file-name "configuracion.el" user-emacs-directory)))
(put 'downcase-region 'disabled nil)
#+END_SRC

activamos algunas opciones para depuración en caso de que Emacs falle en cargar la configuración.

#+BEGIN_SRC emacs-lisp :tangle no
  (toggle-debug-on-error)
  (toggle-debug-on-quit) ;; Se activa cuando el usuario presiona C-g
#+END_SRC

* Información personal
#+BEGIN_SRC emacs-lisp
  (setf user-full-name "Jorge Araya Navarro"
        user-mail-address "elcorreo@deshackra.com"
        calendar-location-name "Siquirres, CR"
        calendar-latitude 10.083333
        calendar-longitude -83.5)
#+END_SRC
* Repositorio de paquetes
Desde la versión 24 Emacs permite la instalación de paquetes de la misma manera como se realiza en
distribuciones de GNU/Linux.

El sistema de paquetes de Emacs no es perfecto, para que algunos paquetes funcionen como deben, aun debes poner algunas cosas en tu configuración de Emacs y tal. Revisa la descripción de cualquier paquetes que vayas a instalar para tener más información.

#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (when (< emacs-major-version 24)
    ;; Para importes librerias que requieren compatibilidad como cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

Para ver que paquetes hay disponibles, y cuales desea instalar, puede hacer uso del comando =M-x package-list-pactares=
* Códigos elisp
funciones de Emacs lisp escritas por mi u otras personas (y que yo he recolectado para mi uso personal)
** función para insertar etiquetas <kbd>
Gracias a Malabarba en su [[http://emacs.stackexchange.com/a/2208/690][respuesta desde Emacs.stackexchange]].
#+BEGIN_SRC emacs-lisp
  (defun endless/insert-key (key)
    "Ask for a key then insert its description.
  Will work on both org-mode and any mode that accepts plain html."
    (interactive "kType key sequence: ")
    (let* ((is-org-mode (derived-mode-p 'org-mode))
           (tag (if is-org-mode
                    "@@html:<kbd>%s</kbd>@@"
                  "<kbd>%s</kbd>")))
      (if (null (equal key "\r"))
          (insert
           (format tag (help-key-description key nil)))
        (insert (format tag ""))
        (forward-char (if is-org-mode -8 -6)))))
#+END_SRC
** funciones con expresiones regulares que uso a menudo en edición de texto
estas son funciones que uso muy a menudo durante la edición de texto, tenerlos como comandos interactivos me ahorra tiempo escribiendo las expresiones regulares una y otra vez.

#+BEGIN_SRC emacs-lisp
  (defun shackra/no-saltos-linea (start end)
    "Elimina todos los saltos de linea en la selección"
    (interactive "r")
    (vr/replace "\n+" " " start end))

  (defun shackra/no-multiple-espacios (start end)
    "Elimina todos los espacios en blanco seguidos en la selección"
    (interactive "r")
    (vr/replace " +" " " start end))
#+END_SRC
** reemplazo para comment-dwim
Idea original de [[http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html][Re: comment-dwim has no behavior to comment out the current line without a region]]
#+BEGIN_SRC emacs-lisp
  (defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
          If no region is selected and current line is not blank
          and we are not at the end of the line, then comment
          current line.  Replaces default behaviour of
          comment-dwim, when it inserts comment at the end of the
          line."
    (interactive "*P")
    (comment-normalize-vars)
    (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position))
      (comment-dwim arg)))
#+END_SRC
** =find-file= y =switch-buffer= personalizados
Problema: Cuando estoy dentro de un proyecto con Projectile-mode, me gusta visitar archivos y buffers relacionados con el proyecto en el cual estoy trabajando. Projectile-helm es de mucha ayuda, sin embargo la combinación de teclas es muy extensa y la mayoría de veces no las uso.

Solución: Crear mis funciones personalizadas para =find-file= y =switch-buffer=.
*** =find-file= personalizado
#+BEGIN_SRC emacs-lisp
  (defun shackra/find-file ()
    (interactive)
    (call-interactively (if (equal current-prefix-arg '(4))
                            'find-file
                          ;; si no se llamo a la función con el argumento
                          ;; universal C-u. El comando se comporta normalmente
                          (if (projectile-project-p)
                              'helm-projectile-find-file
                            'find-file))))
#+END_SRC
*** =switch-buffer= personalizado
#+BEGIN_SRC emacs-lisp
  (defun shackra/switch-buffer ()
    (interactive)
    (call-interactively (if (equal current-prefix-arg '(4))
                            'helm-mini
                          ;; si no se llamo a la función con el argumento
                          ;; universal C-u. El comando se comporta normalmente
                          (if (projectile-project-p)
                              'helm-projectile-switch-to-buffer
                            'helm-mini))))
#+END_SRC
** abrir archivos que estén en modo de solo lectura como root
Código sacado de [[https://gist.github.com/robru/8c62d4891eb889107e9f][aquí]], según éste [[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][post en Emacs Redux]].

#+BEGIN_SRC emacs-lisp
  (defun find-file-sudo ()
    "reabre el archivo actual, si existe, usando sudo"
    (when (and buffer-file-name
             (not (file-writable-p buffer-file-name))
             (file-exists-p buffer-file-name))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC
** Encierra los bloques =_SRC= de org en etiquetas =<pre><code>=
Le pedimos a org-mode que no meta las patas cuando exporta archivos a HTML. Nosotros manejaremos el marcado de sintaxis de código fuente.

Muchas gracias a [[http://emacs.stackexchange.com/users/202/chen-bin][chen bin]] por los [[http://emacs.stackexchange.com/a/9839/690][trozos de código]] sacados de su [[https://github.com/redguardtoo/org2nikola/blob/master/org2nikola.el][propio proyecto]] :)

#+BEGIN_SRC emacs-lisp
  (defun org2html-trim-string (string)
    (replace-regexp-in-string "\\`[ \t\n]*" "" (replace-regexp-in-string "[ \t\n]*\\'" "" string)))

  (defun org2html--char-to-string (ch)
    (let ((chspc 32)
          (chsq 39)
          (ch0 48)
          (ch9 57)
          (cha 97)
          (chz 122)
          (chA 65)
          (chZ 90)
          (chdot 46)
          (chminus 45)
          (chunderscore 95)
          rlt)
      (cond
       ((or (and (<= ch0 ch) (<= ch ch9))
            (and (<= cha ch) (<= ch chz))
            (and (<= chA ch) (<= ch chZ))
            (= chunderscore ch)
            (= chminus ch)
            )
        (setq rlt (char-to-string ch)))
       ((or (= chspc ch) (= chsq ch) (= chdot ch))
        (setq rlt "-")))
      rlt
      ))

  (defun org2html-get-slug (str)
    (let (slug )
      (setq slug (mapconcat 'org2html--char-to-string str ""))
      ;; clean slug a little bit
      (setq slug (replace-regexp-in-string "\-\-+" "-" slug))
      (setq slug (replace-regexp-in-string "^\-+" "" slug))
      (setq slug (replace-regexp-in-string "\-+$" "" slug))
      (setq slug (org2html-trim-string slug))
      (setq slug (downcase slug))
      slug))

  (defun org2html-replace-pre (html)
    "Replace pre blocks with sourcecode shortcode blocks.
  shamelessly copied from org2blog/wp-replace-pre()"
    (save-excursion
      (let (pos code lang info params header code-start code-end html-attrs pre-class)
        (with-temp-buffer
          (insert html)
          (goto-char (point-min))
          (save-match-data
            (while (re-search-forward "<pre\\(.*?\\)>" nil t 1)

              ;; When the codeblock is a src_block
              (unless
                  (save-match-data
                    (setq pre-class (match-string-no-properties 1))
                    (string-match "example" pre-class))
                ;; Replace the <pre...> text
                (setq lang (replace-regexp-in-string ".*src-\\([a-zA-Z0-9]+\\).*" "\\1" pre-class)  )

                (replace-match "")
                (setq code-start (point))

                ;; Go to end of code and remove </pre>
                (re-search-forward "</pre.*?>" nil t 1)
                (replace-match "")
                (setq code-end (point))
                (setq code (buffer-substring-no-properties code-start code-end))

                ;; Delete the code
                (delete-region code-start code-end)
                ;; Stripping out all the code highlighting done by htmlize
                (setq code (replace-regexp-in-string "<.*?>" "" code))

                ;; default is highlight.js, it's the best!
                (insert (concat "\n<pre><code class=\"lang-"
                                lang
                                "\">\n"
                                code
                                "</code></pre>\n"))

                )))

          ;; Get the new html!
          (setq html (buffer-substring-no-properties (point-min) (point-max))))
        ))
    html)

  (defun org2html--render-subtree ()
    "Render current subtree"
    (let ((org-directory default-directory)
           html-file
           tags
           title
           post-slug
           html-text)

      ;; set title
      (setq title (nth 4 (org-heading-components)))

      ;; set POST_SLUG if its does not exist
      (setq post-slug (org2html-get-slug title))
      ;; html file
      (setq html-file (concat (file-name-as-directory default-directory) post-slug ".html"))
      (setq html-text (org2html-export-into-html-text))

      (save-excursion
        (setq html-text (org2html-replace-pre html-text)))

      (with-temp-file html-file
        (insert html-text))
      (message "%s created" html-file)
      ))

  (defun org2html-export-into-html-text ()
    (let (html-text b e)

      (save-excursion
        (org-mark-element)
        (forward-line) ;; donot export title
        (setq b (region-beginning))
        (setq e (region-end))
        )

      ;; org-export-as will detect active region and narrow to the region
      (save-excursion
        (setq html-text
              (cond
               ((version-list-< (version-to-list (org-version)) '(8 0 0))
                (if (fboundp 'org-export-region-as-html)
                    (org-export-region-as-html b e t 'string)))
               (t
                (if (fboundp 'org-export-as)
                    (org-export-as 'html t nil t)))
               )))
      html-text))

  (defun org2html-export-subtree ()
    "Export current first level subtree into HTML"
    (interactive)
    (let ((org-directory default-directory)
          html-file
          tags
          title
          post-slug
          html-text)

      ;; just goto the root element
      (condition-case nil
          (outline-up-heading 8)
        (error
         (message "at the beginning ...")))

      ;; should be nil
      (org2html--render-subtree)
      ))


  (defun org2html-wrap-blocks-in-code (src backend info)
    (if (org-export-derived-backend-p backend 'html)
        (org2html-replace-pre src)))
#+END_SRC
** Recrea el blog para probar el diseño
Llamamos al comando =op/do-publication= con algunos parámetros para ahorrarnos el procedimiento manual de publicar el blog a una carpeta

#+BEGIN_SRC emacs-lisp
  (defun shackra/ppp ()
    "Llama op/do-publication con una serie de parámetros predeterminados. Útil cuando se esta diseñando un tema"
    (interactive)
    (op/do-publication t t "/tmp/blog" nil))
#+END_SRC
** Generación del blog y sincronización con RacketSpace
#+BEGIN_SRC emacs-lisp
  (defun shackra/syncblog ()
    "Sincroniza el blog generado con el contenedor en Racketspace"
    (interactive)
    ;; usa rclone para hacer la re-sincronización
    (start-process "sync rclone" (get-buffer-create "*rclone*") "rclone"
                   "sync"
                   (expand-file-name "~/Documentos/deshackra.com/elblog.deshackra.com")
                   "rscf:elblog.deshackra.com"))

  (defun shackra/genblog ()
    "Genera y sincroniza el blog"
    (interactive)
    ;; borra el directorio con los datos antiguos y vuelve a generar el blog
    ;;(delete-directory (expand-file-name "~/Documentos/deshackra.com/elblog.deshackra.com") t nil)
    (op/do-publication nil "HEAD^1" "~/Documentos/deshackra.com/elblog.deshackra.com/" nil)
    ;; sincroniza
    (shackra/syncblog))
#+END_SRC
** función para =delete-frame-functions=
#+BEGIN_SRC emacs-lisp
  (defun shackra/run-delete-frame-hooks (frame)
    "Esta función corre algunas funciones que no son llamadas cuando Emacs
  corre como proceso de segundo plano"
    (when (server-running-p)
      (savehist-save)
      (recentf-save-list)))

  (add-hook 'delete-frame-functions 'shackra/run-delete-frame-hooks)
#+END_SRC
** salva algunos buffers al perder Emacs el foco
Sacado de [[http://timothypratley.blogspot.nl/2015/07/seven-specialty-emacs-settings-with-big.html][Programming: Seven specialty Emacs settings with big payoffs]]

#+BEGIN_SRC emacs-lisp
  (defun guardar-todo ()
    (interactive)
    (save-some-buffers t))
#+END_SRC
** No molestes, Shia LaBeouf!
#+BEGIN_SRC emacs-lisp
  (defun shackra/org-reschedule-tomorrow ()
    "Re-Programa para mañana una tarea que pude hacer hoy"
    (interactive)
    (org-schedule :time (format-time-string "%Y-%m-%d" (time-add (current-time) (seconds-to-time 86400)))))
#+END_SRC
** Modificación de los caracteres en el mode-line
Los caracteres en el mode-line de Emacs pueden ser modificados ¿No es genial? (según [[http://tromey.com/blog/?p%3D831][The Cliffs of Inanity]], también [[http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html][lunarsite]]. referencias sobre =mode-line-format= en la [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Format.html][referencia de Elisp]])

#+BEGIN_SRC emacs-lisp
  (defvar shackra/vc-mode nil)
  (make-variable-buffer-local 'shackra/vc-mode)

  (require 'vc)
  (defun shackra/vc-command-hook (&rest args)
    (let ((file-name (buffer-file-name)))
      (setq shackra/vc-mode (and file-name
                                 (not (vc-registered file-name))
                                 (ignore-errors
                                   (vc-responsible-backend file-name))))))

  (add-hook 'vc-post-command-functions #'shackra/vc-command-hook)
  (add-hook 'find-file-hook #'shackra/vc-command-hook)

  (defun shackra/vc-info ()
    (if shackra/vc-mode
        (propertize "🗶" 'face 'error)
      " "))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Si usas `powerline', editar la variable mode-line-format es algo complicado,
  ;; pero no imposible
  (setq-default mode-line-format
                '("%e"
                  (:eval (if (buffer-modified-p)
                             (propertize "  ❗" 'face 'error)
                           "  "))
                  (:eval (shackra/vc-info))
                  " " mode-line-buffer-identification
                  " " mode-line-position
                  " " mode-line-modes
                  mode-line-misc-info))
#+END_SRC
** =split-window-right= y =split-window-horizontally=
#+BEGIN_SRC emacs-lisp
  (defun shackra/split-window-vertically ()
    "Divide la ventana por la mitad verticalmente y mueve el cursor a la ventana nueva"
    (interactive)
    (split-window-vertically)
    (other-window 1))

  (defun shackra/split-window-horizontally ()
    "Divide la ventana por la mitad horizontalmente y mueve el cursor a la ventana nueva"
    (interactive)
    (split-window-horizontally)
    (other-window 1))
#+END_SRC
** funciones para usar con [[*=appt=][=appt=]]
#+BEGIN_SRC emacs-lisp
  (defun shackra/appt-muestra-notificacion (min-to-app new-time msg)
    (if (atom min-to-app)
        ;; envía la notificación usando libnotify. Esto no funcionara si DBus no
        ;; se esta usando
        (notifications-notify
         :title "Agenda Org"
         :body (format "<b>Cita en %s minuto(s):</b><br>%s<br>" min-to-app msg)
         :app-name "Emacs: Org"
         :app-icon "/usr/share/icons/Adwaita/32x32/status/appointment-soon.png"
         :urgency 'critical
         :sound-file "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga"
         :timeout 0)
      ;; no entiendo este trozo de código, pero asumo que itera una lista de
      ;; cosas por hacer.
      (dolist (i (number-sequence 0 (1- (length min-to-app))))
        (notifications-notify
         :title "Agenda Org"
         :body (format "<b>Cita en %s minuto(s):</b> %s" (nth i min-to-app) (nth i msg))
         :app-name "Emacs: Org"
         :app-icon "/usr/share/icons/Adwaita/32x32/status/appointment-soon.png"
         :urgency 'critical
         :sound-file "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga"
         :timeout 0))))
#+END_SRC
* Custom.el
 El archivo customize sera éste. Cualquier modificación de Emacs que
 se haga a través de =customize= ira al archivo especificado.

#+BEGIN_SRC emacs-lisp
  (setf custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
* Sane defaults
configuración sana de ciertas opciones en Emacs
#+BEGIN_SRC emacs-lisp
  (load-file (expand-file-name "sane.el" user-emacs-directory))
#+END_SRC
** Tipografía
Establecemos la tipografía a usar, mi preferida es [[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]]
#+BEGIN_SRC emacs-lisp
  (use-package misfuentes
    :ensure nil
    :preface (provide 'misfuentes)
    :config
    (ignore-errors
      (set-frame-font "SourceCodePro 12")
      (add-to-list (quote default-frame-alist) (quote (font . "SourceCodePro-12"))))

    (defun shackra/arregla-emojis (&optional frame)
      (ignore-errors
        (set-fontset-font "fontset-default" nil (font-spec :size 20 :name "Symbola") frame 'append)))

    (add-hook 'after-make-frame-functions 'shackra/arregla-emojis)
    (shackra/arregla-emojis))
#+END_SRC
* mapeo de combinaciones de teclas
Combinaciones de teclas que no pertenecen a ningún paquete en particular.
#+BEGIN_SRC emacs-lisp
  (use-package mdct ;; siglas para Mapeo de Combinaciones de Teclas
   :ensure nil
   :preface (provide 'mdct)
   :bind ("M-o" . other-window)
   :config
   (bind-keys :map ctl-x-map
              ("2" . shackra/split-window-vertically)
              ("3" . shackra/split-window-horizontally)))
#+END_SRC
* Aliases
Nombres más cortos para comandos usados frecuentemente
#+BEGIN_SRC emacs-lisp
  (defalias 'eb 'eval-buffer)
  (defalias 'er 'eval-region)
  (defalias 'ed 'eval-defun)
#+END_SRC
* Modos
** =helm=
Completado incremental y estrechamiento de selección de candidatos :)
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :demand t
    :diminish helm-mode
    :bind ("C-x f" .  helm-recentf)
    :config
    (require 'helm-config)
    (use-package helm-grep
      :ensure nil
      :config
      ;; Instalar ack o ack-grep
      (when (executable-find "ack")
        (setf helm-grep-default-command "ack -Hn --no-group --no-color %e %p %f"
              helm-grep-default-recurse-command "ack -H --no-group --no-color %e %p %f"))
      ;; en caso de que ack-grep sea el programa disponible
      (when (executable-find "ack-grep")
        (setf helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
              helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f")))
    (use-package helm-files
      :ensure nil
      :config
      (setf helm-boring-file-regexp-list '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$"
                                           "\\._darcs$" "\\.la$" "\\.o$" "~$"
                                           "\\.pyc$" "\\.elc$" "TAGS" "\#*\#"
                                           "\\.exe$" "\\.jar$" "\\.img$" "\\.iso$"
                                           "\\.xlsx$" "\\.epub$" "\\.docx$")))
    (use-package helm-buffers
      :ensure nil
      :bind ("C-x b" . helm-mini)
      :config
      (setf helm-buffers-fuzzy-matching t
          helm-truncate-lines t
          helm-ff-skip-boring-buffers t
          helm-boring-buffer-regexp-list '("\\` " "\\*helm" "\\*helm-mode"
                                           "\\*Echo Area" "\\*Minibuf" "\\*monky-cmd-process\\*"
                                           "\\*epc con" "\\*Compile-Log\\*" "\\*monky-process\\*"
                                           "\\*CEDET CScope\\*" "\\*Messages\\*" "\\*Flycheck error"
                                           "\\*.+(.+)" "elpa/.+" "tramp/.+"
                                           "\\*Gofmt Errors\\*" "\\*autopep8" "\\*Pymacs\\*")))
    (setf helm-autoresize-max-height 40
          helm-autoresize-min-height 20
          helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8
          helm-ff-file-name-history-use-recentf t
          helm-locate-command "locate %s -e -A --regex %s"
          helm-locate-fuzzy-match t
          helm-M-x-fuzzy-match t
          helm-recentf-fuzzy-match    t
          helm-projectile-sources-list '(helm-source-projectile-files-list)
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t)
    (use-package helm-descbinds
      :config
      (bind-keys :map help-map
                  ("b" . helm-descbinds)))
    (helm-mode 1)
    (helm-adaptative-mode 1)
    (helm-autoresize-mode 1))
#+END_SRC
** =hydra=
"/Cut off one head, Two more shall take its place. Hail HYDRA!/" [[http://marvel-movies.wikia.com/wiki/HYDRA][―miembro HYDRA]].

Permite tratar combinaciones de teclas como grupos... es algo difícil de explicar, puede ver este vídeo [[https://www.youtube.com/watch?v=_qZliI1BKzI][Switching Emacs windows with hydra and ace-window - YouTube]] para entender de qué trata este paquete.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :demand t
    :preface
    (use-package windmove
      :ensure nil)
    (use-package winner
      :ensure nil)
    (use-package windresize)
    (use-package ace-window
      :config
      (setf aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
    :config
    (require 'hydra-examples)
    (defhydra hydra-zoom (global-map "<f2>")
      "Acercamiento"
      ("f" text-scale-increase "in")
      ("j" text-scale-decrease "out"))
    
    (defhydra hydra-mc (:columns 2)
      "Multiples cursores"
      ("a" mc/edit-beginnings-of-lines "mc/edit-beginnings-of-lines")
      ("s" mc/unmark-next-like-this "mc/unmark-next-like-this")
      ("d" mc/skip-to-previous-like-this "mc/skip-to-previous-like-this")
      ("f" mc/mark-previous-symbol-like-this "mc/mark-previous-symbol-like-this")
      
      ("j" mc/mark-next-symbol-like-this "mc/mark-next-symbol-like-this")
      ("k" mc/skip-to-next-like-this "mc/skip-to-next-like-this")
      ("l" mc/unmark-previous-like-this "mc/unmark-previous-like-this")
      ("ñ" mc/edit-ends-of-lines "mc/edit-ends-of-lines"))
    
    ;; Hydra nos permite hacer magia con la administración de ventanas dentro de
    ;; un marco de Emacs. Varios paquetes estan especificados en el `:preface'
    ;; del macro para hydra
    (defhydra hydra-win (:columns 4 :color amaranth)
      "Manejo de ventanas"
      ("j" windmove-left "Mover cursor, izquierda")
      ("k" windmove-down "Mover cursor, abajo")
      ("l" windmove-up "Mover cursor, arriba")
      ("ñ" windmove-right "Mover cursor, derecha")
      ("f" hydra-move-splitter-left "Cambiar tamaño, izquierda")
      ("d" hydra-move-splitter-down "Cambiar tamaño, abajo")
      ("s" hydra-move-splitter-up "Cambiar tamaño, arriba")
      ("a" hydra-move-splitter-right "Cambiar tamaño, derecha")
      ("g" helm-mini "Cambiar buffer")
      ("h" helm-find-files "Abrir/Crear archivo")
      ("F" follow-mode "Activa follow-mode")
      ("z" (lambda ()
             (interactive)
             (ace-window 1)
             (add-hook 'ace-window-end-once-hook
                       'hydra-win/body))
       "Cambiar a ventana...")
      ("v" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right))
       "Divide ventana, vertical")
      ("x" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down))
       "Divide ventana, horizontal")
      ("c" (lambda ()
             (interactive)
             (ace-window 4)
             (add-hook 'ace-window-end-once-hook
                       'hydra-win/body))
       "Cambiar a ventana...")
      ("H" save-buffer "Salvar buffer")
      ("b" delete-window "Borrar ventana")
      ("B" (lambda ()
             (interactive)
             (ace-window 16)
             (add-hook 'ace-window-end-once-hook
                       'hydra-win/body))
       "Borrar ventana...")
      ("n" delete-other-windows "Borrar, otra ventana")
      ("m" ace-maximize-window "Maximizar ventana")
      ("," (progn
             (winner-undo)
             (setq this-command 'winner-undo))
       "Deshacer cambio anterior")
      ("." winner-redo "Rehacer cambio anterior")
      ("SPC" nil "salir"))
    (bind-key "C-z" 'hydra-win/body)
    )
#+END_SRC
** =text-mode=
Cualquier modo mayor que /herede/ de =text-mode= sera afectado por esta configuración.
#+BEGIN_SRC emacs-lisp
  (use-package text-mode
    :ensure nil
    :preface
    (provide 'text-mode)
    (defun shackra/text-mode ()
      (flyspell-mode)
      (set (make-local-variable 'fill-column) 100)
      (turn-on-visual-line-mode))
    :config
    (add-hook 'text-mode-hook #'shackra/text-mode))
#+END_SRC
*** Mover el cursos de manera inteligente al inicio de la linea
He tenido el problema, desde que no uso =auto-indent-mode=, que al presionar M-a el cursor va a la columna 0 en lugar de posicionarse en el primer carácter no-blanco de la linea, que es un comportamiento deseado cuando se esta programando. En [[http://stackoverflow.com/a/145359/2020214][Stackoverflow hay una respuesta]] para el problema :)
#+BEGIN_SRC emacs-lisp
  (use-package sbol
    :ensure nil
    :preface (provide 'sbol)
    :bind (([home] . smart-beginning-of-line)
           ("C-a" . smart-beginning-of-line))
    :init
    (defun smart-beginning-of-line ()
      "Move point to first non-whitespace character or beginning-of-line.

  Move point to the first non-whitespace character on this line.
  If point was already at that position, move point to beginning of line."
    (interactive)
    (let ((oldpos (point)))
      (back-to-indentation)
      (and (= oldpos (point))
           (beginning-of-line)))))
#+END_SRC
** =prog-mode=
Cualquier modo mayor que /herede/ de =prog-mode= sera afectado por esta configuración.
#+BEGIN_SRC emacs-lisp
  (use-package prog-mode
    :ensure nil
    :preface
    (provide 'prog-mode)
    (use-package rainbow-mode)
    (use-package highlight-escape-sequences)
    (use-package highlight-numbers)
    :init
    (defun shackra/prog-mode ()
      (set (make-local-variable 'fill-column) 79)
      (set (make-local-variable 'comment-auto-fill-only-comments) t)
      ;; Nota: M-q rellena las columnas del párrafo actual
      ;;       M-o M-s centra una linea de texto
      (auto-fill-mode t)
      (highlight-numbers-mode)
      (hes-mode)
      (electric-pair-mode)
      (rainbow-turn-on)
      (flyspell-prog-mode))
    :config
    (bind-key "RET" 'newline-and-indent)
    (add-hook 'prog-mode-hook #'shackra/prog-mode))
#+END_SRC
** =uniquify=
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :ensure nil
    :init
    (setf uniquify-buffer-name-style 'forward))
#+END_SRC
** =htmlize=
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
** =hlinum=
Extiende el modo =linum-mode= y subraya el numero de linea actual.
#+BEGIN_SRC emacs-lisp
  (use-package hlinum
    :disabled t
    :config
    (add-hook 'prog-mode-hook #'hlinum-activate))
#+END_SRC
** =fixmee=
Subraya cualquier termino "TODO" en cualquier modo mayor de programación.
#+BEGIN_SRC emacs-lisp
  (use-package fixmee
    :diminish fixmee-mode
    :defer 5
    :config
    (add-hook 'prog-mode #'fixmee-mode))
#+END_SRC
** =keyfreq=
Registra la frecuencia con la que se usan ciertas teclas en Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :if (daemonp)
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
** =undo-tree=
Reemplaza el mecanismo de deshacer/hacer de Emacs con un sistema que trata los cambios realizados como un árbol con ramificaciones de cambios.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :bind (("C-ç" . undo)
           ("M-ç" . redo))
    :init
    (setf undo-tree-mode-lighter "")
    :config
    (defalias 'redo 'undo-tree-redo)
    (global-undo-tree-mode 1))
#+END_SRC
** =theme-changer=
Cambia el tema de Emacs dependiendo de la hora del día. Para que esto funcione adecuadamente hay que especificar las coordenadas geográficas del lugar donde vivimos, para saber más ver [[*Información personal][Información personal]].
#+BEGIN_SRC emacs-lisp
  (use-package theme-changer
    :init
    (use-package material-theme
      :ensure t)
    :config
    (change-theme 'material-light 'material))
#+END_SRC
** =org-mode=
El modo Org (Org-mode) es un modo de edición del editor de texto Emacs mediante el cual se editan documentos jerárquicos en texto plano.

Su uso encaja con distintas necesidades, como la creación de notas de cosas por hacer, la planificación de proyectos y hasta la escritura de páginas web. Por ejemplo, los elementos to-do (cosas por hacer) pueden disponer de prioridades y fechas de vencimiento, pueden estar subdivididos en subtareas o en listas de verificación, y pueden etiquetarse o dársele propiedades. También puede generarse automáticamente una agenda de las entradas de cosas por hacer. ~[[https://es.wikipedia.org/wiki/Org-mode][org-mode - Wikipedia, la enciclopedia libre]]
#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :init
    (use-package org-indent
      :defer t
      :ensure nil
      :diminish org-indent-mode)
    ;; TODO: Añadir er/expand-region y endless/insert-key
    :config
    (org-clock-persistence-insinuate)
    ;; sacado de http://emacs.stackexchange.com/a/2103/690
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
    (setf org-footnote-auto-adjust t
          org-html-htmlize-output-type 'css
          org-html-htmlize-font-prefix "org-"
          org-habit-graph-column 55
          org-directory (expand-file-name "~/org")
          org-archive-location (expand-file-name "~/org-archivos/archivado.org::* Entradas viejas y archivadas")
          org-special-ctrl-k t
          org-ctrl-k-protect-subtree t ;; al usar C-k, evitamos perder todo el subarbol
          org-catch-invisible-edits 'show
          org-return-follow-link t
          org-startup-indented t
          org-startup-folded nil
          ;; Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
          org-replace-disputed-keys t
          org-imenu-depth 5
          org-log-done 'note
          org-log-reschedule 'note
          org-log-redeadline 'note
          org-log-note-clock-out 'note
          org-log-refile 'note
          org-log-into-drawer t
          org-clock-persist 'history
          org-default-notes-file (concat org-directory "/diario.org")

          org-agenda-files (list (concat org-directory "/cosasporhacer.org")))
      (setf org-todo-keywords
          '(
            ;; Secuencia para TAREAS
            ;; POR-HACER significa que la tarea necesita atención
            ;; EN-PROGRESO significa que la tarea tiene mi atención y la estoy
            ;;   realizando
            ;; EN-ESPERA significa que la tarea se a pospuesto para después
            ;; EN-REVISIÓN significa que la tarea necesita ser revisada/hay alguna
            ;;   contrariedad
            ;; CANCELADO significa que la tarea a sido cancelada
            ;; TERMINADO significa que la tarea se a realizado con exito
            (sequence "POR-HACER(p)" "EN-PROGRESO(g)" "EN-ESPERA(e@/!)" "EN-REVISIÓN(r@/!)" "|" "CANCELADO(c@)" "TERMINADO(t!)")
            (sequence "ENTREGAR(n)" "|" "OLVIDALO(x@)" "ENTREGADO(N!)")))
    (setf org-todo-keyword-faces
          '(
            ("POR-HACER"   . (:background "#f4a460" :foreground "#8b4513" :weight bold))
            ("EN-PROGRESO" . (:background "#87cefa" :foreground "#483d8b" :weight bold))
            ("EN-ESPERA"   . (:background "#ffe4e1" :foreground "#8b8989" :weight bold))
            ("EN-REVISIÓN" . (:background "#fff68f" :foreground "#8b6508" :weight bold))
            ("TERMINADO"   . (:background "#98fb98" :foreground "#556b2f" :weight bold))
            ("CANCELADO"   . (:background "#ffaeb9" :foreground "#ff3030" :weight bold))
            ("ENTREGAR"    . (:background "#f4a460" :foreground "#8b4513" :weight bold))
            ("ENTREGADO"   . (:background "#98fb98" :foreground "#556b2f" :weight bold))
            ("OLVIDALO"    . (:background "#ffaeb9" :foreground "#ff3030" :weight bold))))
    (setf org-capture-templates
          '(
            ("t" "Tareas")

            ("tp" "Añadir tarea 'Por hacer'" entry (file+headline "cosasporhacer.org" "Tareas")
             "* POR-HACER %^{breve descripcion}
  :PROPERTIES:
  :CREATED:%U
  :END:
  %?")
            ("tc" "Calendario" entry (file+headline "cosasporhacer.org" "Calendario")
             "* %^{Nombre del evento}
  SCHEDULED: %:date")

            ("r" "Recados")
            ("rd" "Nuevo recado" entry (file "~/recados.org")
             "* ENTREGAR recado de %^{Nombre de persona}
  :PROPERTIES:
  :DE: %\\1
  :CONTACTO: %^{contacto}
  :CREATED: %T
  :END:
  %?" :kill-buffer t)
            ("g" "Algún día/Tal vez" entry (file+headline "quizas.org" "En 'veremos'")
             "* %^{breve descripcion}
  :PROPERTIES:
  :CREATED: %T
  :END:
  %?" :kill-buffer t)
            ("d" "Escribir una nota en el diario" plain (file org-default-notes-file)
             "* %^{Querido diario...}
  :PROPERTIES:
  :CREATED: %T
  :END:
  %?" :empty-lines 1 :kill-buffer t)))
    (use-package org-bullets
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC
** =visual-fill-column=
/fill-column for visual-line-mode/
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :defer t)
#+END_SRC
** =python=
Modo mayor para programar en Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure nil
    :init
    (setf python-mode-modeline-display "python-mode")
    :bind-keymap ("C-M-," . comment-dwim)
    :interpreter ("ipython" . python-mode)
    :preface
    (use-package pyvenv :defer t)
    (use-package py-autopep8 :defer t)
    :config
    (if (fboundp 'defhydra)
        (prog1 (defhydra hydra-py (:columns 2)
                 "Python (re) sangrado de bloques"
                 ("<" python-indent-shift-left "Decrementa el sangrado")
                 (">" python-indent-shift-right "Incrementa el sangrado")
                 ("SPC" indent-region "sangra la región" :color blue))
          ;; atamos la funcion hydra-py
          (bind-key "C-c <" 'hydra-py/body python-mode-map))
      ;; Hydra no esta disponible, no podemos definir nuestra hydra entonces
      ;; atamos los atajos del teclado como si nada
      (bind-key "C-c <" 'python-indent-shift-left python-mode-map)
      (bind-key "C-c >" 'python-indent-shift-right python-mode-map))
    
    (defun shackra/python-mode ()
      "Cosas que deseo activar/desactivar cuando voy a programar en Python"
      (electric-indent-local-mode -1)
      (pyvenv-mode)
      (py-autopep8-enable-on-save))
    (add-hook 'python-mode-hook #'shackra/python-mode))
#+END_SRC
** =company=
Un mejor motor de autocompletado comparado con [[https://github.com/auto-complete/auto-complete][auto-complete/auto-complete]].
#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand t
    :diminish company-mode
    :preface
    (use-package company-jedi
      :defer t
      :init
      (setf jedi:complete-on-dot t)
      :config
      (defun shackra/jedi ()
        (jedi:setup)
        (add-to-list 'company-backends 'company-jedi))
      (add-hook 'python-mode-hook #'shackra/jedi))
    (use-package helm-company)
    :bind-keymap ("C-ñ" . helm-company)
    :init
    (setf company-idle-delay 0.3)
    (setf company-tooltip-limit 30)
    (setf company-minimum-prefix-length 1)
    (setf company-echo-delay 0)
    (setf company-auto-complete nil)
    :config
    (add-to-list 'company-backends 'company-dabbrev t)
    (add-to-list 'company-backends 'company-files t)
    (add-to-list 'company-backends 'company-yasnippet t)
    (add-hook 'after-init-hook #'global-company-mode))
#+END_SRC
** =projectile=
Manejo de archivos de un proyecto.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setf
     projectile-completion-system 'helm
     projectile-file-exists-remote-cache-expire (* 10 60)
     projectile-globally-ignored-files '("TAGS" "\#*\#" "*~" "*.la"
                                         "*.o" "*.pyc" "*.elc" "*.exe"
                                         "*.zip" "*.tar.*" "*.rar" "*.7z")
     projectile-switch-project-action  'helm-projectile-find-file)
    :config
    (add-hook 'after-init-hook #'projectile-global-mode))
#+END_SRC
** =telephone-line=
"/Soy como =powerline=, pero mejor/"
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :config
    (telephone-line-defsegment* shackra-buffer-vc-modified-segment
                                (list (if (buffer-modified-p)
                                          (propertize "❗" 'face 'error)
                                        " ")
                                      " " (shackra/vc-info)))

    (telephone-line-defsegment* shackra-line-buffer-segment
                                `(""
                                  ,(telephone-line-raw mode-line-buffer-identification t)))
    (setf telephone-line-lhs
          '((accent . (shackra-line-buffer-segment))
            (nil . (shackra-buffer-vc-modified-segment
                    telephone-line-minor-mode-segment))))
    (telephone-line-mode 1))
#+END_SRC
** =subword-mode=
Navegación y edición de /SubPalabras/. Siendo "HolaMundoAdios" una nomenclatura, =subword-mode= permite mover el cursor entre cada subpalabra, deteniéndolo en "Adios", "Mundo" y "Hola" si se mueve el cursor de derecha a izquierda presionando la tecla CTRL. Este modo menor es muy útil, especialmente para aquellos desarrolladores en Java que usan variables con JorobasDeCamello.
#+BEGIN_SRC emacs-lisp
  (use-package subword
    :ensure nil
    :diminish subword-mode)
#+END_SRC
** =visual-line-mode=
Envuelve las filas de texto si son muy anchas visualmente en nuevas filas.
#+BEGIN_SRC emacs-lisp
  (use-package visual-line
    :diminish visual-line-mode
    :preface (provide 'visual-line)
    :ensure nil
    :init
    (setf visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow)))
#+END_SRC
** =auto-fill-mode=
Rompe lineas de texto de manera automática en cierta columna
#+BEGIN_SRC emacs-lisp
  (use-package auto-fill
    :ensure nil
    :diminish auto-fill-function
    :preface (provide 'auto-fill))
#+END_SRC
** =flyspell-mode=
Revisión ortográfica al vuelo.
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish flyspell-mode
    :ensure nil)
#+END_SRC
** =flycheck-mode=
Revisión de errores en el código fuente, al vuelo.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :init
    (setf flycheck-disabled-checkers '(emacs-lisp -checkdoc) ;; deshabilita el majadero revisor de documentación
          flycheck-indication-mode 'left-fringe)
    :config
    (add-hook 'prog-mode-hook #'flycheck-mode))
#+END_SRC
** =recentf=
Archivos recientes abiertos en Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :ensure nil
    :init
    (setf recentf-max-saved-items 100)
    :config
    (add-to-list 'recentf-exclude ".git/")
    (add-to-list 'recentf-exclude ".hg/")
    (add-to-list 'recentf-exclude "elpa/")
    (add-to-list 'recentf-exclude "\\.emacs.d/org-clock-save.el\\'")
    (add-to-list 'recentf-exclude "INBOX/"))
#+END_SRC
** =expand-region=
Incrementa la selección por unidades semánticas.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :defer 3
    :bind ("C-c 0" . er/expand-region))
#+END_SRC
** =multiple-cursors=
Multiples cursores en Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :defer 4
    :config
    ;; Si mi hydra esta definida
    (if (fboundp 'hydra-mc/body)
        ;; La usamos
        (bind-key "C-c m m" 'hydra-mc/body)
      (bind-keys :prefix-map shackra/mc-map
               :prefix "C-c m"
               ("a" . mc/mark-all-symbols-like-this-in-defun)
               ("s" . mc/mark-all-symbols-like-this)
               ("d" . mc/mark-next-symbol-like-this)
               ("f" . mc/mark-previous-symbol-like-this)
               ("j" . mc/mark-all-words-like-this)
               ("k" . mc/mark-next-word-like-this)
               ("l" . mc/mark-previous-like-this)
               ("ñ" . mc/mark-sgml-tag-pair)

               ("v" . mc/insert-numbers)
               ("b" . mc/sort-regions)
               ("n" . mc/reverse-regions)
               ("m" . set-rectangular-region-anchor)

               ("t" . mc/edit-lines)
               ("y" . mc/edit-beginnings-of-lines)
               ("u" . mc/edit-ends-of-lines))))
#+END_SRC
** =avy-jump=
El cursor salta en cualquier parte del buffer según un /árbol de decisiones/ basado en caracteres.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :defer 3
    :config
    (bind-keys :prefix-map shackra/avy-mode-map
               :prefix "C-c z"
               ("j" . avy-goto-line)
               ("k" . avy-goto-word-1)
               ("l" . avy-goto-char-in-line)
               ("ñ" . avy-goto-char)))
#+END_SRC
** =magit=
Git en Emacs. A decir verdad, amo Mercurial y odio Git.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :bind ([C-f12] . magit-status)
    :init
    (setf magit-last-seen-setup-instructions "1.4.0"
        magit-auto-revert-mode nil))
#+END_SRC
** =monky=
Mercurial en Emacs. Amo Mercurial ;)

Ver opciones más actualizadas para Mercurial en [[https://www.reddit.com/r/emacs/comments/3nzp7a/best_way_to_use_mercurial_with_emacs/][Best way to use Mercurial with Emacs? : emacs]]
#+BEGIN_SRC emacs-lisp
  (use-package monky
    :defer t
    :bind ([f12] . monky-status)
    :init
    (setf monky-process-type 'cmdserver))
#+END_SRC
** =multi-term=
Ofrece un excelente emulador de terminal *dentro* de Emacs 
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :bind ([f1] . multi-term)
    :config
    (defun shackra/maybe-disable-yasnippet ()
      "Desactiva yasnippet a pedido"
      (yas-minor-mode -1))

    (setf multi-term-buffer-name "sh-"
          multi-term-program "/usr/bin/zsh"
          multi-term-program-switches "--login"
          term-bind-key-alist (list (cons "C-c C-c" 'term-interrupt-subjob)
                                    (cons "C-p" 'previous-line)
                                    (cons "C-n" 'next-line)
                                    (cons "M-f" 'term-send-forward-word)
                                    (cons "M-b" 'term-send-backward-word)
                                    (cons "C-c C-j" 'term-line-mode)
                                    (cons "C-c C-k" 'term-char-mode)
                                    (cons "M-DEL" 'term-send-backward-kill-word)
                                    (cons "M-d" 'term-send-forward-kill-word)
                                    (cons "<C-left>" 'term-send-backward-word)
                                    (cons "<C-right>" 'term-send-forward-word)
                                    (cons "C-r" 'term-send-reverse-search-history)
                                    (cons "M-p" 'term-send-raw-meta)
                                    (cons "M-y" 'term-send-raw-meta)
                                    (cons "C-y" 'term-send-raw)))

    (add-hook 'term-mode-hook #'shackra/maybe-disable-yasnippet))
#+END_SRC
** =mu4e=
Un versátil cliente de correo electrónico para Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :ensure nil
    :defer 3
    :preface
    ;;; message view action
    (defun mu4e-msgv-action-view-in-browser (msg)
      "Ver el cuerpo del mensaje HTML en el navegador web"
      (interactive)
      (let ((html (mu4e-msg-field (mu4e-message-at-point t) :body-html))
            (tmpfile (format "%s/%d.html" temporary-file-directory (random))))
        (unless html (error "No hay partes en HTML para este mensaje"))
        (with-temp-file tmpfile
          (insert
           "<html>"
           "<head><meta http-equiv=\"content-type\""
           "content=\"text/html;charset=UTF-8\">"
           html))
        (browse-url (concat "file://" tmpfile))))
    :config
    (defalias 'xc 'mu4e)
    (use-package mu4e-contrib
      :ensure nil)
    (use-package mu4e-maildirs-extension
      :init
      (setf mu4e-maildirs-extension-title " Bandejas")
      (setf mu4e-maildirs-extension-custom-list '("/personal/INBOX" "/gmx/INBOX" "/riseup/INBOX")))

    (if (file-exists-p "/home/jorge/.secret/mu4e-cuentas.el")
        (load-file "/home/jorge/.secret/mu4e-cuentas.el")
      (notifications-notify :urgency 'critical
                            :title "Cuentas de correo electrónico"
                            :body "No se pudo cargar: ~/.secret/mu4e-cuentas.el"))
    ;; html2text es un paquete que debe estar instalado en tu sistema
   (setf mu4e-html2text-command 'mu4e-shr2text
         mu4e-confirm-quit nil)
    (setf mu4e-bookmarks
          '(("flag:unread" "No leido" ?n)
            ("flag:flagged" "Marcados" ?m)
            ("date:today..now" "Correo de hoy" ?h)
            ("date:7d..now" "Correo de la semana" ?w)))
    (setf mu4e-maildir-shortcuts
          '(("/personal/INBOX" . ?p)
            ("/gmx/INBOX"      . ?g)
            ("/riseup/INBOX"   . ?r)))
    ;; carga los datos de mi cuenta de correo
    (load-file (expand-file-name "mu4e-personal.el" user-emacs-directory))
    (add-to-list 'mu4e-view-actions
                 '("Navegador web" . mu4e-msgv-action-view-in-browser) t))
#+END_SRC
** =jabber.el=
¡¡Chat de jabber desde Emacs!!

Jabber puede usar el protocolo de cifrado [[https://en.wikipedia.org/wiki/Off-the-Record_Messaging][Off-the-Record]] a través de [[https://github.com/legoscia/emacs-jabber-otr][legoscia/emacs-jabber-otr]], el único requisito es tener el paquete [[https://github.com/python-otr/pure-python-otr][python-otr/pure-python-otr]] instalado en el sistema.
#+BEGIN_SRC sh :tangle no
  sudo pip install python-potr
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package jabber
    :if (daemonp)
    :defer 10
    :init
    ;; ver http://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
    (setf jabber-account-list `(("jorgedice@blah.im/emacs"
                                 (:password . ,(secrets-get-secret "Login" "contraseña usual"))
                                 (:network-server . "jabber.blah.im")
                                 (:port . 5222)
                                 (:nickname . "Shackra Sislock")
                                 (:connection-type . starttls))))
    :config
    (use-package jabber-otr)
    (setf jabber-history-enabled t
          jabber-use-global-history nil
          jabber-backlog-number 40
          jabber-backlog-days 30
          jabber-alert-presence-message-function (lambda (who oldstatus newstatus statusnext) nil)
          jabber-default-status "«Faith is always at a disadvantage; it is a perpetually defeated thing which survives all of its conquerors» ~G. K. Chesterton.")
    (add-hook 'jabber-chat-mode-hook #'turn-off-auto-fill)
    (add-hook 'jabber-chat-mode-hook #'turn-on-visual-line-mode)
    (add-hook 'jabber-chat-mode-hook #'flyspell-mode)
    (jabber-connect-all))
#+END_SRC
** =notify=
Permite a emacs enviar notificaciones por DBus o diferentes medios. En este caso usare libnotify (el método definido no es multiplataforma).
#+BEGIN_SRC emacs-lisp
  (setf notify-method 'notify-via-libnotify)
#+END_SRC
** =appt=
Appointments me alerta de mis citas o pendientes que tengo por hacer.
#+BEGIN_SRC emacs-lisp
  ;; configuración adaptada de http://emacs.stackexchange.com/a/5821/690 Gracias
  ;; a http://redd.it/35kbf6
  (use-package appt
    :ensure nil
    :init
    (setf appt-message-warning-time 10
          appt-display-interval (1+ appt-message-warning-time)
          appt-display-mode-line nil)
    ;; Muestra las citas como notificaciones en el manejador de ventanas
    (setf appt-disp-window-function 'shackra/appt-muestra-notificacion)
    (setf appt-delete-window-function nil)
    :config
    (defun shackra/appt-update-when-file-updated ()
    "Actualiza appt cuando cierto archivo es actualizado"
    ;; TODO: iterar una lista de agendas que se definen para org-mode
    (if (string= (buffer-file-name) (concat org-directory "/cosasporhacer.org"))
                   (shackra/org-agenda-to-appt)))

    (defun shackra/org-agenda-to-appt ()
      (interactive)
      (setf appt-time-msg-list nil)
      (org-agenda-to-appt))

    (shackra/org-agenda-to-appt)
    (run-at-time "12:05am" (* 24 3600) 'shackra/org-agenda-to-appt)
    (appt-activate t)
    ;; automáticamente actualiza las citas cuando el archivo cosasporhacer.org es
    ;; salvado (ahí es donde yo guardo mi lista de cosas por hacer, y mi agenda)
    (add-hook 'after-save-hook #'shackra/appt-update-when-file-updated))
#+END_SRC
** =sx=
Acceso a Stackoverflow y subsitios desde Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package sx
    :defer 10)
#+END_SRC
