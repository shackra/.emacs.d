#+TITLE: Mi configuración de GNU Emacs
#+AUTHOR: Jorge Javier Araya Navarro (Shackra Sislock)
#+EMAIL: elcorreo@deshackra.com
#+OPTIONS: toc:3 num:nil ^:nil
#+STARTUP: content

#+begin_quote
Actiones nostras tibi comítimus, Dómine, ut ad maiorem gloriam tuam
repleamur. (Te encomendamos, Señor, nuestras actividades para que las
realicemos a mayor gloria tuya.)
#+end_quote

* Configuración de GNU Emacs en un archivo de org-mode
He decidido mover mi configuración a un sólo archivo. Anteriormente mi configuración estaba dividida en varios
archivos =.el=, esto no era malo, sin embargo debo estar visitando diferentes archivos si deseo realizar
varios cambios en mi configuración creándome una plétora de buffers en Emacs. Además, con =org-mode= me es
posible documentar varios aspectos de mi configuración, sí, sí... ya sé que esto se puede hacer con
comentarios en el código. Otro beneficio de usar =org-mode= y =babel= es la capacidad de contraer o expandir
varias secciones de la configuración, o navegar rápidamente entre secciones (cosa que aun no sé hacer),
además, con Babel no me veo restringido a ejecutar solamente código elisp ¡también puedo correr código
Python!.

* La Configuración
Pasemos a la materia. Esta configuración se carga de la siguiente manera desde el archivo
=~/.emacs.d/init.el=:

#+BEGIN_SRC emacs-lisp :tangle no
  ;; init.el para esta configuración. Tu Emacs debe ser versión 24.
  (package-initialize)
  (require 'ob-tangle)
  (org-babel-load-file
   (expand-file-name "emacs-init.org"
                     user-emacs-directory))
#+END_SRC

activamos algunas opciones para depuración en caso de que Emacs falle en cargar la configuración.

#+BEGIN_SRC emacs-lisp
  ;;(toggle-debug-on-error)
  ;;(toggle-debug-on-quit) ;; Se activa cuando el usuario presiona C-g
#+END_SRC

** Información personal
#+BEGIN_SRC emacs-lisp
  (setf user-full-name "Jorge Araya Navarro"
        user-mail-address "elcorreo@deshackra.com")
#+END_SRC

** Repositorio de paquetes
Desde la versión 24 Emacs permite la instalación de paquetes de la misma manera como se realiza en
distribuciones de GNU/Linux.

El sistema de paquetes de Emacs no es perfecto, para que algunos paquetes funcionen como deben, aun debes
poner algunas cosas en tu configuración de Emacs y tal. Lo posible es que las mismas instrucciones estén dadas
en la descripción del paquete.

#+BEGIN_SRC emacs-lisp
  (setf package-archives (list (quote ("gnu" . "http://elpa.gnu.org/packages/"))
                               (quote ("mermelade" . "http://marmalade-repo.org/packages/"))
                               (quote ("melpa" . "http://melpa.milkbox.net/packages/"))
                               (quote ("org" . "http://orgmode.org/elpa/"))))
#+END_SRC

Para ver que paquetes hay disponibles, y cuales desea instalar, puede hacer uso del comando =M-x
package-list-pactares=

** Listado, revisión e instalación de paquetes con Melpa
*La situación es la siguiente:* Quiero poder usar mi configuración en muchas partes, o quizás otros usuarios
de GNU Emacs desean usar mi configuración. Sin embargo, no cuento con una lista de paquetes que tengo
instalado en mi Emacs, y si alguien desea usar mi configuración puede tener errores debido a que no tiene los
paquetes instalados que yo tengo.

*Solución:* usar org-babel para correr un trozo de código Python que genere un código Elisp que se encargue
del problema :D.

Pero primero nos aseguramos de decirle a babel que nos habilite Python para usar ejecutar desde el archivo
org!

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (python . t)
     (sh . t)
     )
  )
#+END_SRC

#+RESULTS:

#+name: codigopython
#+BEGIN_SRC python :results output :file paquetes.el
  import os

  if os.path.isdir(os.path.expanduser("~/.emacs.d/elpa/")):
      melpapackages = os.listdir(os.path.expanduser("~/.emacs.d/elpa/"))
      packagestoinstall = []
      for package in melpapackages:
          if os.path.isdir(os.path.expanduser("~/.emacs.d/elpa/") + package):
              name = package[:package.rfind("-")]
              if not name == "archive":
                  packagestoinstall.append(
                      "(ignore-errors (use-package {0}\n  :ensure {0}))".format(
                          name))

      # Remove any repeated package. This can happen if different directories
      # with the same package name exists in the elpa/ directory
      packagestoinstall = list(set(packagestoinstall))

      # Sort things, please!
      packagestoinstall.sort()
      print("\n".join(packagestoinstall))
#+END_SRC

#+RESULTS: codigopython
[[file:paquetes.el]]

Y cargamos ese archivo :)

#+BEGIN_SRC emacs-lisp :results silent
  (unless (file-exists-p (expand-file-name "elpa/archives/melpa" user-emacs-directory))
    (package-refresh-contents))

  (when (not (package-installed-p 'use-package))
    (package-install 'use-package))

  (require 'use-package)
  (load-file (expand-file-name "paquetes.el" user-emacs-directory))
#+END_SRC

Así es como, por el momento y de manera no muy elegante, resolvemos esta deficiencia! Código elisp para la
instalación de los paquetes extraído de [[https://github.com/adamrt/emacs.d/][ésta otra configuración]] de Emacs.

Cargamos paquetes que no se instalan con ELPA.

#+BEGIN_SRC emacs-lisp
  (load-file (expand-file-name "site-packages/golang/company-go.el" user-emacs-directory))
  ;; carga un agregado para cuando se escriben correos usando mu4e
  (load-file (expand-file-name "site-packages/u-vm-color/u-vm-color.el" user-emacs-directory))
  (ignore-errors 
    (load-file "~/quicklisp/slime-helper.el")
    (setf inferior-lisp-program "sbcl"))
#+END_SRC

*** Ubicación de temas personalizados
Emacs ofrece la posibilidad de tener una carpeta exclusiva para colocar temas personalizados o de terceros a traves de una variable llamada =custom-theme-load-path=. Todos los temas iran en la carpeta /themes/ dentro de la carpeta raíz de Emacs.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (expand-file-name "themes" user-emacs-directory))
#+END_SRC

** Paquetes requeridos con =require=
Existen algunos paquetes que deben ser "requeridos" para la correcta
activación de algunos modos mayores, funcionalidades, y demás cosas
proveídas por Emacs o paquetes instalados en Emacs.

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (require 'helm)
  (require 'helm-config)
  (require 'helm-files)
  (require 'helm-grep)
  (require 'helm-buffers)
  (require 'helm-org)
  (require 'htmlize)
  (require 'company)
  (require 'hlinum)
  (require 'fixmee)
  (require 'expand-region)
  (require 'web-mode)
  (require 'epa-file)
  (require 'visual-regexp)
  (require 'visual-regexp-steroids)
  (when (file-exists-p "/usr/share/emacs/site-lisp/go-mode.el")
    (require 'go-mode-load))

  (require 'company-go)
  (require 'org)
  (require 'org-page)
  (require 'undo-tree)
  (require 'dired+)
  (require 'muse-mode)
  (require 'muse-project)
  (require 'muse-docbook)
  (require 'muse-book)
  (require 'eyebrowse)
  (require 'mediawiki)
  (load "flymake")
#+END_SRC

** Códigos elisp
funciones de Emacs lisp escritas por mi u otras personas (y que yo he recolectado para mi propio beneficio)

*** función para insertar etiquetas <kbd>
Gracias a Malabarba en su [[http://emacs.stackexchange.com/a/2208/690][respuesta desde Emacs.stackexchange]].

#+BEGIN_SRC emacs-lisp
  (defun endless/insert-key (key)
    "Ask for a key then insert its description.
  Will work on both org-mode and any mode that accepts plain html."
    (interactive "kType key sequence: ")
    (let* ((is-org-mode (derived-mode-p 'org-mode))
           (tag (if is-org-mode
                    "@@html:<kbd>%s</kbd>@@"
                  "<kbd>%s</kbd>")))
      (if (null (equal key "\r"))
          (insert
           (format tag (help-key-description key nil)))
        (insert (format tag ""))
        (forward-char (if is-org-mode -8 -6)))))
#+END_SRC

*** funciones con expresiones regulares que uso a menudo en edición de texto
estas son funciones que uso muy a menudo durante la edición de texto, tenerlos como comandos interactivos me ahorra tiempo escribiendo las expresiones regulares una y otra vez.

#+BEGIN_SRC emacs-lisp
  (defun shackra/regexp-una-sola-linea (start end)
    "Elimina todos los saltos de linea en la selección"
    (interactive "r")
    (vr/replace "\n+" " " start end)
    )

  (defun shackra/regexp-un-solo-espacio (start end)
    "Elimina todos los espacios en blanco seguidos en la selección"
    (interactive "r")
    (vr/replace " +" " " start end)
    )

  (defun shackra/muse-regexp-un-solo-marcado (start end)
    "Elimina los * que existan entre espacios en blanco en la selección para formar un solo termino marcado"
    (interactive "r")
    (vr/replace "\* \*" " " start end)
    )
#+END_SRC

*** reemplazo para comment-dwim
#+BEGIN_SRC emacs-lisp
  ;; Original idea from
  ;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
  (defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
          If no region is selected and current line is not blank
          and we are not at the end of the line, then comment
          current line.  Replaces default behaviour of
          comment-dwim, when it inserts comment at the end of the
          line."
    (interactive "*P")
    (comment-normalize-vars)
    (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position))
      (comment-dwim arg)))
#+END_SRC
** Emacs, no hagas éstas cosas... AKA "sane defaults"
Una colección de sentencias para cambiar algunas cosas de Emacs que son poco sanas, de ahí el nombre de "sane
defaults" u /opciones sanas predeterminadas/. Debido a que esta sección de mi configuración se estaba llenando
innecesariamente de entras decidí colocar todas las opciones dentro de un sólo bloque de código elisp.

#+BEGIN_SRC emacs-lisp
  (load-theme 'jazz t)
  (powerline-center-theme)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (recentf-mode 1)
  (savehist-mode 1)
  (set-frame-font "SourceCodePro 11")
  (add-to-list (quote default-frame-alist) (quote (font . "SourceCodePro-11")))
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-auto-revert-mode 1)
  (column-number-mode 1)
  (global-subword-mode 1)
  (global-font-lock-mode 1)
  (show-paren-mode t)
  (delete-selection-mode 1)

  (setf
   ;; hace que el buffer inicial al abrir un nuevo cuadro de Emacs sea la agenda
   ;; de org-mode
   initial-buffer-choice "~/org/cosasporhacer.org"
   load-prefer-newer t
   bookmark-default-file (expand-file-name "bookmarks" user-emacs-directory)
   bookmark-save-flag 1
   inhibit-startup-message t
   inhibit-startup-echo-area-message "jorge"
   initial-scratch-message nil
   line-spacing 1
   make-backup-files nil
   global-auto-revert-non-file-buffers t
   auto-revert-verbose nil
   echo-keystrokes 0.1
   shift-select-mode nil
   byte-compile-warnings '(not nresolved
                             free-vars
                             callargs
                             redefine
                             obsolete
                             noruntime
                             cl-functions
                             interactive-only)
   fill-column 80
   blink-matching-paren nil
   uniquify-buffer-name-style (quote forward)
   recentf-max-saved-items 100
   history-length 1000
   x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
   enable-recursive-minibuffers t
   gc-cons-percentage 0.125
   undo-tree-mode-lighter ""
   ediff-diff-options "-w"
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   )

  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (setq-default truncate-lines t)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (if
      (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setf default-buffer-file-coding-system 'utf-8))

  ;;(eval-after-load "yasnippet" '(diminish 'yas/minor-mode))
  (eval-after-load "button-lock" '(diminish 'button-lock-mode))
  (eval-after-load "org-indent" '(diminish 'org-indent-mode))
  (eval-after-load "helm-mode" '(diminish 'helm-mode))
  (eval-after-load "fixmee" '(diminish 'fixmee-mode))
  (eval-after-load "elpy" '(diminish 'elpy-mode))
  (eval-after-load "highlight-indentation" '(diminish 'highlight-indentation-mode))
  (eval-after-load "autopair" '(diminish 'autopair-mode))
  (eval-after-load "flycheck" '(diminish 'flycheck-mode))
  (eval-after-load "flyspell" '(diminish 'flyspell-mode))
  (eval-after-load "simple" '(diminish 'auto-fill-function))
  (eval-after-load "company" '(diminish 'company-mode))
  (eval-after-load "magit" '(diminish 'magit-auto-revert-mode))
  (eval-after-load "eyebrowse" '(diminish 'eyebrowse-mode))
  (eval-after-load "subword-mode" '(diminish 'subword-mode))
  (eval-after-load "visual-line-mode" '(diminish 'visual-line-mode))
#+END_SRC

*** Mover el cursos de manera inteligente al inicio de la linea
He tenido el problema, desde que no uso =auto-indent-mode=, que al presionar M-a el cursor va a la columna 0
en lugar de posicionarse en el primer carácter no-blanco de la linea, que es un comportamiento deseado cuando
se esta programando. En [[http://stackoverflow.com/a/145359/2020214][Stackoverflow hay una respuesta]] para el problema :)

#+BEGIN_SRC emacs-lisp
  (defun smart-beginning-of-line ()
    "Move point to first non-whitespace character or beginning-of-line.

  Move point to the first non-whitespace character on this line.
  If point was already at that position, move point to beginning of line."
    (interactive)
    (let ((oldpos (point)))
      (back-to-indentation)
      (and (= oldpos (point))
         (beginning-of-line))))

  (global-set-key [home] 'smart-beginning-of-line)
  (global-set-key (kbd "C-a") 'smart-beginning-of-line)
#+END_SRC

** Asociación de archivos a modos mayores
Aquí se definen código para definir la asociación de algunas extensiones de archivo con algunos modos mayores
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.gohtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.gtl\\'" . web-mode))
#+END_SRC

** Customize
 El archivo customize sera éste. Cualquier modificación de Emacs que
 se haga a través de =customize= ira en éste archivo:

#+BEGIN_SRC emacs-lisp
  (setf custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

 Me da la impresión que estas modificaciones pueden ser sobre-escritas
 si se cargan al puro inicio. De ahí que sean movidas a la ultima
 parte de la configuración.

Y cargamos el archivo, ¡No lo olvide!.

 #+BEGIN_SRC emacs-lisp
   (load custom-file)
 #+END_SRC

** Otras configuraciones
Existen ciertos cambios que no tienen cabida en otra parte, y ciertamente colocarlos debajo de [[*Modos%20de%20Emacs][Modos de Emacs]] no es una opción... porque lo veo como algo desordenado.

*** Desata algunas teclas rápidas y sus respectivos comandos
=C-z= es una combinación de teclas que no me sirven para algo, así que lo desato de su comando =suspend-frame= para darle un mejor uso. También =M-z= puede tener un mejor uso que ejecutar el comando de borrado =zap-to-char=
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "M-z"))
#+END_SRC
** Modos de Emacs
   La configuración especifica a cada modo mayor, menor, o paquete con
   funcionalidades. Dividió por secciones.

*** Después de que Emacs cargue la configuración por completo
modos que se activan luego de que emacs carga

     #+BEGIN_SRC emacs-lisp
       (add-hook (quote after-init-hook)
                 (lambda ()
              (helm-mode 1)
              (helm-descbinds-mode)
              (projectile-global-mode)
              (helm-projectile-on)
              (global-flycheck-mode)
              ;;(auto-indent-global-mode)
              (autopair-global-mode)
              (global-pretty-mode t)
              (global-company-mode)
              (global-fixmee-mode 1)
              ;;(semantic-mode 1)
              ;;(global-move-dup-mode)
              ;;(global-relative-buffers-mode)
              ;;(global-auto-highlight-symbol-mode)
              (eyebrowse-mode t)
              ))

       (global-set-key (kbd "C-ç") 'undo)
       (global-set-key (kbd "M-¡") 'text-scale-increase)
       (global-set-key (kbd "M-'") 'text-scale-decrease)
       (define-key global-map (kbd "M-o") 'other-window)
       (define-key global-map (kbd "M-p") 'ace-window)
       (setf aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
       ;; salta a la nueva ventana creada despues de dividir la actual
       (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
       (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
     #+END_SRC

*** Org-mode
CLOSED: [2014-10-15 mié 17:38]
- State "TERMINADO"  from "POR-HACER"  [2014-10-15 mié 17:38]
- State "POR-HACER"  from "EN-REVISIÓN" [2014-10-11 sáb 00:16] \\
  probar las capturas de anotaciones implementadas. Pasar a los nuevos archivos las tareas en otros archivos.
- State "EN-REVISIÓN" from "EN-REVISIÓN" [2014-10-10 vie 00:19] \\
  El error parece provenir de la sentencia =org-blank-before-new-entry t= en la configuración. Todo lo demás
  permanece sin comentar y aun así org-capture funciona como debe.
- State "EN-REVISIÓN" from ""           [2014-10-08 mié 20:19] \\
  No puedo hacer uso de la función para capturar anotaciones, [[http://emacs.stackexchange.com/questions/847/whats-wrong-with-my-org-mode-capture-settings][en el stack exchange de Emacs]] estoy tratando de
  conseguir ayuda para este problema
¡Organiza tu vida usando Emacs!

Se cambio la combinación de teclas para =er/expand-region= a C-¡ debido a que org-mode usa la
combinación C-' para otra cosa.

     #+BEGIN_SRC emacs-lisp
       (setf org-footnote-auto-adjust t
             org-directory (expand-file-name "~/org")
             org-archive-location (concat org-directory "/archivado.org::* Entradas viejas y archivadas")
             org-special-ctrl-k t
             org-ctrl-k-protect-subtree t ;; al usar C-k, evitamos perder todo el subarbol
             org-catch-invisible-edits 'show
             org-return-follow-link t
             ;;org-blank-before-new-entry t
             org-startup-indented t
             org-startup-folded nil
             org-imenu-depth 5
             org-log-done 'time
             org-clock-persist 'history
             org-default-notes-file (concat org-directory "/diario.org")
             
             org-agenda-files (list (concat org-directory "/cosasporhacer.org")
                                    (concat org-directory "/agenda.org"))

             org-mobile-directory "~/orgmobile/"
             
             org-capture-templates `(("p" "Cosas por hacer" entry (file+headline ,(concat org-directory "/cosasporhacer.org") "Tareas")
                                      "* POR-HACER %^{breve descripcion}\n%?\nAgregado: %U\nEn: %a" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("d" "Escribir una nota en el diario" plain (file org-default-notes-file)
                                      "%?\n\nEscrito el: %U\nEn: %a" :empty-lines 1)
                                     ("x" "Proyectos de clientes en PeoplePerHour" entry (file+headline ,(concat org-directory "/cosasporhacer.org") "Proyectos en PeoplePerHour") 
                                      "* POR-HACER %^{Titulo del proyecto}\n%^{cliente}p\n%^{ID}p\nDescripción: %?" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("c" "Calendario" entry (file+headline ,(concat org-directory "/cosasporhacer.org") "Calendario")
                                      "* %^{Nombre del evento}\n SCHEDULED: %:date" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("a" "Cumpleaños y aniversarios" entry (file+headline ,(concat org-directory "/agenda.org") "Cumpleaños y aniversarios")
                                      "* %^{Nombre del cumpleañero o aniversario}\n SCHEDULED: %:date\n %?" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("g" "Algún día/Tal vez" entry (file+headline ,(concat org-directory "/quizas.org") "En 'veremos'")
                                      "* %^{breve descripcion}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("l" "Algún día/Tal vez (Libros)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Libros por leer")
                                      "* Leer %^{titulo del libro} por %^{autor o autores}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("v" "Algún día/Tal vez (Peliculas)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Películas por ver")
                                      "* Ver la pelicula %^{titulo de la pelicula}\n %?\n Added: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("m" "Algún día/Tal vez (Música)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Música por escuchar")
                                      "* Escuchar cierta(s) cancion(es) de %^{artista}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("b" "Algún día/Tal vez (Blogs)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Blogs por leer")
                                      "* Leer [[%:url][%^{titulo de la entrada de blog}]] por %^{autor}\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("z" "Algún día/Tal vez (Por hacer)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Cosas por hacer")
                                      "* %^{breve descripcion de la tarea}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("w" "Algún día/Tal vez (Aprender)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Cosas por aprender")
                                      "* %^{breve descripcion}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     ("n" "Algún día/Tal vez (Nuevo proyecto)" entry (file+olp ,(concat org-directory "/quizas.org") "En 'veremos'" "Nuevos proyectos")
                                      "* %^{breve descripcion}\n %?\nAdded: %U" :clock-in nil :clock-keep nil :clock-resume nil)
                                     )
             
             org-todo-keywords '((sequence "POR-HACER(p)" "EN-PROGRESO(g)" "EN-ESPERA(e@/!)" "EN-REVISIÓN(r@/!)" "|" "CANCELADO(c@)" "TERMINADO(t!)"))
             org-todo-keyword-faces '(
                                      ("POR-HACER" . (:foreground "black" :background "#ff4500" :weight bold))
                                      ("EN-PROGRESO" . (:foreground "black" :background "#ffa500" :weight bold))
                                      ("EN-ESPERA" . (:foreground "black" :background "#0000ff" :weight bold))
                                      ("EN-REVISIÓN" . (:foreground "black" :background "#ffff00" :weight bold))
                                      ("TERMINADO" . (:foreground "black" :background "#32cd32" :weight bold))
                                      ("CANCELADO" . (:foreground "black" :background "#8b0000" :weight bold))
                                      )
             )

       (global-set-key (kbd "C-c l") 'org-store-link)
       (global-set-key (kbd "C-c a") 'org-agenda)
       (define-key global-map (kbd "C-c c") 'org-capture)
       (define-key org-mode-map (kbd "C-¡") 'er/expand-region)
       (define-key org-mode-map (kbd "C-c k") #'endless/insert-key)

       (org-clock-persistence-insinuate)

       ;; sacado de http://emacs.stackexchange.com/a/2103/690
       (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
       (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
       (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))

       (add-hook 'org-mode-hook (lambda ()
                                  (auto-fill-mode -1)
                                  (visual-line-mode)
                                  )
                 )
     #+END_SRC

*** org-page
Genera un blog estatico con [[https://github.com/kelvinh/org-page][org-page]].
la variable =op/category-config-alist= fue redefinida (o al menos eso creo) porque de verdad quiero
castellanizar los enlaces y sus títulos en el blog.

      #+BEGIN_SRC emacs-lisp
        (setf op/repository-directory "/home/jorge/Documentos/elblog.deshackra.com"
              op/site-domain "http://elblog.deshackra.com/"
              op/site-main-title "El blog de Shackra"
              op/site-sub-title "«No seas tan abierto de mente o tu cerebro se caerá» ~G.K. Chesterton"
              op/personal-github-link "https://github.com/shackra"
              op/theme-root-directory (expand-file-name "org-page-themes" user-emacs-directory)
              op/theme 'shc
        )

        (defun op/do-publication-all ()
          "You could re-publish all org source files. To publish all files use this function"
          (op/do-publication t nil nil t)
        )
      #+END_SRC
   
*** text-mode
Esta configuración afecta a todos los modos texto en los buffers.
     
     #+BEGIN_SRC emacs-lisp
       (add-hook 'text-mode-hook
                  (lambda ()
                    ;;(turn-on-auto-fill)
                    (turn-on-visual-line-mode)
                    (flyspell-mode)
                    (set (make-local-variable 'fill-column) 110)
                    ))
     #+END_SRC

*** HELM
Es un paquete que esta en su propia liga. Éste paquete te ayudara a aumentar tu productividad, reducir tu
calvicie y hará que tu ex-novia sexy que te dejo hace 20 años vuelva muerta de amor por vos ;)

     #+BEGIN_SRC emacs-lisp
       ;; re-une la tecla TAB con el comando para ejecutar la acción persistente
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
       ;; Hace que la tecla TAB en la terminal funcione nuevamente
       (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
       (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
       ;; Lista las acciones disponibles usando C-z en lugar de TAB
       (define-key helm-map (kbd "C-z")  'helm-select-action) 

       (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
       (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
       (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

       (setf
        helm-google-suggest-use-curl-p t
        helm-scroll-amount 4
        helm-idle-delay 0.01
        helm-input-idle-delay 0.01
        helm-ff-search-library-in-sexp t
        
        helm-split-window-default-side 'other
        helm-split-window-in-side-p t
        helm-candidate-number-limit 200
        helm-M-x-requires-pattern 0
        helm-ff-file-name-history-use-recentf t
        helm-move-to-line-cycle-in-source t
        
        helm-buffers-fuzzy-matching t
        helm-boring-buffer-regexp-list '("\\` "
                                         "\\*helm"
                                         "\\*helm-mode"
                                         "\\*Echo Area"
                                         "\\*Minibuf"
                                         "\\*monky-cmd-process\\*"
                                         "\\*epc con"
                                         "\\*Compile-Log\\*"
                                         "\\*monky-process\\*"
                                         "\\*CEDET CScope\\*"
                                         "\\*Messages\\*"
                                         "\\*Flycheck error"
                                         "\\*Elpy"
                                         "\\*elpy-rpc"
                                         "\\*magit"
                                         "\\*.+(.+)"
                                         "\\*fsm-debug\\*"
                                         "elpa/.+"
                                         "\\*Gofmt Errors\\*")
        
        helm-boring-file-regexp-list (quote
                                      ("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$"
                                       "\\._darcs$" "\\.la$" "\\.o$" "~$"
                                       "\\.pyc$" "\\.elc$" "TAGS" "\#*\#"
                                       "\\.exe$" "\\.jar$" "\\.img$" "\\.iso$"
                                       "\\.xlsx$" "\\.epub$" "\\.docx$"))
        helm-ff-skip-boring-buffers t
        helm-truncate-lines t
        helm-projectile-sources-list '(helm-source-projectile-files-list))

       (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
       (global-set-key (kbd "C-x f") 'helm-recentf)
       (global-set-key (kbd "M-y") 'helm-show-kill-ring)
       (global-set-key (kbd "C-c i") 'helm-imenu)
       (define-key global-map (kbd "C-x C-f") 'helm-find-files)
       (define-key global-map (kbd "C-x b") 'helm-buffers-list)
     #+END_SRC
     
*** Projectile
Es un paquete que nos permite el manejo de archivos en proyectos. Un proyecto, por definición, puede ser
cualquier repositorio de código fuente de software, como =mercurial=, =git=, etc. También es posible definir
un proyecto en una carpeta dejando caer en él un archivo =.projectile=, dentro de este archivo se puede
definir qué archivos/carpetas ignorar y cuales no. Para más información ver la [[http://batsov.com/projectile/][pagina del proyecto]].

     #+BEGIN_SRC emacs-lisp
       (setf
        projectile-completion-system 'helm
        projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-globally-ignored-files (quote ("TAGS" "\#*\#" "*~" "*.la"
                                            "*.o" "~" "*.pyc" "*.elc" "*.exe"
                                            "*.zip" "*.tar.*" "*.rar" "*.7z"))
        projectile-switch-project-action  'helm-projectile-find-file
        )
     #+END_SRC

*** Multi-term
Ofrece un excelente emulador de terminal *dentro* de Emacs

     #+BEGIN_SRC emacs-lisp
       (setf multi-term-buffer-name "terminal "
             multi-term-program "/bin/bash"
             term-bind-key-alist (list (cons "C-c C-c" 'term-interrupt-subjob)
                                       (cons "C-p" 'previous-line)
                                       (cons "C-n" 'next-line)
                                       (cons "M-f" 'term-send-forward-word)
                                       (cons "M-b" 'term-send-backward-word)
                                       (cons "C-c C-j" 'term-line-mode)
                                       (cons "C-c C-k" 'term-char-mode)
                                       (cons "M-DEL" 'term-send-backward-kill-word)
                                       (cons "M-d" 'term-send-forward-kill-word)
                                       (cons "<C-left>" 'term-send-backward-word)
                                       (cons "<C-right>" 'term-send-forward-word)
                                       (cons "C-r" 'term-send-reverse-search-history)
                                       (cons "M-p" 'term-send-raw-meta)
                                       (cons "M-y" 'term-send-raw-meta)
                                       (cons "C-y" 'term-send-raw)))
       (add-hook 'term-mode-hook
                 (lambda ()
                   (yas-minor-mode -1)))
       (global-set-key [f1] 'multi-term)
       (global-set-key [C-next] 'multi-term-next)
       (global-set-key [C-prior] 'multi-term-prev)
     #+END_SRC

*** company
El paquete da funcionalidades de auto completado. Esta opcion es
cada día más popular como remplazo a =auto-complete=.

     #+BEGIN_SRC emacs-lisp
       (setf company-idle-delay 0.3
             company-tooltip-limit 20
             company-minimum-prefix-length 2
             company-echo-delay 0
             company-auto-complete nil)
       
       (add-to-list 'company-backends 'company-dabbrev t)
       (add-to-list 'company-backends 'company-ispell t)
       (add-to-list 'company-backends 'company-files t)
       (add-to-list 'company-backends 'company-yasnippet t)
     #+END_SRC
     
*** Python
Configuraciones para mi modo estrella: Python-mode!  Estoy omitiendo usar auto-indent-mode debido a un [[https://github.com/mlf176f2/auto-indent-mode.el/issues/43][fallo]]
en el modo Python. Por lo tanto, estoy reuniendo la tecla RET con la función =newline-and-indent= que funciona
de lo más bien.

     #+BEGIN_SRC emacs-lisp
       (elpy-enable)
       (setf python-indent-guess-indent-offset nil
             python-indent 4
             python-indent-offset 4)
       (add-hook 'python-mode-hook
                 (lambda ()
                   ;; esto puede que no funcione en emacs 24.3 y anteriores
                   (electric-indent-local-mode -1)
                   (nlinum-mode)
                   (hlinum-activate)))
       (define-key python-mode-map (kbd "C-M-,") 'comment-dwim-line)
       (define-key python-mode-map (kbd "C-c <right>") 'python-indent-shift-right)
       (define-key python-mode-map (kbd "C-c <left>") 'python-indent-shift-left)
       (define-key python-mode-map (kbd "C-c ,") 'iedit-mode-toggle-on-function)
     #+END_SRC

*** iedit-mode
=iedit-mode= es un modo que permite editar un termino repetido en varios lugares a la vez en el buffer actual, es como =multiple-cursors=, pero sin la tener que marcar un area y luego llamar al modo mayor. En Python se llama a =iedit-mode-toggle-on-function= con @@html:<kbd>C</kbd>@@@@html:<kbd>c</kbd>@@ @@html:<kbd>,</kbd>@@.

Cuando =iedit-mode= esta activo, presionar la tecla @@html:<kbd>RET</kbd>@@ hará que se desactive, al igual que sucede con =multiple-cursors=.

#+BEGIN_SRC emacs-lisp
  (define-key iedit-mode-keymap (kbd "RET") 'iedit-done)
#+END_SRC

*** discover-my-major
Éste paquete nos muestra las combinaciones de teclas posibles para el modo mayor en el que estamos
actualmente, todo lo que hay que hacer es recordar una combinación especifica de teclas.

Esta combinación por defecto es C-h C-m ;)

      #+BEGIN_SRC emacs-lisp
        (global-set-key (kbd "C-h C-m") 'discover-my-major)
      #+END_SRC

*** Expand-region
Provee una manera fácil de hacer selección de elementos en el buffer con presionar solo una tecla. Puede ver
éste paquete en acción en este episodio de [[http://emacsrocks.com/e09.html][Emacs Rocks]].

     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "C-'") 'er/expand-region)
     #+END_SRC

*** multiple-cursos
Marca varias partes del buffer dependiendo de la selección que hagas.
     
     #+BEGIN_SRC emacs-lisp
       (define-key global-map (kbd "C-+") 'mc/mark-next-like-this)
       (define-key global-map (kbd "M-+") 'mc/mark-previous-like-this)
       (define-key global-map (kbd "C-M-+") 'mc/mark-all-like-this)
       ;; Para diseñadores web, marca la etiqueta de apertura y cierre
       ;;(define-key sgml-mode-map (kbd "C-'") 'mc/mark-sgml-tag-pair) ;;Symbol's value as variable is void: sgml-mode-map
     #+END_SRC

este paquete puedes tener configuraciones de teclas muy variadas, lo mejor es que visites la pagina del
proyecto en Github para más [[https://github.com/magnars/multiple-cursors.el#basic-usage][información]]. Las teclas usadas reflejan la reducida cantidad que existen en mi
laptop.
     
*** flycheck-mode
revisión-al-vuelo de la sintaxis mientras editas código. Hace una selección automática del mejor revisor de
sintaxis que dispongas.
     
Tiene soporte para muchos lenguajes. Lo recomiendo por encima de flymake.

     #+BEGIN_SRC emacs-lisp
       (setf
        flycheck-disabled-checkers '(emacs-lisp-checkdoc) ;; deshabilita el majadero revisor de documentación
        flycheck-indication-mode 'right-fringe
        )
     #+END_SRC

*** web-mode
Un modo mayor autónomo que permite la edición de plantillas web: documentos HTML con partes embebidas
(CSS/Javascript) y bloques (del lado de cliente/servidor)

     #+BEGIN_SRC emacs-lisp
       (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.[gj]sp\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)) ;; para plantillas de Django.
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)) ;; para editar archivos HTML
     #+END_SRC

*** mu4e
Un versátil cliente de correo electrónico. Éste paquete se carga de manera condicional si esta instalado en el
sistema del usuario. Desgraciadamente no puedes instalarlo desde Melpa o algún otro repositorio de paquetes de
Emacs.

Correos electrónicos y otros datos son traídos de un archivo secreto ;)

#+BEGIN_SRC emacs-lisp
  (defun shackra/render-html-message ()
    "Render a HTML message with eww, see http://emacs.stackexchange.com/a/3052/690"
    (let ((dom (libxml-parse-html-region (point-min) (point-max))))
      (erase-buffer)
      (shr-insert-document dom)
      (goto-char (point-min))))
#+END_SRC

Para saber como configurar mu4e para escribir correos con diferentes cuentas de correo, puedes mirar la
[[http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html][documentación]] es aconsejable que esa configuración viva en el archivo secreto...

     #+BEGIN_SRC emacs-lisp
       (when (file-exists-p "/usr/share/emacs/site-lisp/mu4e/")
         (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
         (autoload 'mu4e "mu4e" "Mail client based on mu (maildir-utils)." t)

         (require 'mu4e-contrib)
         (require 'org-mu4e)
         (setf mu4e-view-show-images t)
         (global-key-binding (kbd "[f7]") 'mu4e)
         (when (fboundp 'imagemagick-register-types)
           (imagemagick-register-types))

         (setf
          ;; html2text es un paquete que debe estar instalado en tu sistema
          mu4e-confirm-quit nil
          mu4e-html2text-command 'mu4e-shr2text
          mu4e-get-mail-command "offlineimap"
          mu4e-maildir "/home/jorge/correo"
          mu4e-update-interval nil
          mu4e-auto-retrieve-keys t
          mu4e-headers-leave-behavior 'apply
          mu4e-headers-visible-lines 7
          mu4e-hide-index-messages t
          message-kill-buffer-on-exit t
          mu4e-attachment-dir  "~/Descargas"
          mu4e-maildir       "~/correo" ;; top-level Maildir
          mu4e-sent-folder   "/principal/INBOX/Sent" ;; folder for sent messages
          mu4e-drafts-folder "/principal/INBOX/Drafts" ;; unfinished messages
          mu4e-trash-folder  "/principal/INBOX/Trash"  ;; trashed messages
          mu4e-refile-folder "/principal/INBOX/Archives" ;; Mensajes salvados
          smtpmail-stream-type  'ssl
          smtpmail-smtp-service 465
          message-send-mail-function 'smtpmail-send-it
          )
         (ignore-errors
           (load (expand-file-name "mu4e-conf.secret.gpg" user-emacs-directory) t))

         ;; funcion para seleccionar la cuenta con la que se va a responder a un email
         (defun my-mu4e-set-account ()
           "Set the account for composing a message."
           (let* ((account
                   (if mu4e-compose-parent-message
                       (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                         (string-match "/\\(.*?\\)/" maildir)
                         (match-string 1 maildir))
                     (completing-read (format "Componer correo con la cuenta: (%s) "
                                              (mapconcat #'(lambda (var) (car var))
                                                         my-mu4e-account-alist "/"))
                                      (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                      nil t nil nil (caar my-mu4e-account-alist))))
                  (account-vars (cdr (assoc account my-mu4e-account-alist))))
             (if account-vars
                 (mapc #'(lambda (var)
                           (set (car var) (cadr var)))
                       account-vars)
               (error "Cuenta de correo no encontrada"))))

         ;; y enganchamos la funcion
         (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
         )
     #+END_SRC

*** dired y dired+
Extiende funcionalidades de =dired=. Se agrega una función personalizada que mata el buffer al presionar =q=,
porque verdaderamente no quiero saber nada más de esa carpeta en caso de desear salir de ella.

     #+BEGIN_SRC emacs-lisp
       (defun dired-quit-window-kill-buffer ()
         "Además de matar el buffer, cierra la ventana"
         (interactive)
         (let ((win-curr (selected-window))
               (win-other (next-window)))
           (select-window win-other)
           (kill-this-buffer)
           (select-window win-curr)))

       (setf dired-dwim-target t)
       (define-key ctl-x-map   "d" 'dired)
       (define-key ctl-x-4-map "d" 'diredp-dired-for-files-other-window)
       (define-key dired-mode-map (kbd ".") 'dired-up-directory)
       (define-key dired-mode-map (kbd "q") 'dired-quit-window-kill-buffer)
     #+END_SRC

*** ace-jump
hace que el cursor se mueva por todo el buffer con presionar pocas teclas.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'ace-jump-word-mode)
  (global-set-key (kbd "C-S-z") 'ace-jump-line-mode)
  (global-set-key (kbd "C-M-z") 'ace-jump-char-mode)
  (global-set-key (kbd "M-z") 'ace-jump-mode-pop-mark)
  (setf ace-jump-mode-case-fold t)
#+END_SRC

*** magit
Git en Emacs.

A decir verdad, amo a Mercurial y odio a Git.

     #+BEGIN_SRC emacs-lisp
       (define-key global-map [C-f12] 'magit-status)
     #+END_SRC

*** monky
Mercurial en Emacs

Amo Mercurial ;)

     #+BEGIN_SRC emacs-lisp
       (define-key global-map [f12] 'monky-status)
       (setf monky-process-type 'cmdserver)
     #+END_SRC

*** Smart modeline
el modeline, pero más inteligente.

       #+BEGIN_SRC emacs-lisp
         (sml/setup)
         (sml/apply-theme 'respectful)

         (add-to-list 'sml/replacer-regexp-list '("^~/coders/" ":Código:") t)
         (add-to-list 'sml/replacer-regexp-list '("^:Código:PPH/clientes/" ":PPH:") t)
       #+END_SRC

*** Visual-regexp y Visual-regexp-steroids
expresiones regulares con algo más moderno que lo ofrecido por Emacs:

       #+BEGIN_SRC emacs-lisp
         (define-key global-map (kbd "C-c r") 'vr/replace)
         (define-key global-map (kbd "C-c q") 'vr/query-replace)
         (define-key global-map (kbd "C-c m") 'vr/mc-mark)
         (define-key esc-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
         (define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s
       #+END_SRC

*** Para todos los modos mayores de programación
En lo personal, me gustaría que al escribir los comentarios en mi código fuente, las lineas se rompan al
llegar a la columna 79.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'prog-mode-hook
                (lambda ()
                  (set (make-local-variable 'fill-column) 79)
                  (set (make-local-variable 'comment-auto-fill-only-comments) t)
                  (auto-fill-mode t)
                  (highlight-numbers-mode)
                  (hes-mode)
                  ;;(highlight-blocks-mode)
                  (flyspell-prog-mode)))

      ;; redefinimos la tecla RET para que inserte un salto de linea y la
      ;; idente de manera adecuada.
      (define-key prog-mode-map (kbd "RET") 'newline-and-indent)
    #+END_SRC

*** golang
configuración para golang en emacs.

       #+BEGIN_SRC emacs-lisp
         (add-hook 'go-mode-hook (lambda ()
                                   (local-set-key (kbd "C-c C-r") 'go-remove-unused-imports)
                                   (local-set-key (kbd "C-c i") 'go-goto-imports)
                                   (local-set-key (kbd "M-.") 'godef-jump)
                                   (set (make-local-variable 'company-backends) '(company-go))
                                   (go-eldoc-setup)
                                   (nlinum-mode)
         ))
       #+END_SRC
       
*** rustlang
configuración para rustlang en Emacs. Yo aun no olvido lo hipócrita que es Mozilla y "su web abierta" por lo
que le hicieron (o no hicieron, si quiere) con Brendan Eich. LAS PERSONAS TIENEN EL DERECHO A FINANCIAR CON SU
DINERO AQUELLAS CAMPAÑAS EN FAVOR DEL MATRIMONIO Y LA FAMILIA, NO HAY RAZÓN PARA QUE SEAN PERSEGUIDAS Y
PIERDAN SUS TRABAJOS PORQUE LOS FASCISTAS DEL MOVIMIENTO LGTB QUIEREN QUE QUIENES PIENSAN DISTINTOS DE ELLOS
SE MANTENGAN IGNORANTES SOBRE [[http://whatismarriagebook.com/][QUÉ ES EL MATRIMONIO]] EN REALIDAD Y CUAL ES SU FUNDAMENTO. ¡Mozilla, hipócrita,
cuanta tolerancia y respeto hacía los demás!.
       
       #+BEGIN_SRC emacs-lisp
         ;;nada por agregar, aun...
       #+END_SRC

*** C++
configuración para habilitar auto-completado en Emacs para la
programación en el lenguaje C++

       #+BEGIN_SRC emacs-lisp
         (require 'cmake-project)
         
         (defun maybe-cmake-project-hook ()
           (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
         
         (defun my-irony-mode-hook ()
           (define-key irony-mode-map [remap completion-at-point]
             'irony-completion-at-point-async)
           (define-key irony-mode-map [remap complete-symbol]
             'irony-completion-at-point-async))
         
         (add-hook 'c++-mode-hook
                   (lambda ()
                     (irony-mode)
                     (set (make-local-variable 'company-backends) '(company-c-headers 
                                                                    company-irony
                                                                    company-yasnippet
                                                                    ))
                     (maybe-cmake-project-hook)
         ))
         
         (add-hook 'irony-mode-hook 
                   (lambda ()
                     (company-irony-setup-begin-commands)
                     (my-irony-mode-hook)
         ))
       #+END_SRC

*** CMake
configuración de CMake para Emacs
       
       #+BEGIN_SRC emacs-lisp
         (require 'cmake-mode)
         
         (setq auto-mode-alist
               (append
                '(("CMakeLists\\.txt\\'" . cmake-mode))
                '(("\\.cmake\\'" . cmake-mode))
                auto-mode-alist))
         
         (add-hook 'cmake-mode-hook 
                   (lambda ()
                     (set (make-local-variable 'company-backends) '(company-cmake
                                                                    company-yasnippet))
                     ))
       #+END_SRC

*** Muse
Configuración para Muse, un modo mayor en Emacs para la escritura y publicación de libros a varios formatos.

#+BEGIN_SRC emacs-lisp
  (add-hook 'muse-mode-hook (lambda ()
                              (auto-fill-mode -1)
                              (visual-line-mode)
                              )
            )

#+END_SRC

*** gancho para antes de guardar el archivo
puede que gustemos de hacer algo con el archivo antes de guardarlo. Acá se enganchan un par de funciones.

      #+BEGIN_SRC emacs-lisp
        (add-hook 'before-save-hook 'py-autopep8-before-save)
        (add-hook 'before-save-hook 'web-beautify-html-buffer t t)
        (add-hook 'before-save-hook 'gofmt-before-save)
       #+END_SRC

*** EN-REVISIÓN langtool
- State "EN REVISIÓN" from ""           [2014-10-27 lun 15:26] \\
  al momento de usar los comandos, da errores
[[https://www.languagetool.org/es/][Language Tool]] es una herramienta de software libre para revisión gramatical, ortográfica y de estilo.

#+BEGIN_SRC emacs-lisp
  (require 'langtool)
  (setf langtool-language-tool-jar "/usr/share/java/languagetool/languagetool-commandline.jar"
        langtool-mother-tongue "es")

  (global-set-key (kbd "C-x 4 w") 'langtool-check)
  (global-set-key (kbd "C-x 4 W") 'langtool-check-done)
  (global-set-key (kbd "C-x 4 l") 'langtool-switch-default-language)
  (global-set-key (kbd "C-x 4 4") 'langtool-show-message-at-point)
  (global-set-key (kbd "C-x 4 c") 'langtool-correct-buffer)
#+END_SRC

*** EN-REVISIÓN Jabber
- State "EN-REVISIÓN" from "TERMINADO"  [2014-11-03 lun 14:47] \\
  las notificaciones no pueden ser enviadas por dbus o libnotify
- State "TERMINADO"  from "EN REVISIÓN" [2014-11-03 lun 13:47]
- State "EN-REVISIÓN" from ""           [2014-10-27 lun 15:27] \\
  iniciar sesión únicamente si Emacs se inicia como demonio
Chat de jabber desde Emacs!!

#+BEGIN_SRC emacs-lisp
  (setf
   jabber-history-enabled t
   jabber-use-global-history nil
   jabber-backlog-number 40
   jabber-backlog-days 30
   jabber-alert-presence-message-function (lambda (who oldstatus newstatus statusnext) nil)
   jabber-invalid-certificate-servers '("chat.deshackra.com")
   jabber-default-status "«Faith is always at a disadvantage; it is a perpetually defeated thing which survives all of its conquerors,» wrote G. K. Chesterton."
  )

  (defun notify-jabber-notify (from buf text proposed-alert)
    "Notifica sobre nuevos mensajes en Jabber vía notify.el"
    (when (or jabber-message-alert-same-buffer
             (not (memq (selected-window) (get-buffer-window-list buf))))
      (if (jabber-muc-sender-p from)
          (notify (format "(MP) %s"
                          (jabber-jid-displayname (jabber-jid-user from)))
                  (format "%s: %s" (jabber-jid-resource from) text)))
      (notify (format "%s" (jabber-jid-displayname from))
              text)))

  (defun my-jabber-chat-delete-or-bury ()
    (interactive)
    (if (eq 'jabber-chat-mode major-mode)
        (condition-case e 
            (delete-frame)
          (error 
           (if (string= "Attempt to delete the sole visible or iconified frame" 
                        (cadr e))
               (bury-buffer))))))

  ;;(define-key jabber-chat-mode-map [escape] 'my-jabber-chat-delete-or-bury)
  ;;(add-hook 'jabber-alert-message-hooks 'notify-jabber-notify)

  (if (daemonp)
      ;; nos conecta a todas las cuentas jabber!
      (progn
        (ignore-errors
          (load-file (expand-file-name "jabber.secret.gpg" user-emacs-directory)))
        (ignore-errors 
          (jabber-connect-all))))

  (add-hook 'jabber-chat-mode-hook (lambda ()
                                     (turn-off-auto-fill)
                                     (turn-on-visual-line-mode)
                                     (flyspell-mode)))
#+END_SRC

*** GNU TLS
Una implementación libre de los protocolos SSL, TLS y DTLS. Interado con Emacs

#+BEGIN_SRC emacs-lisp
  (setf gnutls-min-prime-bits 1024)
#+END_SRC

*** EN-REVISIÓN eyebrowse
- State "EN-REVISIÓN" from ""           [2014-12-15 lun 00:34] \\
  Aun no sé si en el estado actual funciona como deberia
permite cambiar entre disposiciones de ventanas en emacs
#+BEGIN_SRC emacs-lisp
  (define-key eyebrowse-mode-map (kbd "C-c C-w z") 'eyebrowse-prev-window-config)
  (define-key eyebrowse-mode-map (kbd "C-c C-w x") 'eyebrowse-next-window-config)
#+END_SRC

*** EN-REVISIÓN notify.el
- State "EN-REVISIÓN" from ""           [2014-11-03 lun 14:13] \\
  el método definido no es multiplataforma
Permite a emacs enviar notificaciones por DBus o diferentes medios

#+BEGIN_SRC emacs-lisp
  (setf notify-method 'notify-via-libnotify)
#+END_SRC
*** MediaWiki
Acceso para Emacs a sitios que usan Wikimedia
#+BEGIN_SRC emacs-lisp
  (ignore-errors
    (load-file (expand-file-name "mediawiki.secret.gpg" user-emacs-directory)))
  (define-key mediawiki-mode-map (kbd "C-c o") 'mediawiki-browse)
#+END_SRC
