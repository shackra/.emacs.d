#+TITLE: Mi configuración de GNU Emacs
#+AUTHOR: Jorge Javier Araya Navarro (Shackra Sislock)
#+EMAIL: elcorreo@deshackra.com
#+OPTIONS: toc:3 num:nil ^:nil

#+begin_quote
Actiones nostras tibi comítimus, Dómine, ut ad maiorem gloriam tuam
repleamur. (Te encomendamos, Señor, nuestras actividades para que las
realicemos a mayor gloria tuya.)
#+end_quote

* Configuración de GNU Emacs en un archivo de org-mode
  He decidido mover mi configuración a un sólo archivo. Anteriormente mi
  configuración estaba dividida en varios archivos =.el=, esto no era malo, sin
  embargo debo estar visitando diferentes archivos si deseo realizar varios
  cambios en mi configuración creándome una plétora de buffers en
  Emacs. Además, con =org-mode= me es posible documentar varios aspectos de mi
  configuración, sí, sí... ya sé que esto se puede hacer con comentarios en el
  código. Otro beneficio de usar =org-mode= y =babel= es la capacidad de
  contraer o expandir varias secciones de la configuración, o navegar
  rápidamente entre secciones (cosa que aun no sé hacer), además, con Babel no
  me veo restringido a ejecutar solamente código elisp ¡también puedo correr
  código Python!.
  
* La Configuración
  Pasemos a la materia. Esta configuración se carga de la siguiente
  manera desde el archivo =~/.emacs.d/init.el=:

#+begin_src emacs-lisp :tangle no
  ;; init.el para esta configuración. Tu Emacs debe ser versión 24.
  (package-initialize)
  (require 'ob-tangle)
  (org-babel-load-file
   (expand-file-name "emacs-init.org"
                     user-emacs-directory))
#+end_src

  activamos algunas opciones para depuración en caso de que Emacs
  falle en cargar la configuración.

#+begin_src emacs-lisp
  ;;(toggle-debug-on-error)
  ;;(toggle-debug-on-quit) ;; Se activa cuando el usuario presiona C-g
#+end_src

** Información personal
#+begin_src emacs-lisp
  (setf user-full-name "Jorge Araya Navarro"
        user-mail-address "elcorreo@deshackra.com")
#+end_src

** Repositorio de paquetes
Desde la versión 24 Emacs permite la instalación de paquetes de la misma
manera como se realiza en distribuciones de GNU/Linux.

El sistema de paquetes de Emacs no es perfecto, para que algunos paquetes
funcionen como deben, aun debes poner algunas cosas en tu configuración de
Emacs y tal. Lo posible es que las mismas instrucciones estén dadas en la
descripción del paquete.

#+begin_src emacs-lisp
  (setf package-archives (list (quote ("gnu" . "http://elpa.gnu.org/packages/"))
                               (quote ("marmalade" . "http://marmalade-repo.org/packages/"))
                               (quote ("melpa" . "http://melpa.milkbox.net/packages/"))
                               (quote ("org" . "http://orgmode.org/elpa/"))))
#+end_src

Para ver que paquetes hay disponibles, y cuales desea instalar, puede hacer
uso del comando =M-x package-list-pactares=

** Listado, revisión e instalación de paquetes con Melpa
*La situación es la siguiente:* Quiero poder usar mi configuración en muchas partes, o quizás otros usuarios
de GNU Emacs desean usar mi configuración. Sin embargo, no cuento con una lista de paquetes que tengo
instalado en mi Emacs, y si alguien desea usar mi configuración puede tener errores debido a que no tiene los
paquetes instalados que yo tengo.

*Solución:* usar org-babel para correr un trozo de código Python que genere un código Elisp que se encargue
del problema :D.

Pero primero nos aseguramos de decirle a babel que nos habilite Python para usar ejecutar desde el archivo
org!

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (python . t)
     )
  )
#+END_SRC

#+name: codigopython
#+BEGIN_SRC python :results output :file paquetes.el
  import os

  if os.path.isdir(os.path.expanduser("~/.emacs.d/elpa/")):
      melpapackages = os.listdir(os.path.expanduser("~/.emacs.d/elpa/"))
      packagestoinstall = []
      for package in melpapackages:
          if os.path.isdir(os.path.expanduser("~/.emacs.d/elpa/") + package):
              name = package[:package.rfind("-")]
              if not name == "archive":
                  packagestoinstall.append(
                      "(use-package {0}\n  :ensure {0})".format(name))

      # Remove any repeated package. This can happen if different directories
      # with the same package name exists in the elpa/ directory
      packagestoinstall = list(set(packagestoinstall))

      # Sort things, please!
      packagestoinstall.sort()
      print("\n".join(packagestoinstall))
#+END_SRC

#+RESULTS: codigopython
[[file:paquetes.el]]

Y cargamos ese archivo :)

#+BEGIN_SRC emacs-lisp :results silent
  (unless (file-exists-p (expand-file-name "elpa/archives/melpa" user-emacs-directory))
    (package-refresh-contents))

  (when (not (package-installed-p 'use-package))
    (package-install 'use-package))

  (require 'use-package)
  (load-file (expand-file-name "paquetes.el" user-emacs-directory))
#+END_SRC

Así es como, por el momento y de manera no muy elegante, resolvemos esta deficiencia! Código elisp para la
instalación de los paquetes extraído de [[https://github.com/adamrt/emacs.d/][ésta otra configuración]] de Emacs.

Cargamos paquetes que no se instalan con ELPA.

#+begin_src emacs-lisp
  (load-file (expand-file-name "site-packages/golang/company-go.el" user-emacs-directory))
  (load-file (expand-file-name "site-packages/erosiond-theme/erosiond-theme.el" user-emacs-directory))
  ;; carga un agregado para cuando se escriben correos usando mu4e
  (load-file (expand-file-name "site-packages/u-vm-color/u-vm-color.el" user-emacs-directory))
#+end_src

** Paquetes requeridos con =require=
Existen algunos paquetes que deben ser "requeridos" para la correcta
activación de algunos modos mayores, funcionalidades, y demás cosas
proveídas por Emacs o paquetes instalados en Emacs.

#+begin_src emacs-lisp
  (require 'uniquify)
  (require 'helm)
  (require 'helm-config)
  (require 'helm-files)
  (require 'helm-grep)
  (require 'helm-buffers)
  (require 'helm-org)
  (require 'htmlize)
  (require 'company)
  (require 'hlinum)
  (require 'fixmee)
  (require 'expand-region)
  (require 'web-mode)
  (require 'epa-file)
  (require 'visual-regexp)
  (require 'visual-regexp-steroids)
  (when (file-exists-p "/usr/share/emacs/site-lisp/go-mode.el")
    (require 'go-mode-load))

  (require 'company-go)
  (require 'org)
  (require 'org-page)
  (require 'undo-tree)
  (require 'dired+)
#+end_src

** Emacs, no hagas éstas cosas... AKA "sane defaults"
Una colección de sentencias para cambiar algunas cosas de Emacs que son poco sanas, de ahí el nombre de "sane
defaults" u /opciones sanas predeterminadas/. Debido a que esta sección de mi configuración se estaba llenando
innecesariamente de entras decidí colocar todas las opciones dentro de un sólo bloque de código elisp.

#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'monokai t)
  ;;(setf initial-buffer-choice "*Org Agenda*")
  (powerline-center-theme)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (recentf-mode 1)
  (savehist-mode 1)
  (set-frame-font "SourceCodePro 11")
  (add-to-list (quote default-frame-alist) (quote (font . "SourceCodePro-11")))
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-auto-revert-mode 1)
  (column-number-mode 1)
  (global-subword-mode 1)
  (global-font-lock-mode 1)
  (show-paren-mode t)
  (delete-selection-mode 1)

  (setf
   bookmark-default-file (expand-file-name "bookmarks" user-emacs-directory)
   bookmark-save-flag 1
   inhibit-startup-message t
   inhibit-startup-echo-area-message "jorge"
   initial-scratch-message nil
   line-spacing 1
   make-backup-files nil
   global-auto-revert-non-file-buffers t
   auto-revert-verbose nil
   echo-keystrokes 0.1
   shift-select-mode nil
   byte-compile-warnings '(not nresolved
                             free-vars
                             callargs
                             redefine
                             obsolete
                             noruntime
                             cl-functions
                             interactive-only)
   fill-column 80
   blink-matching-paren nil
   uniquify-buffer-name-style (quote forward)
   recentf-max-saved-items 100
   history-length 1000
   x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
   enable-recursive-minibuffers t
   gc-cons-percentage 0.125
   undo-tree-mode-lighter ""
   ediff-diff-options "-w"
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   )

  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (setq-default truncate-lines t)

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (if
      (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setf default-buffer-file-coding-system 'utf-8))

  ;;(eval-after-load "yasnippet" '(diminish 'yas/minor-mode))
  (eval-after-load "button-lock" '(diminish 'button-lock-mode))
  (eval-after-load "org-indent" '(diminish 'org-indent-mode))
  (eval-after-load "helm-mode" '(diminish 'helm-mode))
  (eval-after-load "fixmee" '(diminish 'fixmee-mode))
  (eval-after-load "elpy" '(diminish 'elpy-mode))
  (eval-after-load "highlight-indentation" '(diminish 'highlight-indentation-mode))
  (eval-after-load "autopair" '(diminish 'autopair-mode))
  (eval-after-load "flycheck" '(diminish 'flycheck-mode))
  (eval-after-load "flyspell" '(diminish 'flyspell-mode))
  (eval-after-load "simple" '(diminish 'auto-fill-function))
  (eval-after-load "company" '(diminish 'company-mode))
  (eval-after-load "magit" '(diminish 'magit-auto-revert-mode))
#+END_SRC

** Customize
 El archivo customize sera éste. Cualquier modificación de Emacs que
 se haga a través de =customize= ira en éste archivo:

#+begin_src emacs-lisp
  (setf custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

 Me da la impresión que estas modificaciones pueden ser sobre-escritas
 si se cargan al puro inicio. De ahí que sean movidas a la ultima
 parte de la configuración.

Y cargamos el archivo, ¡No lo olvide!.

 #+begin_src emacs-lisp
   (load custom-file)
 #+end_src

** Modos de Emacs
   La configuración especifica a cada modo mayor, menor, o paquete con
   funcionalidades. Dividió por secciones.

   1. Después de que Emacs cargue la configuración por completo
     #+begin_src emacs-lisp
       (add-hook (quote after-init-hook)
                 (lambda ()
              (helm-mode 1)
              (helm-descbinds-mode)
              (projectile-global-mode)
              (helm-projectile-on)
              (global-flycheck-mode)
              ;;(auto-indent-global-mode)
              (autopair-global-mode)
              (global-pretty-mode t)
              (global-company-mode)
              (global-fixmee-mode 1)
              ;;(semantic-mode 1)
              ;;(global-move-dup-mode)
              (global-relative-buffers-mode)
              ;;(global-auto-highlight-symbol-mode)
              ;; abre la agenda
              (org-agenda-list 1)
              (delete-other-windows)
              ))
       (global-set-key (kbd "C-ç") 'undo)
       (global-set-key (kbd "M-¡") 'text-scale-increase)
       (global-set-key (kbd "M-'") 'text-scale-decrease)
       (define-key global-map (kbd "M-o") 'other-window)
       ;; salta a la nueva ventana creada despues de dividir la actual
       (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
       (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
     #+end_src

   2. Org-mode
      ¡Organiza tu vida usando Emacs!

      Se cambio la combinación de teclas para =er/expand-region= a C-¡ debido a que org-mode usa la
      combinación C-' para otra cosa.

     #+begin_src emacs-lisp
       (setf org-footnote-auto-adjust t
             org-directory (expand-file-name "~/org")
             org-archive-location (concat org-directory "/archivado.org::* Entradas viejas y archivadas")
             org-special-ctrl-k t
             org-ctrl-k-protect-subtree t ;; al usar C-k, evitamos perder todo el subarbol
             org-catch-invisible-edits 'show
             org-return-follow-link t
             org-blank-before-new-entry t
             org-startup-indented t
             org-startup-folded nil
             org-imenu-depth 5
             org-log-done 'time
             org-clock-persist 'history
             org-agenda-files (list (concat org-directory "/trabajo.org")
                                    (concat org-directory "/notas.org")
                                    (concat org-directory "/otros.org")
                                    (concat org-directory "/agenda.org"))
             org-default-notes-file (concat org-directory "/notas.org")
             org-capture-templates `(("p" "Cosas por hacer" entry (file+headline ,(concat org-directory "/otros.org") "Tareas")
                                      "* Tareas %?\n  %i\n  %a")
                                     ("d" "Diario" entry (file+datatree ,(concat org-directory "/diario.org"))
                                      "* %?\nInsertado el %U\n  %i\n  %a")
                                     ("a" "Apuntes importantes" entry (file+datatree "")
                                      "* Notas importantes %?\nNota importante del %U\n  %i\n  %a")
                                     ("g" "Agenda" entry (file+datetree+prompt ,(concat org-directory "/agenda.org"))
                                      "* Agenda %?\n Ingresado el %T\nProgramado para el %:date\n  %i\n"))
             org-todo-keywords '((sequence "POR HACER(p)" "EN PROGRESO(g)" "EN ESPERA(e@/!)" "EN REVISIÓN(r@/!)" "|" "CANCELADO(c@)" "TERMINADO(t!)"))
             org-todo-keyword-faces '(
                                      ("POR HACER" . (:foreground "black" :background "#ff4500" :weight bold))
                                      ("EN PROGRESO" . (:foreground "black" :background "#ffa500" :weight bold))
                                      ("EN ESPERA" . (:foreground "black" :background "#0000ff" :weight bold))
                                      ("EN REVISIÓN" . (:foreground "black" :background "#ffff00" :weight bold))
                                      ("TERMINADO" . (:foreground "black" :background "#32cd32" :weight bold))
                                      ("CANCELADO" . (:foreground "black" :background "#8b0000" :weight bold))
                                      )
             )

       (global-set-key (kbd "C-c l") 'org-store-link)
       (global-set-key (kbd "C-c a") 'org-agenda)
       (define-key global-map (kbd "C-c c") 'org-capture)
       (define-key org-mode-map (kbd "C-¡") 'er/expand-region)

       (org-clock-persistence-insinuate)
     #+end_src

   3. org-page
      Genera un blog estatico con [[https://github.com/kelvinh/org-page][org-page]].
      la variable =op/category-config-alist= fue redefinida (o al menos eso creo) porque de verdad quiero
      castellanizar los enlaces y sus títulos en el blog.

      #+BEGIN_SRC emacs-lisp
        (setf op/repository-directory "/home/jorge/Documentos/elblog.deshackra.com"
              op/site-domain "http://elblog.deshackra.com/"
              op/site-main-title "El blog de Shackra"
              op/site-sub-title "«No seas tan abierto de mente o tu cerebro se caerá» ~G.K. Chesterton"
              op/personal-github-link "https://github.com/shackra"
        )

        (defun op/do-publication-all ()
          "You could re-publish all org source files. To publish all files use this function"
          (op/do-publication t nil nil t)
        )
      #+END_SRC
   

   4. text-mode
      Esta configuración afecta a todos los modos texto en los buffers.
     
     #+BEGIN_SRC emacs-lisp
       (add-hook 'text-mode-hook
                  (lambda ()
                    (turn-on-auto-fill)
                    (flyspell-mode)
                    (set (make-local-variable 'fill-column) 110)
                    ))
     #+END_SRC

   5. HELM
     Es un paquete que esta en su propia liga. Éste paquete te
     ayudara a aumentar tu productividad, reducir tu calvicie y hará
     que tu ex-novia sexy que te dejo hace 20 años vuelva muerta de
     amor por vos ;)

     #+begin_src emacs-lisp
       ;; re-une la tecla TAB con el comando para ejecutar la acción persistente
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
       ;; Hace que la tecla TAB en la terminal funcione nuevamente
       (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
       (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
       ;; Lista las acciones disponibles usando C-z en lugar de TAB
       (define-key helm-map (kbd "C-z")  'helm-select-action) 

       (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
       (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
       (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

       (setf
        helm-google-suggest-use-curl-p t
        helm-scroll-amount 4
        helm-quick-update t
        helm-idle-delay 0.01
        helm-input-idle-delay 0.01
        helm-ff-search-library-in-sexp t
        
        helm-split-window-default-side 'other
        helm-split-window-in-side-p t
        helm-candidate-number-limit 200
        helm-M-x-requires-pattern 0
        helm-ff-file-name-history-use-recentf t
        helm-move-to-line-cycle-in-source t
        
        helm-buffers-fuzzy-matching t
        helm-boring-buffer-regexp-list '("\\` "
                                         "\\*helm"
                                         "\\*helm-mode"
                                         "\\*Echo Area"
                                         "\\*Minibuf"
                                         "\\*monky-cmd-process\\*"
                                         "\\*epc con"
                                         "\\*Compile-Log\\*"
                                         "\\*monky-process\\*"
                                         "\\*CEDET CScope\\*"
                                         "\\*Messages\\*"
                                         "\\*Flycheck error"
                                         "\\*Elpy"
                                         "\\*elpy-rpc"
                                         "\\*magit"
                                         "\\*.+(.+)"
                                         "elpa/.+")
        
        helm-boring-file-regexp-list (quote
                                      ("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$"
                                       "\\._darcs$" "\\.la$" "\\.o$" "~$"
                                       "\\.pyc$" "\\.elc$" "TAGS" "\#*\#"
                                       "\\.exe$" "\\.jar$" "\\.img$" "\\.iso$"
                                       "\\.xlsx$" "\\.epub$" "\\.docx$"))
        helm-ff-skip-boring-buffers t
        helm-truncate-lines t
        helm-projectile-sources-list '(helm-source-projectile-files-list
                                       helm-source-projectile-projects))

       (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
       (global-set-key (kbd "C-x f") 'helm-recentf)
       (global-set-key (kbd "M-y") 'helm-show-kill-ring)
       (global-set-key (kbd "C-c i") 'helm-imenu)
       (define-key global-map (kbd "C-x C-f") 'helm-find-files)
       (define-key global-map (kbd "C-x b") 'helm-buffers-list)
     #+end_src
     
   6. Projectile
     Es un paquete que nos permite el manejo de archivos en
     proyectos. Un proyecto, por definición, puede ser cualquier
     repositorio de código fuente de software, como =mercurial=,
     =git=, etc. También es posible definir un proyecto en una
     carpeta dejando caer en él un archivo =.projectile=, dentro de
     este archivo se puede definir qué archivos/carpetas ignorar y
     cuales no. Para más información ver la [[http://batsov.com/projectile/][pagina del proyecto]].

     #+begin_src emacs-lisp
       (setf
        projectile-completion-system 'helm
        projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-globally-ignored-files (quote ("TAGS" "\#*\#" "*~" "*.la"
                                            "*.o" "~" "*.pyc" "*.elc" "*.exe"
                                            "*.zip" "*.tar.*" "*.rar" "*.7z"))
        projectile-switch-project-action  'helm-projectile-find-file
        )
     #+end_src

   7. Multi-term
     Ofrece un excelente emulador de terminal *dentro* de Emacs

     #+begin_src emacs-lisp
       (setf multi-term-buffer-name "terminal "
             multi-term-program "/bin/bash"
             term-bind-key-alist (list (cons "C-c C-c" 'term-interrupt-subjob)
                                       (cons "C-p" 'previous-line)
                                       (cons "C-n" 'next-line)
                                       (cons "M-f" 'term-send-forward-word)
                                       (cons "M-b" 'term-send-backward-word)
                                       (cons "C-c C-j" 'term-line-mode)
                                       (cons "C-c C-k" 'term-char-mode)
                                       (cons "M-DEL" 'term-send-backward-kill-word)
                                       (cons "M-d" 'term-send-forward-kill-word)
                                       (cons "<C-left>" 'term-send-backward-word)
                                       (cons "<C-right>" 'term-send-forward-word)
                                       (cons "C-r" 'term-send-reverse-search-history)
                                       (cons "M-p" 'term-send-raw-meta)
                                       (cons "M-y" 'term-send-raw-meta)
                                       (cons "C-y" 'term-send-raw)))
       (add-hook 'term-mode-hook
                 (lambda ()
                   (yas-minor-mode -1)))
       (global-set-key [f1] 'multi-term)
       (global-set-key [C-next] 'multi-term-next)
       (global-set-key [C-prior] 'multi-term-prev)
     #+end_src

   8. company
     El paquete da funcionalidades de auto completado. Esta opcion es
     cada día más popular como remplazo a =auto-complete=.

     #+begin_src emacs-lisp
       (setf company-idle-delay 0.3
             company-tooltip-limit 20
             company-minimum-prefix-length 2
             company-echo-delay 0
             company-auto-complete nil)
       
       (add-to-list 'company-backends 'company-dabbrev t)
       (add-to-list 'company-backends 'company-ispell t)
       (add-to-list 'company-backends 'company-files t)
       (add-to-list 'company-backends 'company-yasnippet t)
     #+end_src
     
   9. Python
      Configuraciones para mi modo estrella: Python-mode!
      Estoy omitiendo usar auto-indent-mode debido a un [[https://github.com/mlf176f2/auto-indent-mode.el/issues/43][fallo]] en el
      modo Python. Por lo tanto, estoy reuniendo la tecla RET con la
      función =newline-and-indent= que funciona de lo más bien.

     #+begin_src emacs-lisp
       (elpy-enable)
       (setf python-indent-guess-indent-offset nil
             python-indent 4
             python-indent-offset 4)
       (add-hook 'python-mode-hook
                 (lambda ()
                   (nlinum-mode)
                   (hlinum-activate)))
     #+end_src

   10. discover-my-major
      Éste paquete nos muestra las combinaciones de teclas posibles
      para el modo mayor en el que estamos actualmente, todo lo que hay
      que hacer es recordar una combinación especifica de teclas.

      Esta combinación por defecto es C-h C-m ;)

      #+begin_src emacs-lisp
        (global-set-key (kbd "C-h C-m") 'discover-my-major)
      #+end_src

   11. Expand-region
     Provee una manera fácil de hacer selección de elementos en el
     buffer con presionar solo una tecla. Puede ver éste paquete en
     acción en este episodio de
     [[http://emacsrocks.com/e09.html][Emacs Rocks]].

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-'") 'er/expand-region)
     #+end_src

   12. multiple-cursos
     Marca varias partes del buffer dependiendo de la selección que
     hagas.
     
     #+begin_src emacs-lisp
       (define-key global-map (kbd "C-+") 'mc/mark-next-like-this)
       (define-key global-map (kbd "M-+") 'mc/mark-previous-like-this)
       (define-key global-map (kbd "C-M-+") 'mc/mark-all-like-this)
       ;; Para diseñadores web, marca la etiqueta de apertura y cierre
       ;;(define-key sgml-mode-map (kbd "C-'") 'mc/mark-sgml-tag-pair) ;;Symbol's value as variable is void: sgml-mode-map
     #+end_src

     este paquete puedes tener configuraciones de teclas muy variadas,
     lo mejor es que visites la pagina del proyecto en Github para más
     [[https://github.com/magnars/multiple-cursors.el#basic-usage][información]]. Las teclas usadas reflejan la reducida cantidad que existen en mi laptop.
     
   13. flycheck-mode
     revisión-al-vuelo de la sintaxis mientras editas código. Hace una
     selección automática del mejor revisor de sintaxis que dispongas.
     
     Tiene soporte para muchos lenguajes. Lo recomiendo por encima de
     flymake.

     #+begin_src emacs-lisp
       (setf
        flycheck-disabled-checkers '(emacs-lisp-checkdoc) ;; deshabilita el majadero revisor de documentación
        flycheck-indication-mode 'right-fringe
        )
     #+end_src

   14. web-mode
     Un modo mayor autónomo que permite la edición de plantillas web:
     documentos HTML con partes embebidas (CSS/Javascript) y bloques
     (del lado de cliente/servidor)

     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.[gj]sp\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)) ;; para plantillas de Django.
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)) ;; para editar archivos HTML
     #+end_src

   15. mu4e
     Un versátil cliente de correo electrónico. Éste paquete se carga
     de manera condicional si esta instalado en el sistema del
     usuario. Desgraciadamente no puedes instalarlo desde Melpa o
     algún otro repositorio de paquetes de Emacs.

     Correos electrónicos y otros datos son traídos de un archivo
     secreto ;)

     Para saber como configurar mu4e para escribir correos con
     diferentes cuentas de correo, puedes mirar la
     [[http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html][documentación]] es aconsejable que esa configuración viva en el
     archivo secreto...

     #+begin_src emacs-lisp
       (when (file-exists-p "/usr/share/emacs/site-lisp/mu4e/")
         (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
         (autoload 'mu4e "mu4e" "Mail client based on mu (maildir-utils)." t)
         (require 'org-mu4e)
         (setf mu4e-view-show-images t)
         (global-key-binding (kbd "[f7]") 'mu4e)
         (when (fboundp 'imagemagick-register-types)
           (imagemagick-register-types))
         (setf
          ;; html2text es un paquete que debe estar instalado en tu sistema
          mu4e-html2text-command "html2text -width 100 -style pretty -nobs"
          mu4e-get-mail-command "offlineimap"
          mu4e-maildir "/home/jorge/correo"
          mu4e-update-interval 60
          mu4e-auto-retrieve-keys t
          mu4e-headers-leave-behavior 'apply
          mu4e-headers-visible-lines 20
          mu4e-hide-index-messages t
          message-kill-buffer-on-exit t
          mu4e-attachment-dir  "~/Descargas"
          mu4e-maildir       "~/correo" ;; top-level Maildir
          mu4e-sent-folder   "/principal/INBOX/Sent" ;; folder for sent messages
          mu4e-drafts-folder "/principal/INBOX/Drafts" ;; unfinished messages
          mu4e-trash-folder  "/principal/INBOX/Trash"  ;; trashed messages
          mu4e-refile-folder "/principal/INBOX/Archives" ;; Mensajes salvados
          smtpmail-stream-type  'ssl
          smtpmail-smtp-service 465
          message-send-mail-function 'smtpmail-send-it
          )
         (load (expand-file-name "mu4e-conf.secret.gpg" user-emacs-directory) t)
       
         ;; funcion para seleccionar la cuenta con la que se va a responder a un email
         (defun my-mu4e-set-account ()
           "Set the account for composing a message."
           (let* ((account
                   (if mu4e-compose-parent-message
                       (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                         (string-match "/\\(.*?\\)/" maildir)
                         (match-string 1 maildir))
                     (completing-read (format "Componer correo con la cuenta: (%s) "
                                              (mapconcat #'(lambda (var) (car var))
                                                         my-mu4e-account-alist "/"))
                                      (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                      nil t nil nil (caar my-mu4e-account-alist))))
                  (account-vars (cdr (assoc account my-mu4e-account-alist))))
             (if account-vars
                 (mapc #'(lambda (var)
                           (set (car var) (cadr var)))
                       account-vars)
               (error "Cuenta de correo no encontrada"))))
       
         ;; y enganchamos la funcion
         (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
         )
     #+end_src

   16. dired y dired+
     Extiende funcionalidades de =dired=. Se agrega una función personalizada que mata el buffer al presionar
       =q=, porque verdaderamente no quiero saber nada más de esa carpeta en caso de desear salir de ella.

     #+begin_src emacs-lisp
       (defun dired-quit-window-kill-buffer ()
         "Además de matar el buffer, cierra la ventana"
         (interactive)
         (let ((win-curr (selected-window))
               (win-other (next-window)))
           (select-window win-other)
           (kill-this-buffer)
           (select-window win-curr)))

       (setf dired-dwim-target t)
       (define-key ctl-x-map   "d" 'dired)
       (define-key ctl-x-4-map "d" 'diredp-dired-for-files-other-window)
       (define-key dired-mode-map (kbd ".") 'dired-up-directory)
       (define-key dired-mode-map (kbd "q") 'dired-quit-window-kill-buffer)
     #+end_src

   17. ace-jump
     hace que el cursor se mueva por todo el buffer con presionar
     pocas teclas.

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
       (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
     #+end_src

   18. magit
     Git en Emacs.

     A decir verdad, amo a Mercurial y odio a Git.

     #+begin_src emacs-lisp
       (define-key global-map [C-f12] 'magit-status)
     #+end_src

   19. monky
     Mercurial en Emacs

     Amo Mercurial ;)

     #+begin_src emacs-lisp
       (define-key global-map [f12] 'monky-status)
       (setf monky-process-type 'cmdserver)
     #+end_src

   20. CEDET
     Convierte a Emacs en todo un IDE. La configuración se carga de manera condicional

     #+begin_src emacs-lisp
       ;; (when (file-exists-p (expand-file-name "site-packages/cedet/cedet-devel-load.el" user-emacs-directory))
       ;;   (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
       ;;   (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
       ;;   (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode -1)
       ;;   (add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode)
       ;;   (add-to-list 'semantic-default-submodes 'global-semantic-idle-local-symbol-highlight-mode -1)
       ;;   (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
       ;;   (add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
         
       ;;   (when (cedet-cscope-version-check t)
       ;;     (semanticdb-enable-cscope-databases))
         
         ;; Symbol's function definition is void: semantic-load-enable-primary-exuberent-ctags-support
         ;;(when (cedet-ectag-version-check t)
         ;;  (semantic-load-enable-primary-exuberent-ctags-support))
         ;; configuración de algunos proyectos
         ;; (ede-cpp-root-project "SantoTomas"
         ;;                       :name "santo Tomás de Aquino"
         ;;                       :file "/home/jorge/coders/desarrollo/tomasdeaquino/CMakeLists.txt"
         ;;                       :include-path '("/include"))
         
         ;; (ede-cpp-root-project "GodotEngine"
         ;;                       :name "Godot Engine"
         ;;                       :file "/home/jorge/coders/desarrollo/godot/README.md"
         ;;                       :include-path '("/include"))
       ;;)
     #+end_src

   21. Smart modeline
       el modeline, pero más inteligente.

       #+begin_src emacs-lisp
         (sml/setup)
         (sml/apply-theme 'respectful)

         (add-to-list 'sml/replacer-regexp-list '("^~/coders/" ":Código:") t)
         (add-to-list 'sml/replacer-regexp-list '("^:Código:PPH/clientes/" ":PPH:") t)
       #+end_src

   22. Visual-regexp y Visual-regexp-steroids
       expresiones regulares con algo más moderno que lo ofrecido por
       Emacs:

       #+begin_src emacs-lisp
         (define-key global-map (kbd "C-c r") 'vr/replace)
         (define-key global-map (kbd "C-c q") 'vr/query-replace)
         (define-key global-map (kbd "C-c m") 'vr/mc-mark)
         (define-key esc-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
         (define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s
       #+end_src

   23. Para todos los modos mayores de programación
    En lo personal, me gustaría que al escribir los comentarios en mi
    código fuente, las lineas se rompan al llegar a la columna 79.

    #+begin_src emacs-lisp
      (add-hook 'prog-mode-hook
                (lambda ()
                  (set (make-local-variable 'fill-column) 79)
                  (set (make-local-variable 'comment-auto-fill-only-comments) t)
                  (auto-fill-mode t)
                  (toggle-truncate-lines)
                  (highlight-numbers-mode)
                  (hes-mode)
                  (highlight-blocks-mode)
                  ;; redefinimos la tecla RET para que inserte un salto de linea y la
                  ;; idente de manera adecuada.
                  (define-key prog-mode-map (kbd "RET") 'newline-and-indent))
                )
    #+end_src

   24. golang
       configuración para golang en emacs.

       #+begin_src emacs-lisp
         (add-hook 'go-mode-hook (lambda ()
                                   (local-set-key (kbd "C-c C-r") 'go-remove-unused-imports)
                                   (local-set-key (kbd "C-c i") 'go-goto-imports)
                                   (local-set-key (kbd "M-.") 'godef-jump)
                                   (set (make-local-variable 'company-backends) '(company-go))
                                   (go-eldoc-setup)
         ))
       #+end_src
       
   25. rustlang
       configuración para rustlang en Emacs. Yo aun no olvido lo
       hipócrita que es Mozilla y "su web abierta" por lo que le
       hicieron (o no hicieron, si quiere) con Brendan Eich. LAS
       PERSONAS TIENEN EL DERECHO A FINANCIAR CON SU DINERO AQUELLAS
       CAMPAÑAS EN FAVOR DEL MATRIMONIO Y LA FAMILIA, NO HAY RAZÓN
       PARA QUE SEAN PERSEGUIDAS Y PIERDAN SUS TRABAJOS PORQUE LOS
       FASCISTAS DEL MOVIMIENTO LGTB QUIEREN QUE QUIENES PIENSAN
       DISTINTOS DE ELLOS SE MANTENGAN IGNORANTES SOBRE [[http://whatismarriagebook.com/][QUÉ ES EL
       MATRIMONIO]] EN REALIDAD Y CUAL ES SU FUNDAMENTO. ¡Mozilla,
       hipócrita, cuanta tolerancia y respeto hacía los demás!.
       
       #+begin_src emacs-lisp
         ;;nada por agregar, aun...
       #+end_src

   26. C++
       configuración para habilitar auto-completado en Emacs para la
       programación en el lenguaje C++

       #+begin_src emacs-lisp
         (require 'cmake-project)
         
         (defun maybe-cmake-project-hook ()
           (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
         
         (defun my-irony-mode-hook ()
           (define-key irony-mode-map [remap completion-at-point]
             'irony-completion-at-point-async)
           (define-key irony-mode-map [remap complete-symbol]
             'irony-completion-at-point-async))
         
         (add-hook 'c++-mode-hook
                   (lambda ()
                     (irony-mode)
                     (set (make-local-variable 'company-backends) '(company-c-headers 
                                                                    company-irony
                                                                    company-yasnippet
                                                                    ))
                     (maybe-cmake-project-hook)
         ))
         
         (add-hook 'irony-mode-hook 
                   (lambda ()
                     (company-irony-setup-begin-commands)
                     (my-irony-mode-hook)
         ))
       #+end_src

   27. CMake
       configuración de CMake para Emacs
       
       #+begin_src emacs-lisp
         (require 'cmake-mode)
         
         (setq auto-mode-alist
               (append
                '(("CMakeLists\\.txt\\'" . cmake-mode))
                '(("\\.cmake\\'" . cmake-mode))
                auto-mode-alist))
         
         (add-hook 'cmake-mode-hook 
                   (lambda ()
                     (set (make-local-variable 'company-backends) '(company-cmake
                                                                    company-yasnippet))
                     ))
       #+end_src

   28. gancho para antes de guardar el archivo
      puede que gustemos de hacer algo con el archivo antes de
      guardarlo. Acá se enganchan un par de funciones.

      #+begin_src emacs-lisp
        (add-hook 'before-save-hook 'py-autopep8-before-save)
        (add-hook 'before-save-hook 'web-beautify-html-buffer t t)
        (add-hook 'before-save-hook 'gofmt-before-save)
       #+end_src
