#+TITLE: Compilar Emacs desde las fuentes

* Introducción
Por varias razones uno quizás quiera tener Emacs compilado directamente del repositorio Git. En esta sección se delinean instrucciones con comandos que pueden ser ejecutados aquí mismo.
* Opciones de compilación
Abajo se exponen algunas variables de compilación, use =t= o =nil= para activar o desactivar opciones de compilación según sus necesidades, *es obligatorio evaluar el bloque de código para tener a disposición las variables*

#+begin_src emacs-lisp :tangle no :resutls silent
  (setf
   ;; corre pruebas, puede fallar
   emacs--compilacion-check nil
   ;; utiliza CLANG
   emacs--compilacion-clang nil
   ;; habilita optimización link-time
   emacs--compilacion-lto nil
   ;; binario solo para CLI
   emacs--compilacion-cli nil
   ;; evita usar algún kit
   emacs--compilacion-nokit nil
   ;; Usa Lucid, como XEmacs
   emacs--compilacion-lucid nil
   ;; Usa GTK2
   emacs--compilacion-gtk2 nil
   ;; Habilita soporte para gpm
   emacs--compilacion-gpm nil
   ;; Habilita soporte para tabla internacional m17n si lo necesita
   emacs--compilacion-m17n nil
   ;; soporte para OTF
   emacs--compilacion-otf t
   ;; altamente experimental, el mantenedor brilla por su ausencia
   emacs--compilacion-cairo nil
   ;; habilita widgets de GTK+ sacados de webkit2gtk. Usable.
   emacs--compilacion-xwidgets t
   ;; genera e instala la documentación en HTML
   emacs--compilacion-docs-html nil
   ;; genera e instala la documentación en PDF
   emacs--compilacion-docs-pdf nil
   ;; soporte para librería Imagemagick 6, lleno de bugs pero útil.
   emacs--compilacion-magik t
   ;; evita que se comprimas los archivos .el
   emacs--compilacion-nogz nil
   )
#+end_src

#+RESULTS:

* Clonación de las fuentes
clonamos el repositorio donde se encuentra Emacs, esto puede congelar Emacs por unos minutos...
#+begin_src sh :results silent
  if[ ! -f ~/emacs/source/.git ]; then
      git clone --depth 1 https://github.com/emacs-mirror/emacs.git ~/emacs/source
  else
      cd ~/emacs/source/ && git pull origin master
  fi
#+end_src
* Compilación
al ejecutar el bloque de código escrito en Emacs lisp un comando será generado el cual por si solo hace todo lo necesario para compilar Emacs
#+begin_src emacs-lisp :tangle no :results value code
  (let ((comando '("cd ~/emacs/source" "pwd"))
        ;; en Arch Linux puede usar emacs-git
        (dependencias '("autoconf" "automake" "libtool" "texinfo" "build-essential" "libgnutls28-dev" "libxml2-dev" "jansson" "git"))
        (conf '("--prefix=/usr"
                "--sysconfdir=/etc"
                "--libexecdir=/usr/lib"
                "--localstatedir=/var"
                "--mandir=/usr/share/man"
                "--with-gameuser=:games"
                "--with-sound=alsa"
                "--with-modules"
                "--without-gconf"
                "--without-gsettings"
                )))
    (if emacs--compilacion-clang
        (progn
          (setf comando (append comando
                                '("export CC=/usr/bin/clang;\n"
                                  "export CXX=/usr/bin/clang++;\n"
                                  "export CPP=\"/usr/bin/clang -E\";\n"
                                  "export LDFLAGS+=' -fuse-ld=lld';\n")))
          (setf dependencias (append dependencias '("clang" "lld")))
          (add-to-list 'conf "--enable-autodepend"))
      (setf comando (append comando '("export LD=/usr/bin/ld.gold;\n" "export LDFLAGS+=\" -fuse-ld=gold\";\n"))))
    (when emacs--compilacion-nokit
      (setf dependencias (append dependencias '("libdbus-1-dev"
                                                "hicolor-icon-theme"
                                                "libxinerama-dev"
                                                "libxrandr-dev"
                                                "liblcms2-dev"
                                                "librsvg2-dev"))))
    (when emacs--compilacion-lucid
      (setf dependencias (append dependencias '("libdbus-1-dev"
                                                "hicolor-icon-theme"
                                                "libxinerama-dev"
                                                "libxrandr-dev"
                                                "liblcms2-dev"
                                                "librsvg2-dev"
                                                "xaw3dg-dev"))))
    (if emacs--compilacion-gtk2
        (setf dependencias (append dependencias '("libgtk2.0-dev")))
      (setf dependencias (append dependencias '("libgtk-3-dev"))))

    (when emacs--compilacion-gpm
      (setf dependencias (append dependencias '("libgpm-dev"))))

    (when emacs--compilacion-m17n
      (setf dependencias (append dependencias '("libm17n-dev"))))

    (when (and emacs--compilacion-otf (not emacs--compilacion-m17n))
      (setf dependencias (append dependencias '("libotf-dev"))))

    (when emacs--compilacion-magik
      (setf dependencias (append dependencias '("libgraphicsmagick1-dev" "libjpeg-dev" "libgif-dev"))))

    (when emacs--compilacion-cairo
      (setf dependencias (append dependencias '("libcairo2-dev"))))

    (when emacs--compilacion-xwidgets
      (when (not (or emacs--compilacion-gtk2 emacs--compilacion-lucid emacs--compilacion-nokit emacs--compilacion-cli))
        (setf dependencias (append dependencias '("libwebkit2gtk-3.0-dev")))
        (add-to-list 'conf "--with-xwidgets")))

    (when emacs--compilacion-docs-pdf
      (setf dependencias (append dependencias '("texlive"))))

    (when emacs--compilacion-lto
      (add-to-list 'conf "--enable-link-time-optimization"))

    (when emacs--compilacion-cli
      (add-to-list 'conf "--without-x --with-x-toolkit=no --without-xft --without-lcms2 --without-rsvg"))

    (when emacs--compilacion-nokit
      (add-to-list 'conf "--with-x-toolkit=no --without-toolkit-scroll-bars --with-xft --without-xaw3d"))

    (when emacs--compilacion-lucid
      (add-to-list 'conf "--with-x-toolkit=lucid --with-xft --with-xaw3d"))

    (if emacs--compilacion-gtk2
        (add-to-list 'conf "--with-x-toolkit=gtk2 --without-gsettings --without-xaw3d")
      (add-to-list 'conf "--with-x-toolkit=gtk3 --without-xaw3d"))

    (unless emacs--compilacion-gpm
      (add-to-list 'conf "--without-gpm"))

    (unless emacs--compilacion-m17n
      (add-to-list 'conf "--without-m17n-flt"))

    (if emacs--compilacion-magik
        (add-to-list 'conf "--with-imagemagick")
      (add-to-list 'conf "--without-imagemagick"))

    (when emacs--compilacion-cairo
      (add-to-list 'conf "--with-cairo"))

    (when emacs--compilacion-nogz
      (add-to-list 'conf "--without-compress-install"))

    (add-to-list 'comando (mapconcat 'identity (append '("sudo apt-get install -y ") dependencias) " ") t)

    (add-to-list 'comando (concat "./configure " (mapconcat 'identity conf " ")) t)

    (add-to-list 'comando "make" t)

    `(shell-command ,(mapconcat 'identity comando "\n")))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
(shell-command "cd ~/emacs/source\npwd\nexport LD=/usr/bin/ld.gold;\n\nexport LDFLAGS+=\" -fuse-ld=gold\";\n\nsudo apt-get install -y  autoconf automake libtool texinfo build-essential libgnutls28-dev libxml2-dev jansson git libgtk-3-dev libotf-dev libgraphicsmagick1-dev libjpeg-dev libgif-dev libwebkit2gtk-3.0-dev\n./configure --with-imagemagick --without-m17n-flt --without-gpm --with-x-toolkit=gtk3 --without-xaw3d --with-xwidgets --prefix=/usr --sysconfdir=/etc --libexecdir=/usr/lib --localstatedir=/var --mandir=/usr/share/man --with-gameuser=:games --with-sound=alsa --with-modules --without-gconf --without-gsettings\nmake")
#+end_src

#+RESULTS:
: 1
