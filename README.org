#+TITLE: Configuración de GNU Emacs
#+AUTHOR: Jorge Javier Araya Navarro (Shackra Seaslug)
#+EMAIL: jorge@esavara.cr
#+OPTIONS: toc:5 num:nil ^:nil
#+STARTUP: overview

#+begin_example
                                    🕇
                 Actiones nostras tibi comítimus, Dómine,
                  ut ad maiorem gloriam tuam repleamur.
                                  🕇   🕇
#+end_example

* Introducción
Esta es mi configuración de GNU Emacs, casi siempre le estoy haciendo ajustes.

La configuración se hospeda en [[https://gitlab.com/shackra/emacs/][GitLab]], la configuración que ves en [[https://github.com/shackra/emacs/][Github]] es una copia espejo. El archivo =init.el= contiene código Elisp para hacer funcionar este formato de configuración.

Mi configuración utiliza =use-package= para mantener una separación sana entre porciones de código Elisp. Para conocer que /keywords/ pueden usarse con use-package puede visitar el enlace [[https://jwiegley.github.io/use-package/keywords/][keywords]].

#+BEGIN_SRC emacs-lisp
  ;; Resuelve problema en Windows 10 con codificaciones incorrectas
  (define-coding-system-alias 'cp65001 'utf-8)

  ;; para MacOS
  (when (eq window-system 'ns)
    (setenv "DICPATH" (concat (getenv "HOME") "/Library/Spelling")))

  ;; Arreglo para LaTeX con Emacs en MacOS "El Capitan"
  (when (eq system-type 'darwin)
    (setf exec-path (append exec-path '("/Library/TeX/texbin"))))

  (unless (memq system-type '(ms-dos windos-nt cygwin))
    (require 'exec-path-from-shell)
    (exec-path-from-shell-initialize))

  ;; En caso de que /usr/local/bin no este agregado
  (when (eq system-type 'darwin)
    (setenv "PATH" "Library/TeX/texbin/:$PATH" t))

  ;; si mu4e esta disponible en el sistema lo agrega a load-path
  (when (file-exists-p "/usr/share/emacs/site-lisp/mu4e")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e"))

  (defun shackra-org-confirm-babel-evaluate (lang body)
    (not (or (string= lang "emacs-lisp") (string= lang "ditaa"))))
  (setf org-confirm-babel-evaluate #'shackra-org-confirm-babel-evaluate)

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
#+END_SRC
* Información personal
La ubicación geográfica usada es la de San José, Costa Rica siendo tan pequeño hace innecesario especificar nuestra ubicación geográfica exacta.
#+BEGIN_SRC emacs-lisp
  (setf user-full-name "Jorge Javier Araya Navarro"
        user-mail-address "jorge@esavara.cr"
        calendar-location-name "Siquirres, CR"
        calendar-latitude 9.935607
        calendar-longitude -84.1833856
        calendar-christian-all-holidays-flag t
        calendar-date-style 'european)
#+END_SRC
* Custom.el
 El archivo customize es completamente innecesario y todas las variables modificadas usando =Customize= fueron migradas. Cualquier cambio que se haga con =Customize= no será preservado *pase lo que pase*. Para permitir que decisiones sobre variables de archivos o directorios sean conservados se asigna un archivo en la carpeta temporal del sistema para preservar temporalmente lo que se guarde ahí.

#+BEGIN_SRC emacs-lisp
  (setf custom-file (expand-file-name (format "custom-%s.el" (format-time-string "%s")) (temporary-file-directory)))
#+END_SRC
** Código adicional
Evalúa código elisp adicional.
#+begin_src emacs-lisp
  (load-file (expand-file-name "codigo elisp adicional.el" user-emacs-directory))
#+end_src
* Paquetes de extensiones
** Utilidades
*** noflet
Nos permite sobreescribir localmente funciones al estilo de =flet=, pero con acceso a la función original a través del símbolo =this-fn=.
#+BEGIN_SRC emacs-lisp
  (use-package noflet)
#+END_SRC
*** TRAMP
Transparent Remote Access, Multiple Protocols: paquete para editar archivos remotos. [[https://www.gnu.org/software/tramp/][Manual de usuario]].
#+BEGIN_SRC emacs-lisp
  (setf tramp-default-method "ssh")
  (setf tramp-encoding-shell "/bin/zsh")
#+END_SRC
*** Bug hunter para configuración de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package bug-hunter)
#+END_SRC
*** Configuración sana para GNU Emacs
configuración sana de ciertas opciones en Emacs
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :init
    (setq-default cursor-type 'box)
    (set-default 'indicate-empty-lines t)
    (setq-default truncate-lines t)
    (if (boundp 'buffer-file-coding-system)
        (setq-default buffer-file-coding-system 'utf-8)
      (setf buffer-file-coding-system 'utf-8))
    :custom
    (blink-cursor-blinks 1)
    (blink-cursor-interval 1)
    (x-underline-at-descent-line t)
    (save-interprogram-paste-before-kill t)
    (bookmark-save-flag 1)
    (inhibit-startup-message t )
    (initial-scratch-message nil)
    (line-spacing 0)
    (make-backup-files nil)
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    (echo-keystrokes 0.1)
    (shift-select-mode nil)
    (fill-column 80)
    (blink-matching-paren t)
    (history-length 1000)
    (x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
    (enable-recursive-minibuffers t)
    (gc-cons-percentage 0.125 )
    (ediff-diff-options "-w")
    (ediff-split-window-function 'split-window-horizontally)
    (buffer-file-coding-system 'utf-8)
    (x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
    :config
    ;; activa transient-mark-mode
    (transient-mark-mode 1)
    (blink-cursor-mode)
    (ido-mode nil)
    (tooltip-mode -1)
    (recentf-mode 1)
    (savehist-mode 1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-auto-revert-mode 1)
    (column-number-mode 1)
    (global-subword-mode 1)
    (global-font-lock-mode 1)
    (delete-selection-mode 1)
    (prefer-coding-system       'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (add-to-list 'default-frame-alist '(tty-color-mode . -1)))
#+END_SRC
**** Tipografía
***** Ligaduras
#+begin_src emacs-lisp
  (use-package ligature
    :straight (ligature :type git :host github :repo "mickeynp/ligature.el")
    :init (require 'cl)
    :config
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
                                         "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
                                         "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
                                         "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
                                         ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
                                         "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
                                         "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
                                         "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
                                         ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
                                         "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
                                         "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
                                         "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
                                         "x" ":" "+" "+" "*"))
    (global-ligature-mode t))
#+end_src
***** Configura tipografías unicode
aconsejado por https://www.masteringemacs.org/article/unicode-ligatures-color-emoji para obtener emojis coloridos
#+begin_notes
Hay que instalar algunas tipografías antes.

sudo pacman -S noto-fonts noto-fonts-emoji ttf-symbola

Y por ultimo descargar esta tipografía:

http://www.quivira-font.com/files/Quivira.ttf ; o Quivira.otf
#+end_notes
#+begin_src emacs-lisp
  ;; codigo via https://emacs.stackexchange.com/a/60461/690
  (defun shackra-transform-unicode-fonts-block-font-mapping (lead-font follow-font font-mapping)
    (mapcar
     (lambda (l)
       (list (car l)
             (mapcan
              (lambda (x)
                (if (string= x lead-font)
                    (list x follow-font)
                  (list x)))
              (cadr l))))
     font-mapping))

  (use-package unicode-fonts
    :config
    (setf unicode-fonts-block-font-mapping
          (shackra-transform-unicode-fonts-block-font-mapping
           "Apple Color Emoji" "Noto Color Emoji" unicode-fonts-block-font-mapping))
    (when (daemonp)
      (add-hook 'after-make-frame-functions (lambda (frame) (unicode-fonts-setup))))
    (unicode-fonts-setup))
#+end_src
***** configuración de tipografías en uso
Función que comprueba disponibilidad de tipografías en el sistema, además de establecer la tipografía.
#+BEGIN_SRC emacs-lisp
  (defun fc-list ()
    "Genera una lista de tipografías disponibles usando fc-list"
    (if (executable-find "fc-list")
        (split-string (shell-command-to-string "fc-list --format='%{family[0]}\n' | sort | uniq") "\n")
      (progn
        (warn "fc-list no disponible en $PATH")
        nil)))

  (defun font-exists-p (font)
    "Comprueba si una tipografía FONT existe.

  Código parcialmente sacado de https://redd.it/1xe7vr"
    (let ((font-list (or (font-family-list) (fc-list))))
      (if (member font font-list)
          t
        nil)))

  (defun font-pt-to-height (pt)
    "Transforma una altura en puntos PT a altura de `face-attribute'."
    ;; el valor es de 1/10pt, por tanto 100 seria equivalente a 10pt, etc.
    (* pt 10))

  (defun font-setup (&optional frame)
    (cond ((font-exists-p "Fira Code")
           (set-face-attribute 'default frame :height (font-pt-to-height 13) :font "Fira Code"))))

  (defun font-setup-frame (frame)
    "configura la tipografía por cada nuevo marco FRAME creado."
    (select-frame frame)
    (when (display-graphic-p)
      (font-setup frame)))

  (if (daemonp)
      (add-hook 'after-make-frame-functions #'font-setup-frame)
    (font-setup))
#+END_SRC
*** View large files
Permite a Emacs manejar archivos enormes. Automáticamente se activa para archivos mayores a =large-file-warning-threshold=.
#+BEGIN_SRC emacs-lisp
  (use-package vlf-setup
    :straight vlf
    :init
    (setf vlf-application 'dont-ask))
#+END_SRC
*** secreto
Saca cualquier rastro de tus archivos y datos privados de tu configuración de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package secreto
    :hook (emacs-startup . secreto-load)
    :straight (secreto :type git :host gitlab :repo "shackra/secreto"))
#+END_SRC
*** secretaria
Mi intento de hacer algo mejor que [[*=appt=][=appt-mode=]].
#+BEGIN_SRC emacs-lisp
  (use-package secretaria
    :init
    (setf secretaria-clocked-task-save-file "~/.secretaria-tarea")
    (add-hook 'after-init-hook #'secretaria-unknown-time-always-remind-me))
#+END_SRC
*** Flymake
#+begin_src emacs-lisp
  (use-package flymake
    :straight (flymake :type built-in))
#+end_src
*** =swiper= & =ivy=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:46]
:END:
Reemplazo para =I-search=, Swiper es el nombre en inglés de Zorro, un personaje de la serie /Dora la exploradora/.

Teclas
- @@html:<kbd>C-s</kbd>@@  :: Buscar en buffer, reemplazando a =isearch-forward=
- @@html:<kbd>C-r</kbd>@@ :: Buscar en buffer, reemplazando a =isearch-backward=
- @@html:<kbd>C-c C-r</kbd>@@ :: Continua la ultima sesión de completado
- @@html:<kbd>M-x</kbd>@@ :: Fragmentos de texto /matados/ para pegar
- @@html:<kbd>C-h f</kbd>@@ :: Describe funciones
- @@html:<kbd>C-h v</kbd>@@ :: Describe variables
- @@html:<kbd>C-h b</kbd>@@ :: Describe atajos de teclado disponibles
- @@html:<kbd>C-x 8 RET</kbd>@@ :: Lista e inserta caracteres Unicode
- @@html:<kbd>C-x f</kbd>@@ :: Lista archivos visitados recientemente
- @@html:<kbd>C-x C-f</kbd>@@ :: Visita un archivo
- @@html:<kbd>C-x b</kbd>@@ :: Cambia de buffer
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after (projectile counsel)
    :commands (counsel-projectile
               counsel-projectile-switch-project
               counsel-projectile-switch-to-buffer))

  (use-package counsel
    :after (ivy org)
    :commands (counsel-org-tag dired)
    :bind (:map global-map
                ("M-x" . counsel-M-x)
                ("M-y" . counsel-yank-pop)
                :map help-map
                ("f" . counsel-describe-function)
                ("v" . counsel-describe-variable)
                ("b" . counsel-descbinds)
                :map ctl-x-map
                ("8 RET" . counsel-unicode-char)
                ("l" . counsel-locate)
                ("f" . counsel-recentf)
                ("b" . counsel-switch-buffer))
    :config
    (global-set-key [remap org-set-tags-command] #'counsel-org-tag))

  (use-package ivy-hydra
    :after (counsel-projectile))

  (use-package ivy-posframe
    :diminish ivy-posframe-mode
    :after (ivy)
    :hook (emacs-startup . ivy-posframe-mode)
    :custom
    (ivy-posframe-display-functions-alist
     '((swiper          . ivy-display-function-fallback)
       (swiper-isearch  . ivy-display-function-fallback)
       (complete-symbol . ivy-posframe-display-at-point)
       (counsel-M-x     . ivy-posframe-display-at-frame-center)
       (t               . ivy-posframe-display-at-frame-center)))
    (ivy-posframe-parameters
     '((left-fringe . 10)
       (right-fringe . 10)))
    (ivy-posframe-hide-minibuffer t)
    (posframe-mouse-banish t))

  (defcustom shackra-ivy-ignore-buffers '("\\*weechat-relay" "\\*Messages\\*" "\\*elfeed-log\\*"
                                          "\\*Help\\*" "\\*Compile-Log\\*" "\\*anaconda-mode\\*"
                                          "\\*prodigy-.*" "\\*godoc .*" "\\*magit-.*" "\\magit-.*"
                                          "\\*Slack Log.*" "\\*tide" "\\*Flycheck.*" "\\*lsp-.*"
                                          ".*-ls" "\\*go-bingo.*" "\\*Flymake log\\*" "\\*straight-process\\*"
                                          "\\*pushmail-mbsync\\*" "\\*vc\\*" "\\*gopls.*" "\\*Disabled Command\\*"
                                          "\\*EGLOT ")
    "Lista de buffers a ignorar en ivy.")

  (use-package ivy
    :demand t
    :bind (:map global-map
                ("C-c C-r" . ivy-resume))
    :custom
    (ivy-use-virtual-buffers nil)
    (ivy-count-format "(%d/%d) ")
    (ivy-height 20)
    :config
    (dolist (ignore-this shackra-ivy-ignore-buffers)
      (add-to-list 'ivy-ignore-buffers ignore-this))
    (add-hook 'emacs-startup-hook #'ivy-mode)
    (with-eval-after-load "projectile"
      (dolist (ignore-this ivy-ignore-buffers)
        (add-to-list 'projectile-globally-ignored-buffers ignore-this))))

  (use-package swiper
    :bind (:map global-map
                ("C-s" . swiper-isearch)
                ("C-r" . swiper-isearch)))
#+END_SRC
**** interfaz más amigable
Con este paquete hacemos que la interfaz de ivy sea más amigable para algunos comandos.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :after all-the-icons-ivy-rich
    :custom
    (ivy-format-function #'ivy-format-function-line)
    (ivy-rich-path-style 'abbrev)
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
    (ivy-rich-mode 1)

  (use-package all-the-icons-ivy-rich
    :after ivy
    :config (all-the-icons-ivy-rich-mode 1))
#+end_src
*** Manipulación de ventanas
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:45]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :after (windmove winner windresize)
    :bind (:map global-map (("M-o" . ace-window)
                            ("C-x o" . ace-window)
                            ("M-1" . hydra-win/body)))
    :config
    (defface aw-leading-char-face '(:inherit ace-jump-face-foreground :height 2.0) "ace-jump leading character size")
    (setf aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (define-key global-map [remap other-window] 'ace-window)
    :hydra (hydra-win (:columns 3 :color amaranth)
                      "Manejo de ventanas"
                      ("p" windmove-up "Cursor ↑")
                      ("b" windmove-left "Cursor ←")
                      ("n" windmove-down "Cursor ↓")
                      ("f" windmove-right "Cursor →")
                      ("C-p" hydra-move-splitter-up "Astilla ↑")
                      ("C-b" hydra-move-splitter-left "Astilla ←")
                      ("C-n" hydra-move-splitter-down "Astilla ↓")
                      ("C-f" hydra-move-splitter-right "Astilla →")
                      ("M-b" switch-to-buffer "Cambiar buffer")
                      ("M-f" find-file "Visitar/Crear archivo")
                      ("z" (lambda () (interactive) (ace-window 1) (add-hook 'ace-window-end-once-hook 'hydra-win/body)) "Mover cursor a otra ventana")
                      ("2" (lambda () (interactive) (split-window-right) (windmove-right)) "Dividir |")
                      ("3" (lambda () (interactive) (split-window-below) (windmove-down)) "Dividir -")
                      ("c" (lambda () (interactive) (ace-window 4) (add-hook 'ace-window-end-once-hook 'hydra-win/body)) "Intercambiar buffer de ventana")
                      ("g" save-buffer "Guardar buffer")
                      ("x" delete-window "Borrar ventana")
                      ("s" (lambda () (interactive) (eshell t)) "inicia eshell")
                      ("r" rename-buffer "cambiar nombre del buffer")
                      ("X" (lambda () (interactive) (ace-window 16) (add-hook 'ace-window-end-once-hook 'hydra-win/body)) "Borrar esta/otra ventana")
                      ("1" ace-maximize-window "Maximizar esta ventana")
                      ("," (progn (winner-undo) (setf this-command 'winner-undo)) "Deshacer ultimo cambio")
                      ("." winner-redo "Rehacer ultimo cambio")
                      ("q" nil "salir")))

  (use-package windmove)
  (use-package winner
    :config
    (winner-mode 1))
  (use-package windresize)
#+END_SRC
*** dired
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:45]
:END:
Manejador de archivos de serie para Emacs.

Algunas mejoras fueron sacadas de [[https://truongtx.me/2013/04/24/dired-as-default-file-manager-1-introduction/][Dired as Default File Manager - Introduction]].
#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
  (use-package dired
    :straight nil
    :bind (:map dired-mode-map
                ("," . dired-omit-mode)
                ("e" . ora-ediff-files)
                ("c" . dired-do-compress-to))
    :init
    (setq-default dired-omit-mode t)
    (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.")
    (setq-default dired-omit-verbose nil)
    (setf dired-dwim-target t)
    (defun shackra-dired-no-esconder-detalles ()
      "No esconder los detalles de los archivos en dired, se ven muy bien"
      (dired-hide-details-mode 0))
    (defun dired-sort-group-dirs ()
      "Sort dired listings with directories first."
      (save-excursion
        (let (buffer-read-only)
          (forward-line 2) ;; beyond dir. header
          (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
        (set-buffer-modified-p nil)))
    ;; extraído de https://oremacs.com/2017/03/18/dired-ediff/
    (defun ora-ediff-files ()
      (interactive)
      (let ((files (dired-get-marked-files))
            (wnd (current-window-configuration)))
        (if (<= (length files) 2)
            (let ((file1 (car files))
                  (file2 (if (cdr files)
                             (cadr files)
                           (read-file-name
                            "Archivo: "
                            (dired-dwim-target-directory)))))
              (if (file-newer-than-file-p file1 file2)
                  (ediff-files file2 file1)
                (ediff-files file1 file2))
              (add-hook 'ediff-after-quit-hook-internal
                        (lambda ()
                          (setq ediff-after-quit-hook-internal nil)
                          (set-window-configuration wnd))))
          (error "Más de 2 archivos no deberían ser marcados"))))
    (with-eval-after-load 'dired-aux
      ;; registra 7zip para compresión de archivos.
      (add-to-list 'dired-compress-files-alist '("\\tar\\.7z\\'" . "tar cf - %i | 7z a -si -m0=lzma2 -mx=3 %o.tar.7z")))
    :config
    (add-hook 'dired-mode-hook 'shackra-dired-no-esconder-detalles)
    (defadvice dired-readin
        (after dired-after-updating-hook first () activate)
      "Sort dired listings with directories first before adding marks."
      (dired-sort-group-dirs)))

  (use-package dired+
    :straight (dired+ :type git :host github :repo "emacsmirror/dired-plus")
    :config
    (diredp-toggle-find-file-reuse-dir 1))
#+END_SRC
*** =keyfreq=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:45]
:END:
Registra la frecuencia con la que se usan ciertas teclas en Emacs. Esta información se puede utilizar para saber a qué comandos dar combinaciones de teclas más fáciles de presionar.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :if (daemonp)
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
**** ¿Cómo procesar la información estadística obtenida por éste paquete?
Primero se ejecuta el comando =command-frequency-display= el cual popula un buffer con los datos, el contenido de ese buffer debe ser guardado en un archivo. Luego se usa un [[http://ergoemacs.org/emacs/command-frequency.py][script de Python]] que procesara ese archivo, saneara los datos y creara un archivo HTML el cual contendrá el reporte.
*** "CTRL Z"
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:45]
:END:
Reemplaza el mecanismo de deshacer/hacer de Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :preface
    (global-unset-key (kbd "C-z"))
    :bind (:map global-map (("C-z" . undo-fu-only-undo)
                            ("C-S-z" . undo-fu-only-redo))))

  (use-package undo-fu-session
    :config
    (global-undo-fu-session-mode)
    :custom
    (undo-fu-session-incompatible-files
     '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))
#+END_SRC
*** numero de lineas
Muestra el numero de lineas al margen del buffer.
#+BEGIN_SRC emacs-lisp
  (when (not (version< emacs-version "26"))
    (defun shackra-display-lines-change-type ()
      "Alterna entre visualización `RELATIVE' o absoluta del conteo de lineas"
      (interactive)
      (if (eq display-line-numbers 'relative)
          (setf display-line-numbers t)
        (setf display-line-numbers 'relative)))

    (define-key global-map (kbd "M-<f9>") #'shackra-display-lines-change-type)

    (setf display-line-numbers-type 'relative)
    (defun shackra--display-line-numbers-better-width ()
      (setf display-line-numbers-width (number-to-string
                                        (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))))
    (add-hook 'display-line-numbers-mode-hook #'shackra--display-line-numbers-better-width)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode))
#+END_SRC
*** =company=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:50]
:END:
Un mejor motor de autocompletado comparado con [[https://github.com/auto-complete/auto-complete][auto-complete/auto-complete]].
#+BEGIN_SRC emacs-lisp
  (defun company-mode-backend-with-yas (backend)
    "Update BACKEND with YaSnippet."
    (if (or (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (defun company-mode-update-backends-with-yasnippet ()
    "Update the backends of company and turn on YaSnippet."
    (yas-minor-mode-on)
    (setf company-backends (mapcar #'company-mode-backend-with-yas company-backends)))

  (use-package company-box
    :diminish company-box-mode
    :hook (company-mode . company-box-mode))

  (use-package company-auctex
    :after (company tex-site)
    :config
    (company-auctex-init))

  (use-package company
    :init (defun shackra-company-text-mode ()
            (set (make-local-variable 'company-minimum-prefix-length) 3))
    :hook ((company-mode . company-mode-update-backends-with-yasnippet)
           (after-init   . global-company-mode)
           (text-mode    . shackra-company-text-mode))
    :diminish company-mode
    :custom
    (company-backends '(company-capf
                        (company-files
                         company-keywords
                         company-abbrev
                         company-dabbrev)))
    (company-idle-delay 0)
    (company-tooltip-limit 6)
    (company-selection-wrap-around t)
    (company-minimum-prefix-length 1)
    (company-dabbrev-downcase nil)
    (company-auto-complete nil))
#+END_SRC
=company-posframe= permite a company usar child-frame como menu de candidatos
#+BEGIN_SRC emacs-lisp
  (when (not (version< emacs-version "26.0"))
    (use-package company-posframe
      :diminish company-posframe-mode
      :config
      (company-posframe-mode 1)))
#+END_SRC
*** =recentf=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
Archivos recientes abiertos en Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init
    (setf recentf-max-saved-items 100)
    :config
    (add-to-list 'recentf-exclude ".git/")
    (add-to-list 'recentf-exclude ".hg/")
    (add-to-list 'recentf-exclude "elpa/")
    (add-to-list 'recentf-exclude "\\.emacs.d/org-clock-save.el\\'")
    (add-to-list 'recentf-exclude "INBOX/"))
#+END_SRC
*** =expand-region=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
Incrementa la selección por unidades semánticas. Asociado a @@html:<kbd>C-c 0</kbd>@@
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-c 0" . er/expand-region))
#+END_SRC
*** =avy-jump=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
El cursor salta en cualquier parte del buffer según un /árbol de decisiones/ basado en caracteres. Asociado a @@html:<kbd>C-c z</kbd>@@
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :demand t
    :hydra (hydra-avy (:color blue)
                      "avy jump"
                      ("f" avy-goto-word-1 "Ir a la palabra...")
                      ("d" avy-goto-line "Ir a la linea...")
                      ("s" avy-goto-char-in-line "Ir a la letra en la linea actual...")
                      ("a" avy-goto-char "Ir a la palabra (2)..."))
    :bind (:map global-map ("s-f" . hydra-avy/body))
    :config (avy-setup-default))
#+END_SRC
*** =git=
#+BEGIN_SRC emacs-lisp
  (use-package gitignore-mode)
  (use-package gitconfig-mode)
#+END_SRC
*** =magit=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:51]
:END:
Git en Emacs. A decir verdad, amo Mercurial y odio Git. Usar @@html:<kbd>C-c p v</kbd>@@ de =projectile= para invocarlo.

- @@html:<kbd>C</kbd>@@ :: Genera fragmento de CHANGELOG en intervalo de commits seleccionados por una region.
#+BEGIN_SRC emacs-lisp
  (defun shackra-magit-commit-gitchangelog-region (begin end)
    "Crea un CHANGELOG a partir de un intervalo de commits seleccionados por region"
    (interactive "r")
    (when (use-region-p)
      (let* ((words (shackra-words-region-begin-end begin end))
             (body (shell-command-to-string (format "gitchangelog %s..%s" (cadr words) (car words))))
             (output-fmt "commonmark"))
        (kill-new (with-temp-buffer ;; copiado de pandoc.el
                    (insert body)
                    (apply 'call-process-region (point-min) (point-max) "pandoc" t t nil `("-f" "rst" "-t" ,output-fmt))
                    (buffer-substring-no-properties (point-min) (point-max))))
        (message "Salida de gitchangelog copiado al portapapeles"))))

  (use-package magit
    :commands (magit-status)
    :bind (:map magit-mode-map
                ("C" . shackra-magit-commit-gitchangelog-region))
    :init
    (defcustom vc-state-update-commands '(other-window kill-buffer ace-window bury-buffer kill-or-bury-alive magit-mode-bury-buffer)
      "Cuando cada comando de esta lista es ejecutado, actualiza el estado VC del archivo actual"
      :type '(list (function :tag "Comandos de actualización")
                   (repeat :inline t (function :tag "Comandos de actualización"))))

    (defun vc-state-refresh-post-command-hook ()
      "Check if command in `this-command' was executed, then run `vc-refresh-state'"
      (when (memq this-command vc-state-update-commands)
        (vc-refresh-state)))
    (setf magit-last-seen-setup-instructions "1.4.0"
          magit-auto-revert-mode t
          magit-completing-read-function 'ivy-completing-read)
    (add-hook 'after-save-hook 'vc-refresh-state)
    (add-hook 'after-revert-hook 'vc-refresh-state)
    (add-hook 'post-command-hook #'vc-state-refresh-post-command-hook)
    (setf magit-commit-arguments nil)
    (setf magit-use-overlays nil))

  (use-package magit-todos
    :after (magit)
    :init
    (setf magit-todos-branch-list nil)
    :config
    (add-hook 'magit-status-mode-hook 'magit-todos-mode))

  (use-package forge
    :after magit)
#+END_SRC
*** git-gutter-fring
Muestra información de =git diff= en el fringe.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode t))
#+END_SRC
*** eldoc
Muestra en el =área de eco= la firma de la función actual.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :custom (eldoc-idle-delay 1.0))
#+END_SRC
*** =auto-revert-mode=
Revierte el contenido de un buffer de manera automática cuando el contenido de un archivo a cambiado fuera de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :init
    (global-auto-revert-mode))
#+END_SRC
*** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (defun shackra-yas-reload ()
      "Recarga las definiciones de YaSnippet una vez"
      (yas-reload-all)
      (remove-hook 'after-init-hook 'shackra-yas-reload))
    :config
    (add-to-list 'yas-snippet-dirs (expand-file-name "plantillas" user-emacs-directory) nil)
    (add-hook 'after-init-hook #'shackra-yas-reload))

  (use-package auto-yasnippet
    :bind (("s-k" . aya-create)
           ("s-j" . aya-expand)))
#+END_SRC
*** imenu-anywhere
Crea menús a partir de secciones de documentos. Asociado a @@html:<kbd>C-c i</kbd>@@
#+BEGIN_SRC emacs-lisp
  (use-package imenu-anywhere
    :config
    (bind-key "C-c i" 'ivy-imenu-anywhere))
  (use-package imenu+
    :disabled ;; ver razón en https://redd.it/3ahj2d
    :init
    (setf imenup-ignore-comments-flag t))

#+END_SRC
*** Bookmark+
Marcadores para varias cosas en Emacs, asociado a @@html:<kbd>M-p</kbd>@@
#+BEGIN_SRC emacs-lisp
  (use-package bookmark
    :init
    (setf bookmark-default-file (expand-file-name ".marcadores.emacs" "~"))
    (setf bookmark-save-flag 1))

  (use-package bookmark+
    :straight (bookmark+ :type git :repo "emacsmirror/bookmark-plus" :host github)
    :init
    (setf bmkp-auto-light-when-set 'all-in-buffer)
    (setf bmkp-last-as-first-bookmark-file bookmark-default-file)
    :bind (:map global-map ("C-c b" . hydra-bm/body))
    :hydra (hydra-bm-goto (:color amaranth :hint nil)
                          "
  Saltar a...

  En este buffer		En otro sitio
  _a_: anterior		_<SPC>_ por tipo...
  _f_: siguiente

  Editar:
  _e_: nombre y ubicación
  _E_: anotar _b_: Borrar

  _q_: salir _<DEL>_: regresar
  "
                          ("a" bmkp-previous-bookmark-this-buffer)
                          ("f" bmkp-next-bookmark-this-buffer)
                          ("e" bmkp-edit-bookmark-name-and-location :color blue)
                          ("E" bmkp-annotate :color blue)
                          ("b" bmkp-delete-bookmarks)
                          ("<SPC>" bmkp-jump-to-type :color blue)
                          ("<DEL>" hydra-bm/body :color blue)
                          ("q" nil))
    :hydra (hydra-bm (:color amaranth :hint nil)
                     "
  🔖 Marcadores 🔖
  _j_: saltar a...	_b_: Nuevo aquí...
  _l_: mostrar menú

  _q_: salir
  "
                     ("j" hydra-bm-goto/body :color blue)
                     ("b" bookmark-set :color blue)
                     ("l" bookmark-bmenu-list :color blue)
                     ("q" nil)))
#+END_SRC
*** iedit
Edita varias ocurrencias de un texto en el buffer.

Teclas:
- M-H :: iedit-restrict-function
- M-I :: iedit-restrict-current-line
- M-{ :: iedit-expand-up-a-line
- M-} :: iedit-expand-down-a-line
- M-p :: iedit-expand-up-to-occurrence
- M-n :: iedit-expand-down-to-occurrence
- M-G :: iedit-apply-global-modification
- M-C :: iedit-toggle-case-sensitive
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :demand t
    :bind (:map iedit-mode-keymap ("RET" . iedit-quit))
    :init
    (add-hook 'iedit-mode-hook #'shackra-lsp-on-change-modify-hook)
    (add-hook 'iedit-mode-end-hook #'shackra-lsp-on-change-modify-hook))
#+END_SRC
*** Language Server Protocol (lsp)
- State "CANCELADO"  from              [2018-12-31 lun 21:20]
Implementación para Emacs del Language Server Protocol.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-setup-side-window-right-bottom))

  (use-package lsp-mode
    :config
    (lsp-enable-which-key-integration t)
    :hook (prog-mode . lsp-deferred)
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-idle-delay 0.5)
    (lsp-signature-auto-activate t)
    (lsp-signature-doc-lines 1)
    (lsp-symbol-highlighting-skip-current t)
    (lsp-clients-go-format-tool "goimports")
    (lsp-clients-go-max-parallelism 4)
    (lsp-clients-go-server "gopls")
    (lsp-gopls-hover-kind "FullDocumentation")
    (gc-cons-threshold (* 100 1024 1024))
    (read-process-output-max (* 3 1024 1024)))

  (use-package treemacs
    :custom
    (treemacs-indentation-string (propertize " ⫶ " 'face 'font-lock-comment-face))
    (treemacs-indentation 1)
    :bind (:map global-map
                ("M-0"       . treemacs-select-window)
                ("C-x t 1"   . treemacs-delete-other-windows)
                ("C-x t t"   . treemacs)
                ("C-x t B"   . treemacs-bookmark)
                ("C-x t C-t" . treemacs-find-file)
                ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-magit
    :after treemacs magit)

  (use-package lsp-treemacs
    :after (lsp-mode)
    :config (lsp-treemacs-sync-mode 1))

  (use-package lsp-ui
    :after (lsp-mode)
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable t)
    (lsp-eldoc-hook nil)
    (lsp-ui-doc-delay 2)
    :config
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))
#+END_SRC
*** Debug Adapter Protocol
Sumario sacado de la pagina del proyecto en Github
#+begin_quote
Emacs client/library for [[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]] is a wire protocol for communication between client and Debug Server. It’s similar to the LSP but provides integration with debug server.
#+end_quote
#+begin_src emacs-lisp
  (use-package dap-mode
    :config
    (dap-mode 1)
    (dap-ui-mode 1)
    (require 'dap-firefox)
    (require 'dap-chrome)
    (require 'dap-python)
    (dap-firefox-setup)
    (dap-chrome-setup)
    (dap-ui-controls-mode 1))
#+end_src
*** smerge
Un modo menor que facilita la manipulación de la salida de diff3
#+begin_src emacs-lisp
  (use-package smerge-mode
    :bind (:map smerge-mode-map ("C-M-'" . hydra-smerge/body))
    :hydra (hydra-smerge (:color pink :hint nil :pre (smerge-mode 1) :post (smerge-auto-leave))
                         "
  ^Desplazarse^ ^Mantener^           ^Diff^                 ^Otro^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _C-RET_: current     _E_diff
  "
                         ("n" smerge-next)
                         ("p" smerge-prev)
                         ("b" smerge-keep-base)
                         ("u" smerge-keep-upper)
                         ("l" smerge-keep-lower)
                         ("a" smerge-keep-all)
                         ("C-RET" smerge-keep-current)
                         ("<" smerge-diff-base-upper)
                         ("=" smerge-diff-upper-lower)
                         (">" smerge-diff-base-lower)
                         ("R" smerge-refine)
                         ("E" smerge-ediff)
                         ("C" smerge-combine-with-next)
                         ("r" smerge-resolve)
                         ("k" smerge-kill-current)
                         ("q" nil "cancel" :color blue)))
#+end_src
*** Escribir en el navegador usando Emacs
este paquete permite escribir en un área editable del navegador usando Emacs. El navegador necesita un complemento instalado, mas información en https://github.com/stsquad/emacs_chrome
 #+begin_src emacs-lisp
   (use-package edit-server
     :config
     (add-hook 'emacs-startup-hook #'edit-server-start))
 #+end_src
*** tree-sitter
#+begin_src emacs-lisp
  (use-package tsc
    :straight (tsc :host github
                   :repo "ubolonton/emacs-tree-sitter"
                   :files ("core/*.el")))

  (use-package tree-sitter
    :straight (tree-sitter :host github
                           :repo "ubolonton/emacs-tree-sitter"
                           :files ("lisp/*.el"))
    :hook ((after-init . global-tree-sitter-mode)
           ((go-mode python-mode js-mode typescript-mode rust-mode) . tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :straight (tree-sitter-langs :host github
                                 :repo "ubolonton/emacs-tree-sitter"
                                 :files ("langs/*.el" "langs/queries")))
#+end_src
*** =projectile=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:50]
:END:
Manejo de archivos de un proyecto.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :hook ((text-mode prog-mode) . projectile-mode)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :custom
    (projectile-completion-system 'ivy)
    (projectile-switch-project-action 'counsel-projectile-find-file)
    (projectile-file-exists-remote-cache-expire (* 10 60))
    (projectile-globally-ignored-files '("TAGS" "\#*\#" "*~" "*.la"
                                         "*.o" "*.pyc" "*.elc" "*.exe"
                                         "*.zip" "*.tar.*" "*.rar" "*.7z"))
    (projectile-switch-project-action 'magit-status)
    :config
    (add-to-list 'projectile-globally-ignored-directories "node_modules"))

  (use-package ag)
#+END_SRC
** Comunicación
*** Correo electrónico
=mu4e= se usa para leer y enviar correo electrónico.

Este script descarga el correo y lo indexa, aquí asumimos que mbsync esta correctamente configurado.
#+BEGIN_SRC sh :tangle ~/.local/bin/getmail.sh
  #!/bin/sh

  # sincroniza el correo
  mbsync -a -V -c ~/.mbsyncrc.private
  # Pide a mu hacer su trabajo de indexado
  if pgrep -f 'mu server'; then
      emacsclient -e '(mu4e-update-index)'
  else
      mu index --maildir=~/Mail
  fi
#+END_SRC
Scripts ejecutables.
#+BEGIN_SRC sh :results silent
  #!/bin/sh

  chmod +x ~/.local/bin/getmail.sh
#+END_SRC
Para una configuración personalizada hay que cambiar =user-mail-address= y =user-full-name= ubicados en [[*Informaci%C3%B3n personal][Información personal]].
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert
    :after (mu4e)
    :if (executable-find "mu")
    :init
    (add-hook 'emacs-startup-hook #'mu4e-alert-enable-notifications)
    (add-hook 'emacs-startup-hook #'mu4e-alert-enable-mode-line-display)
    (setf mu4e-compose-forward-as-attachment t)
    (setf mu4e-compose-crypto-reply-encrypted-policy 'sign-and-encrypt)
    (setf mu4e-compose-crypto-reply-plain-policy 'sign)
    (setf mu4e-index-update-in-background nil) ;; goimapnotify hace esto por nosotros
    (setq mu4e-alert-email-notification-types '(subjects))
    :config
    (mu4e-alert-set-default-style 'libnotify))

  (with-eval-after-load 'org
    (with-eval-after-load 'mu4e
      (require 'org-mu4e)
      (setq org-mu4e-link-query-in-headers-mode nil)))

  (use-package mu4e
    :if (file-exists-p "/usr/share/emacs/site-lisp/mu4e/mu4e.el")
    :straight nil
    :preface ;;; message view action
    (defun mu4e-msgv-action-view-in-browser (msg)
      "Ver el cuerpo del mensaje HTML en el navegador web"
      (interactive)
      (let ((html (mu4e-msg-field (mu4e-message-at-point t) :body-html))
            (tmpfile (format "%s/%d.html" temporary-file-directory (random))))
        (unless html (error "No hay partes en HTML para este mensaje"))
        (with-temp-file tmpfile
          (insert
           "<html>"
           "<head><meta http-equiv=\"content-type\""
           "content=\"text/html;charset=UTF-8\">"
           html))
        (browse-url (concat "file://" tmpfile))))

    (defadvice mu4e (before mu4e-start activate)
      "Antes de ejecutar `mu4e' borramos todas las ventanas"
      (when (> 1 (count-windows))
        (window-configuration-to-register :mu4e-fullscreen)
        (delete-other-windows)))

    (defadvice mu4e-quit (after mu4e-close-and-push activate)
      "Despues de salir de mu4e ejecutamos un script para subir los cambios al buzon de correo y para también restaurar la disposición de ventanas"
      (start-process "pushmail" "*pushmail-offlineimap*" "offlineimap")
      (when (get-register :mu4e-fullscreen)
        (jump-to-register :mu4e-fullscreen)))
    :init
    (setf mu4e-get-mail-command "getmail.sh")
    ;; html2text es un paquete que debe estar instalado en tu sistema
    (setf mu4e-html2text-command 'mu4e-shr2text)
    ;; hace mu4e el programa por defecto para escribir correo
    (setq mail-user-agent 'mu4e-user-agent)
    (setf mu4e-confirm-quit nil)
    (setf mu4e-context-policy 'pick-first)
    (setf mu4e-compose-context-policy 'ask)
    (setf mu4e-change-filenames-when-moving t)
    (setf mu4e-headers-date-format "%d/%m/%Y %H:%M")
    (setf message-citation-line-format "\nEl %A %d de %B del %Y a las %H%M horas, %N escribió:\n")
    (setf message-citation-line-function 'message-insert-formatted-citation-line)
    (setf message-cite-reply-position 'below)
    (setf mu4e-auto-retrieve-keys t)
    (setf mu4e-headers-leave-behavior 'apply)
    (setf mu4e-headers-visible-lines 8)
    (setf mu4e-hide-index-messages t)
    (setf message-kill-buffer-on-exit t)
    (setf mu4e-attachment-dir  "~/Descargas")
    (setq mu4e-sent-messages-behavior 'delete)
    (setf shackra/mu4e-maildir-dirs '("yahoo" "kue" "gsuite"))
    (defun shackra-mu4e-get-maildir (maildir place)
      "Retorna ubicación para mover el mensaje por MAILDIR a otro lugar PLACE."
      (let ((maildir-path))
        (dolist (dir shackra/mu4e-maildir-dirs)
          (when (string-match-p (concat "^/" dir) maildir)
            (if (string= dir "gsuite")
                (setf maildir-path (concat "/" dir "/Entrada/" place))
              (setf maildir-path (concat "/" dir "/" place)))))
        (unless maildir-path
          (setf maildir-path (mu4e-ask-maildir-check-exists "Mover el mensaje al maildir: ")))
        maildir-path))
    (setf mu4e-sent-folder ;; carpeta de enviados
          (lambda (msg)
            (shackra-mu4e-get-maildir (or (mu4e-message-field msg :maildir) "") "Sent")))
    (setf mu4e-drafts-folder ;; carpeta de borradores
          (lambda (msg)
            (shackra-mu4e-get-maildir (or (mu4e-message-field msg :maildir) "") "Drafts")))
    (setf mu4e-trash-folder ;; carpeta de correo borrado
          (lambda (msg)
            (shackra-mu4e-get-maildir (or (mu4e-message-field msg :maildir) "") "Trash")))
    (setf mu4e-refile-folder ;; carpeta de correo salvado
          (lambda (msg)
            (shackra-mu4e-get-maildir (or (mu4e-message-field msg :maildir) "") "Archive")))
    ;; indica a mu4e que usemos smtp para enviar el correo
    (setf message-send-mail-function 'message-send-mail-with-sendmail)
    (setf send-mail-function 'smtpmail-send-it)
    ;; establecemos el programa de sendmail a msmtp
    (setf sendmail-program "/usr/bin/msmtp")
    ;; eliminamos el nombre de usuario del mensaje de Emacs
    (setf message-sendmail-f-is-evil t)
    ;; con esto indicamos a msmtp que lea el remitente indicado en el mensaje y
    ;; así use la configuración asociada
    (setf message-sendmail-extra-arguments '("--read-envelope-from"))
    (setf mu4e-bookmarks
          '((:name "Sin leer" :key ?u :query "NOT flag:seen AND NOT list:emacs-devel.gnu.org AND NOT maildir:/gsuite/Entrada/spam AND NOT maildir:/gsuite/Entrada/Trash")
            (:name "Sin leer (lista de correo emacs-devel)" :key ?l :query "NOT flag:seen AND NOT maildir:/gsuite/Entrada/Trash")
            (:name "Bandeja de entrada" :key ?e :query "maildir:/gsuite/inbox AND NOT flag:list")
            (:name "Imporantes" :key ?f :query "flag:flagged")
            (:name "Borradores" :key ?b :query "maildir:/gsuite/Drafts")
            (:name "Spam" :key ?s :query "maildir:/gsuite/Entrada/spam")))
    :config
    (defalias 'correo 'mu4e)
    (add-to-list 'mu4e-view-actions
                 '("navegador web" . mu4e-msgv-action-view-in-browser) t)
    (bind-key "C-c c" 'org-mu4e-store-and-capture mu4e-headers-mode-map)
    (bind-key "C-c c" 'org-mu4e-store-and-capture mu4e-view-mode-map))
#+END_SRC
**** configuración del sistema para enviar correo a través de otro programa
desde que cambié a Yahoo como proveedor de correo electrónico me ha sido imposible enviar algún mensaje a través de mu4e, parece que la mejor opción es usar un cliente SMTP y decirle a mu4e que relegue la acción a ese cliente.

Instalamos =msmtp=.
#+begin_src sh :dir /sudo::
  pacman -Sy msmtp
#+end_src
copia el archivo ubicado en =/usr/share/doc/msmtp/msmtprc-user.example= a =~/.msmtprc=. Para evitar tener contraseñas en la configuración puede colocar =passwordeval=.

por ultimo hay que hace unos ajustes en mu4e para que =msmtp= entre en uso.
#+begin_example
;; indica a mu4e que usemos smtp para enviar el correo
(setf message-send-mail-function 'message-send-mail-with-sendmail)
(setf send-mail-function 'smtpmail-send-it)
;; establecemos el programa de sendmail a msmtp
(setf sendmail-program "/usr/bin/msmtp")
;; eliminamos el nombre de usuario del mensaje de Emacs
(setf message-sendmail-f-is-evil t)
;; con esto indicamos a msmtp que lea el remitente indicado en el mensaje y
;; así use la configuración asociada
(setf message-sendmail-extra-arguments '("--read-envelope-from"))
#+end_example
*** =twittering-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:53]
:END:
Twitter desde Emacs
#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
    :init
    (defalias 'tt 'twit)
    (setf twittering-use-master-password t)
    (setf twittering-display-remaining t)
    (setf twittering-icon-mode t)
    (setf twittering-timer-interval 300)
    (setf twittering-url-show-status nil)
    (setf twittering-connection-type-order '(wget native curl urllib-http urllib-https))
    :config
    (defun shackra-tt-fav-rett (&optional arg)
      "Marca como favorito y retweetea un tweet"
      (interactive "P")
      (my/bypass-confirmation-all #'twittering-retweet t)
      (my/bypass-confirmation-all #'twittering-favorite))
    (bind-key "C-c f" 'twittering-favorite twittering-mode-map)
    (bind-key "C-c F" 'shackra-tt-fav-rett twittering-mode-map)

    (add-hook 'twittering-edit-mode-hook #'ispell-minor-mode)
    (add-hook 'twittering-edit-mode-hook #'flyspell-mode))
#+END_SRC
*** org2web
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:57]
- Refiled on [2015-11-12 jue 16:46]
:END:
Generador estático de sitios web que depende de Emacs, Git y Org-mode.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'el2org
    (with-eval-after-load 'ox-gfm
      (use-package org2web
        :config
        ;; Le pedimos a org-mode que no meta las patas cuando exporta archivos a
        ;; HTML. Nosotros manejaremos el marcado de sintaxis de código fuente.
        ;; Muchas gracias a Chen Bin[1] por los trozos de código[2] sacados de su
        ;; propio proyecto[3] :)
        ;;
        ;; [1]: http://emacs.stackexchange.com/users/202/chen-bin
        ;; [2]: http://emacs.stackexchange.com/a/9839/690
        ;; [3]: https://github.com/redguardtoo/org2nikola/blob/master/org2nikola.el
        (load-file (expand-file-name "srcprecode.el" user-emacs-directory))
        (org2web-add-project '("El blog de Shackra"
                               :repository-directory "~/Documentos/elblog.deshackra.com/"
                               :ignore-file-name-regexp "README"
                               :remote (rclone "rscf" "elblog.deshackra.com")
                               :site-domain "http://elblog.deshackra.com"
                               :site-main-title "El blog de Shackra"
                               :site-sub-title "No seas tan abierto de mente o tu cerebro se caerá"
                               :theme-root-directory (:eval (list (expand-file-name "org-page-themes" user-emacs-directory)))
                               :theme (shackra)
                               :source-browse-url ("Bitbucket" "https://bitbucket.org/shackra-blog")
                               :confound-email t
                               :default-category "blog"
                               :about ("Sobre mi" "/about")
                               :rss ("RSS" "/rss.xml")
                               :summary (("etiquetas" :tags))
                               :source-browse-url ("Bitbucket" "https://bitbucket.org/shackra-blog/")
                               :web-server-docroot "~/Documentos/deshackra.com/elblog.deshackra.com"
                               :web-server-port 5777))

        (with-eval-after-load 'ox
          '(progn
             (add-to-list 'org-export-filter-src-block-functions
                          'org2html-wrap-blocks-in-code))))))
  (use-package el2org)
  (use-package ox-gfm)
#+END_SRC
*** mediawiki
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:58]
- Refiled on [2015-11-12 jue 16:53]
:END:
Interfaz para editar paginas en instancias de Mediawiki desde Emacs. [[http://wikemacs.org/wiki/Mediawiki.el][Mediawiki.el - WikEmacs]]
#+BEGIN_SRC emacs-lisp
  (use-package mediawiki
    :disabled
    :init
    (setf mediawiki-site-alist '(("Wikipedia en español" "https://es.wikipedia.org/w/" "" "" "Portal:Iglesia_católica")
                                 ("Wikipedia en Inglés" "https://en.wikipedia.org/w/" "" "" "Portal:Catholicism")
                                 ("Parabola GNU/Linux-libre" "https://wiki.parabola.nu/" "" "" "User:Shackra")
                                 ("Wikemacs" "http://wikemacs.org/" "" "" "User:Shackra")))
    (setf mediawiki-site-default "Wikemacs")
    :config
    (add-hook 'mediawiki-mode-hook '(lambda ()
                                      (turn-off-auto-fill)
                                      (visual-line-mode 1))))
#+END_SRC
** Desarrollo de software
*** Desarrollo de paquetes para Emacs
Set de paquetes que me ayudan a escribir paquetes para GNU Emacs
#+BEGIN_SRC emacs-lisp
  (use-package cask
    :straight (cask :type git :host github :repo "cask/cask"))

  (use-package cask-mode)

  (use-package package-lint-flymake)
#+END_SRC
*** org-babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)
     (ditaa . t)))
#+END_SRC
*** =prog-mode=
Cualquier modo mayor que /herede/ de =prog-mode= sera afectado por esta configuración.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers)
  (use-package highlight-escape-sequences
    :config
    (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
    (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face))
  (use-package rainbow-mode)
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  (use-package prog-mode
    :straight nil
    :init
    (defun shackra-prog-mode ()
      (set (make-local-variable 'fill-column) 79)
      (set (make-local-variable 'comment-auto-fill-only-comments) t)
      ;; Nota: M-q rellena las columnas del párrafo actual
      ;;       M-o M-s centra una linea de texto
      (auto-fill-mode t)
      (highlight-numbers-mode)
      (hes-mode)
      (electric-pair-mode)
      (rainbow-turn-on)
      (when (or (executable-find "ispell") (executable-find "hunspell"))
        (flyspell-prog-mode))
      (prettify-symbols-mode))
    (bind-key* "C-M-," 'comment-dwim)
    (add-hook 'prog-mode-hook #'shackra-prog-mode))
#+END_SRC
*** =org-mode=
El modo Org (Org-mode) es un modo de edición del editor de texto Emacs mediante el cual se editan documentos jerárquicos en texto plano.

Su uso encaja con distintas necesidades, como la creación de notas de cosas por hacer, la planificación de proyectos y hasta la escritura de páginas web. Por ejemplo, los elementos to-do (cosas por hacer) pueden disponer de prioridades y fechas de vencimiento, pueden estar subdivididos en subtareas o en listas de verificación, y pueden etiquetarse o dársele propiedades. También puede generarse automáticamente una agenda de las entradas de cosas por hacer. ~[[https://es.wikipedia.org/wiki/Org-mode][org-mode - Wikipedia, la enciclopedia libre]]

Teclas
- @@html:<kbd>C-c l</kbd>@@ :: Guardar enlace a cosa
- @@html:<kbd>C-c a</kbd>@@ :: Abre la agenda
- @@html:<kbd>C-c c</kbd>@@ :: Capturar algo
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :init
    ;; copiado de https://github.com/integral-dw/org-superstar-mode/blob/master/DEMO.org#latex-style-headings
  ;;; Titles and Sections
    ;; hide #+TITLE:
    (setq org-hidden-keywords '(title))
    ;; set basic title font
    (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
    ;; Low levels are unimportant => no scaling
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
    ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2) ;\large
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.44) ;\Large
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.728) ;\LARGE
    ;; Only use the first 4 styles and do not cycle.
    (setq org-cycle-level-faces nil)
    (setq org-n-level-faces 4)
    ;; Document Title, (\huge)
    (set-face-attribute 'org-document-title nil
                        :height 2.074
                        :foreground 'unspecified
                        :inherit 'org-level-8))

  (use-package org-download
    :hook (dired-mode . org-download-enable))

  (use-package org
    :straight org-plus-contrib
    :bind (:map global-map
                ("C-c a" . org-agenda)
                ("<F12>" . org-agenda)
                ("C-c l" . org-store-link)
                ("C-c c" . org-capture))
    :hook ((org-mode . yas-minor-mode-on)
           (org-mode . org-mode-visual-fill))
    :custom
    (org-directory (expand-file-name "org" (getenv "HOME")))
    (org-default-notes-file (expand-file-name  "notas.org" org-directory))
    (org-refile-targets `((nil :maxlevel . 9)
                          (org-agenda-files :maxlevel . 9)
                          (org-default-notes-file :maxlevel . 9)
                          (,(expand-file-name "notas.org" org-directory) :maxlevel . 9)
                          (,(expand-file-name "quizas.org" org-directory) :maxlevel . 9)))
    (org-use-property-inheritance t)
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps t)
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-M-RET-may-split-line '((default . nil)))
    (org-default-notes-file (expand-file-name "notas.org" org-directory))
    (org-todo-keywords
     '((sequence "POR-HACER(p)" "SIGNT(s)" "|" "TERMINADO(t)")
       (sequence "ESPERA(e@/!)" "RETENER(r@/!)" "|" "CANCELADO(c@/!)")))
    (org-todo-keyword-faces
     '(("POR-HACER" :foreground "red" :weight bold)
       ("SIGNT" :foreground "blue" :weight bold)
       ("TERMINADO" :foreground "forest green" :weight bold)
       ("ESPERA" :foreground "orange" :weight bold)
       ("RETENER" :foreground "magenta" :weight bold)
       ("CANCELADO" :foreground "forest green" :weight bold)))
    (org-catch-invisible-edits 'show)
    (org-clock-persist 'history)
    (org-ctrl-k-protect-subtree t)
    (org-export-backends '(ascii html icalendar latex md texinfo))
    (org-fontify-quote-and-verse-blocks t)
    (org-footnote-auto-adjust t)
    (org-habit-graph-column 55)
    (org-imenu-depth 5)
    (org-log-done 'time)
    (org-modules '(org-bbdb org-bibtex org-crypt org-docview org-gnus org-habit org-id org-info org-irc org-mhe org-rmail org-w3m org-protocol))
    (org-special-ctrl-k t)
    (org-startup-folded nil)
    (org-startup-indented t)
    (org-use-fast-todo-selection t)
    (org-treat-S-cursor-todo-selection-as-state-change nil)
    (org-todo-state-tags-triggers
     '(("CANCELADO" ("CANCELADO"        . t))
       ("ESPERA" ("ESPERA"              . t))
       ("RETENER" ("ESPERA") ("RETENER" . t))
       (done ("ESPERA") ("RETENER"))
       ("POR-HACER" ("ESPERA") ("CANCELADO") ("RETENER"))
       ("SIGNT" ("ESPERA") ("CANCELADO") ("RETENER"))
       ("TERMINADO" ("ESPERA") ("CANCELADO") ("RETENER"))))
    ;; según http://orgmode.org/manual/Link-abbreviations.html#Link-abbreviations
    (org-link-abbrev-alist
     '(("rarbg"      . "https://rarbg.to/torrents.php?search=%s&category%5B%5D=17&category%5B%5D=18")
       ("nyaa"       . "https://www.nyaa.se/?page=search&cats=1_0&filter=0&term=%s")
       ("bakabt"     . "https://bakabt.me/browse.php?only=0&incomplete=1&bonus=1&c1=1&c2=1&reorder=1&q=%s")
       ("tokyotosho" . "https://www.tokyotosho.info/search.php?terms=%s&type=1&size_min=&size_max=&username=")))
    (org-agenda-dim-blocked-tasks nil)
    (org-agenda-compact-blocks nil)
    (org-agenda-custom-commands
     '(("a" "Agenda"
        ((tags "PRIORITY=\"A\""
               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "Tareas de alta prioridad por terminar:")))
         (agenda ""
                 ((org-agenda-span 'day)
                  (org-agenda-overriding-header "Hoy:")
                  (org-agenda-show-all-dates nil)))
         (agenda ""
                 ((org-agenda-span 'week)
                  (org-agenda-start-day "+1d") ;; A partir de mañana
                  (org-agenda-overriding-header "Semana:")
                  (org-agenda-show-all-dates nil)))
         (agenda ""
                 ((org-agenda-span 'month)
                  ;; A partir de la siguiente semana
                  (org-agenda-start-day "+1w")
                  (org-agenda-overriding-header "Mes:")
                  (org-agenda-show-all-dates nil)))
         (alltodo ""
                  ((org-agenda-skip-function
                    '(or (air-org-skip-subtree-if-habit)
                         (air-org-skip-subtree-if-priority ?A)
                         (org-agenda-skip-if nil '(scheduled deadline))))
                   (org-agenda-overriding-header "Todas las tareas de prioridad normal:")))))))
    (org-archive-location (expand-file-name "~/org-archivos/archivado.org::* Entradas viejas y archivadas"))
    (org-footnote-auto-adjust t)
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path t)
    (org-html-htmlize-output-type 'css)
    (org-html-htmlize-font-prefix "org-")
    (org-habit-graph-column 55)
    (org-special-ctrl-k t)
    (org-ctrl-k-protect-subtree t) ;; al usar C-k, evitamos perder todo el subarbol
    (org-catch-invisible-edits 'show)
    (org-return-follow-link t)
    (org-startup-indented t)
    (org-startup-folded nil)
    (org-log-done nil)
    (org-log-reschedule 'note)
    (org-log-redeadline 'note)
    (org-log-note-clock-out nil)
    (org-log-refile nil)
    (org-log-into-drawer nil)
    (org-clock-persist 'history)
    (org-plantillas-directory (expand-file-name "org-plantillas" user-emacs-directory))
    :init
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
    ;; Exclude DONE state tasks from refile targets
    (defun verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets"
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))
    (setf org-refile-target-verify-function #'verify-refile-target)
    (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
          nil)))
    (defun air-org-skip-subtree-if-habit ()
      "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (if (string= (org-entry-get nil "STYLE") "habit")
            subtree-end
          nil)))
    (defun org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))
    :config
    ;; https://github.com/sprig/org-capture-extension#example-closins-the-frame-after-a-capture
    ;; Kill the frame if one was created for the capture
    (defvar kk/delete-frame-after-capture 0 "Whether to delete the last frame after the current capture")

    (defun kk/delete-frame-if-neccessary (&rest r)
      (cond
       ((= kk/delete-frame-after-capture 0) nil)
       ((> kk/delete-frame-after-capture 1)
        (setq kk/delete-frame-after-capture (- kk/delete-frame-after-capture 1)))
       (t
        (setq kk/delete-frame-after-capture 0)
        (delete-frame))))

    (advice-add 'org-capture-finalize :after 'kk/delete-frame-if-neccessary)
    (advice-add 'org-capture-kill :after 'kk/delete-frame-if-neccessary)
    (advice-add 'org-capture-refile :after 'kk/delete-frame-if-neccessary)
    (org-clock-persistence-insinuate))

  (with-eval-after-load 'org-capture
    (add-to-list 'org-agenda-files
                 (car `(,(expand-file-name "cosas por hacer.org" org-directory))))
    (add-to-list 'org-capture-templates `("T" "Anotacion técnica" entry (file shackra-custom-engineer-notebook)
                                          (file ,(expand-file-name "anotacion tecnica.orgcaptmpl" org-plantillas-directory))
                                          :kill-buffer t :clock-in t :clock-resume t))
    (add-to-list 'org-capture-templates `("t" "Tarea por hacer" entry (file "cosas por hacer.org")
                                          (file ,(expand-file-name "tareas por hacer.orgcaptmpl" org-plantillas-directory))
                                          :kill-buffer t :clock-in t :clock-resume t))
    (add-to-list 'org-capture-templates `("n" "Notas" entry (file+headline org-default-notes-file "Reorganizar")
                                          (file ,(expand-file-name "notas.orgcaptmpl" org-plantillas-directory))
                                          :kill-buffer t :clock-in t :clock-resume t))
    (add-to-list 'org-capture-templates `("f" "Fechas o eventos" entry (file+headline "cosas por hacer.org" "Fechas")
                                          (file ,(expand-file-name "fecha o evento.orgcaptmpl" org-plantillas-directory))
                                          :kill-buffer t :clock-in t :clock-resume t))
    (add-to-list 'org-capture-templates `("r" "Receta de cocina" entry (file "recetas.org")
                                          (file ,(expand-file-name "recetas.orgcaptmpl" org-plantillas-directory))
                                          :kill-buffer t :clock-in t :clock-resume t))
    (add-to-list 'org-capture-templates `("P" "Protocol" entry (file+headline org-default-notes-file "Reorganizar")
                                          (file ,(expand-file-name "protocol.orgcaptmpl" org-plantillas-directory))
                                          :kill-buffer t :clock-in t :clock-resume t))
    (add-to-list 'org-capture-templates `("l" "Protocol Link" entry (file+headline org-default-notes-file "Reorganizar")
                                          (file ,(expand-file-name "protocol.orgcaptmpl" org-plantillas-directory))
                                          :kill-buffer t :clock-in t :clock-resume t)))

  (use-package org-indent
    :straight nil
    :after (org)
    :diminish org-indent-mode)

  (with-eval-after-load 'org
    (use-package org-projectile
      :config
      (add-to-list 'org-agenda-files (car (org-projectile-todo-files)))
      (add-to-list 'org-capture-templates (org-projectile-project-todo-entry :capture-character "p"))))
#+END_SRC
*** Hyperbole
- State "CANCELADO"  from              [2020-01-28 mar 18:08] \\
  hasta no resolver problema https://www.reddit.com/r/emacs/comments/ev9tcc/super_quick_introduction_to_hyperbole_with/ffv5sdp?utm_source=share&utm_medium=web2x
  {C-h h d d} muestra la demostración interactiva de Hyperbole
#+begin_src emacs-lisp
  (use-package hyperbole)
#+end_src
*** org-reveal
#+begin_src emacs-lisp
  (use-package ox-reveal
    :init (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.8.0/"))
#+end_src
*** =pkgbuild-mode=
Un modo mayor de Emacs para la edición de archivos =PKGBUILD=
#+BEGIN_SRC emacs-lisp
  (use-package pkgbuild-mode
    :mode "/PKGBUILD$")
#+END_SRC
**** Preparación previa
Si estas en Arch Linux o Parabola GNU/Linux-libre, tienes que instalar el paquete correspondiente desde el repositorio de software de la distribución
#+BEGIN_SRC sh
  sudo pacman -S emacs-pkgbuild-mode
#+END_SRC
*** =python=
Modo mayor para programar en Python
#+BEGIN_SRC emacs-lisp
  (defun shackra-python-install-deps ()
    "Instala dependencias básicas dentro de un entorno virtual"
    (interactive)
    (shell-command "pip install 'python-language-server[rope,pydocstyle,pyflakes]' pyls-mypy black 'ptvsd>=4.2'"))

  (use-package pony-mode
    :after (python)
    :init
    (defun shackra-pony-remove-beautify-html ()
      "Quita el gancho para embellecer el HTML"
      (remove-hook 'before-save-hook 'web-beautify-html-buffer t))
    :config
    ;; quitamos el gancho que embellece el HTML cuando es guardado para que no
    ;; estropeé las plantillas de DJango
    (add-hook 'pony-tpl-minor-mode-hook #'shackra-pony-remove-beautify-html))

  (use-package virtualenvwrapper
    :after (python)
    :init
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell)
    (defun shackra-lsp-before-initialize-python ()
      (when (eq major-mode 'python-mode)
        (unless venv-current-name
          (call-interactively (venv-workon)))))
    :hook ((venv-postmkvirtualenv-hook . shackra-python-install-deps))
    :config
    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-before-initialize-hook #'shackra-lsp-before-initialize-python)))

  (use-package sphinx-doc
    :after (python)
    :init (add-hook 'python-mode-hook #'sphinx-doc-mode))

  (use-package blacken
    :after (python)
    :init
    (setf blacken-line-length 80) ;; mantengamos el estándar
    (defvar shackra-blacken-except-directory '()
      "lista de prefijos de directorios a ignorar por blacken")
    (defun shackra-blacken-buffer ()
      (interactive)
      (when (eq major-mode 'python-mode)
        (let* ((buffer-dir (buffer-file-name))
               (ignore nil))
          (dolist (dir shackra-blacken-except-directory)
            (unless ignore
              (setf ignore (string-prefix-p dir buffer-dir))))
          (unless ignore
            (when (or (not blacken-only-if-project-is-blackened)
                      (blacken-project-is-blackened))
              (blacken-buffer))))))
    (add-hook 'before-save-hook #'shackra-blacken-buffer))

  (use-package python
    :if (executable-find "python")
    :hydra (hydra-py (:color red :post (progn (deactivate-mark)))
                     "Sangrado de bloques"
                     ("," python-indent-shift-left "← Disminuir")
                     ("." python-indent-shift-right "→ Aumentar"))
    :interpreter ("python" . python-mode)
    :init
    (defun shackra-python-indent-shift-left ()
      (interactive)
      (if (fboundp 'hydra-py/python-indent-shift-left)
          (hydra-py/python-indent-shift-left)
        (python-indent-shift-left)))
    (defun shackra-python-indent-shift-right ()
      (interactive)
      (if (fboundp 'hydra-py/python-indent-shift-right)
          (hydra-py/python-indent-shift-right)
        (python-indent-shift-right)))
    (defun shackra-python-mode ()
      "Cosas que deseo activar/desactivar cuando voy a programar en Python"
      (shackra-electric-indent-mode-off)
      (when (fboundp 'aggressive-indent-mode)
        (aggressive-indent-mode -1)))

    (setf python-shell-interpreter "python")
    (add-hook 'python-mode-hook #'shackra-python-mode)
    :config
    ;; re-mapea todas los atajos que hagan referencia a `python-indent-shift-*' con `shackra-python-indent-shift-*'
    (global-set-key [remap python-indent-shift-left] 'shackra-python-indent-shift-left)
    (global-set-key [remap python-indent-shift-right] 'shackra-python-indent-shift-right))

  (use-package flymake-python-pyflakes
    :hook (python-mode . flymake-python-pyflakes-load))
#+END_SRC
*** LaTeX
Paquete extensivo para escribir y formatear documentos TeX
#+BEGIN_SRC emacs-lisp
  (use-package latex
    :straight auctex
    :init
    (setf TeX-auto-save t
          TeX-parse-self t
          TeX-save-query nil
          TeX-newline-function 'newline-and-indent
          LaTeX-item-indent 0)
    (setq-default TeX-master nil)
    (setq-default TeX-engine 'xetex)
    (setq-default TeX-PDF-mode t)
    (add-hook 'LaTeX-mode-hook 'yas-minor-mode-on))
  (use-package reftex
    :init
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    (add-hook 'latex-mode-hook 'turn-on-reftex))   ; with Emacs latex mode
#+END_SRC
*** =toml=
/El lenguaje minimalista y obvio de Tom/
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
    :defer 10)
#+END_SRC
*** =yaml=
/YAML: YAML Ain't Markup Language/
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :defer 10
    :mode "\\.yml$")

  (use-package flymake-yaml
    :hook (yaml-mode . flymake-yaml-load))
#+END_SRC
*** =rust=
Modo mayor para editar código fuente en Rust. Rust es es un lenguaje de programación de sistemas que corre realmente rapido, previene fallos de segmentación (segfaults), y garantiza seguridad en programas multi-hilo.
#+BEGIN_SRC emacs-lisp
  (use-package rustfmt
    :disabled ;; no existe en Melpa (20/05/2017)
    :after (rust-mode)
    :config
    (add-hook 'rust-mode-hook #'rustfmt-enable-on-save))

  (use-package cargo
    :after (rust-mode)
    :if (executable-find "cargo"))

  (use-package rust-mode
    :if (executable-find "rustc")
    :init
    (setq rust-format-on-save t))
#+END_SRC
*** web-mode
Un modo mayor para editar paginas web
#+BEGIN_SRC emacs-lisp
  (use-package web-beautify
    :after (web-mode)
    :config
    (add-hook 'json-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'web-beautify-js-buffer t t)))
    (add-hook 'html-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'web-beautify-html-buffer t t)))
    (add-hook 'css-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'web-beautify-css-buffer t t))))
  (use-package emmet-mode
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode))

  (use-package web-mode
    :preface
    (defun shackra-webdev-refresh-page-on-save ()
      "Actualiza una pagina web en el navegador al guardar un buffer"
      (interactive)
      (let* ((currentfiledir (file-name-directory (buffer-file-name)))
             (isrootfile (string-suffix-p httpd-root currentfiledir)))
        (when (and (derived-mode-p 'sgml-mode 'css-mode 'web-mode 'js2-mode) isrootfile (shackra-port-open-p moz-repl-host moz-repl-port))
          (moz-controller-page-refresh))))
    :init
    (setf web-mode-code-indent-offset shackra-webdev-indent)
    (setf web-mode-css-indent-offset shackra-webdev-indent)
    (setf web-mode-sql-indent-offset shackra-webdev-indent)
    (setf web-mode-markup-indent-offset shackra-webdev-indent)
    :config
    (add-hook 'after-save-hook #'shackra-webdev-refresh-page-on-save)
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+END_SRC
**** CSS con LSP-mode
***** dependencias externas
Si esto no se instala no tendremos disponible autocompletado para CSS con LSP
#+BEGIN_SRC sh :results silent
npm i -g vscode-css-languageserver-bin
#+END_SRC
***** css-mode
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :init
    (setf css-indent-offset (* shackra-webdev-indent 2)))

  (use-package flymake-css
    :hook (css-mode . flymake-css-load))
#+END_SRC
*** golang
Modo mayor para editar archivos Golang.

Teclas
- @@html:<kbd>M-.</kbd>@@ :: Salta a definición / Go Guru: salto a definición
- @@html:<kbd>C-c C-a</kbd>@@ :: Agrega importación
- @@html:<kbd>C-c C-r</kbd>@@ :: Quita importaciones sin usar
- @@html:<kbd>C-c C-i</kbd>@@ :: Ir a sección donde están las importaciones
- @@html:<kbd>C-c C-c</kbd>@@ :: Compilar proyecto
- @@html:<kbd>C-M-m</kbd>@@ :: Inicia Go Doctor
- @@html:<kbd>C-M-g</kbd>@@ :: Inicia Go Guru

Es necesario instalar [[https://github.com/alecthomas/gometalinter][=gometalinter=]] para localizar varios tipos de errores en el código fuente
#+BEGIN_EXAMPLE
go get -u gopkg.in/alecthomas/gometalinter.v1
#+END_EXAMPLE

También estas otras bibliotecas
#+BEGIN_EXAMPLE
go get golang.org/x/tools/gopls # reemplaza a gocode ya que estamos usando lsp-mode
go get github.com/godoctor/godoctor
go install github.com/godoctor/godoctor
go get golang.org/x/tools/cmd/guru # Como usar Go Guru http://golang.org/s/using-guru
go build golang.org/x/tools/cmd/guru
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package f) ;; requerido para `shackra-go-update-compile-definition'
  (use-package go-mode
    :after (f)
    :if (executable-find "go")
    :bind (:map go-mode-map
                ("C-c C-a" . go-import-add)
                ("C-c C-r" . go-remove-unused-imports)
                ("C-c C-i" . go-goto-imports)
                ("C-c C-c" . compile))
    :hook (((go-mode after-save) . shackra-go-update-compile-definition)
           (go-mode              . (lambda () (add-to-list (make-local-variable 'grep-find-ignored-directories) "vendor")))
           (before-save          . gofmt-before-save)
           (go-mode              . shackra-go-mode-insert-package-directive))
    :init
    (with-eval-after-load 'dap-mode
      (require 'dap-go)
      (dap-go-setup))
    (setf gofmt-command "goimports")
    (defun shackra-go-update-compile-definition ()
      "Actualiza la definición del comando COMPILE para go-mode"
      (interactive)
      (when (eq major-mode 'go-mode)
        (if (string-suffix-p "_test.go" (buffer-name))
            (set (make-local-variable 'compile-command) "go test -bench=. -v")
          (set (make-local-variable 'compile-command) (format "go build" (f-base (f-dirname (f-full (buffer-name)))))))))
    (defun shackra-go-mode-insert-package-directive ()
      (interactive)
      (when (and (= (length (buffer-substring-no-properties (point) (point-max))) 0) buffer-file-name)
        (let ((package (f-filename (f-dirname buffer-file-name))))
          (insert (concat "package " package))
          (save-buffer)))))

  (use-package flymake-golangci
    :straight (flymake-golangci :type git :host gitlab :repo "shackra/flymake-golangci")
    :hook (go-mode . flymake-golangci-load))

  (use-package go-snippets
    :after (go-mode))

  (use-package go-fill-struct
    :if (executable-find "fillstruct"))

  (use-package go-tag
    :if (executable-find "gomodifytags"))

  (use-package go-playground)

  (use-package godoctor
    :after (go-mode)
    :if (executable-find "godoctor")
    :bind (:map go-mode-map ("C-M-m" . hydra-godoctor/body))
    :config
    :hydra (hydra-godoctor (:color blue :columns 2)
                           "Motor de refactorización para Go"
                           ("a" godoctor-rename "Renombra identificador, punto actual")
                           ("s" godoctor-extract "Refactorizacion en una función, marca actual")
                           ("d" godoctor-toggle "Cambia declaración de variable")
                           ("f" godoctor-godoc "Crea esqueleto de documentación")))

  (use-package ob-go
    :after (org-mode)
    :config
    (org-babel-do-load-languages 'org-babel-load-languages '((go . t))))
#+END_SRC
*** javascript
**** JSON
- @@html:<kbd>C-c C-f</kbd>@@: format the region/buffer with [[https://github.com/gongo/json-reformat][=json-reformat=]]
- @@html:<kbd>C-c C-p</kbd>@@: display a path to the object at point with [[https://github.com/Sterlingg/json-snatcher][=json-snatcher=]]
- @@html:<kbd>C-c P</kbd>@@: copy a path to the object at point to the kill ring with =json-snatcher=
- @@html:<kbd>C-c C-t</kbd>@@: Toggle between =true= and =false= at point
- @@html:<kbd>C-c C-k</kbd>@@: Replace the sexp at point with =null=
- @@html:<kbd>C-c C-i</kbd>@@: Increment the number at point
- @@html:<kbd>C-c C-d</kbd>@@: Decrement the number at point
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :init
    (defun jsconfig-default-conf ()
      (interactive)
      (yas-insert-snippet))

    (add-hook 'json-mode-hook
              '(lambda () (when (and (eq (buffer-size) 0)
                                (string-match-p "jsconfig.json" (buffer-file-name)))
                       (jsconfig-default-conf)))))

  (use-package flymake-json
    :hook (json-mode . flymake-json-load))
#+END_SRC
**** Paquetes para editar JavaScript
#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level shackra-webdev-indent)

  (defvar shackra/js-modes '(js-mode-hook typescript-mode-hook)
    "lista de modos mayores que tratan JavaScript")

  ;; cuando se hace grep, omite los archivos source map de Javascript
  (with-eval-after-load "grep"
    (add-to-list 'grep-find-ignored-files "*.map.*.js"))

  ;; desactiva la identacion eléctrica
  (dolist (mode shackra/js-modes)
    (add-hook mode (lambda ()
                     (electric-indent-local-mode -1)
                     (local-set-key (kbd "C-j") #'newline-and-indent))
              100))

  (use-package flymake-eslint-easy
    :straight (flymake-eslint-easy :type git :host gitlab :repo "shackra/flymake-eslint-easy")
    :config
    (dolist (mode shackra/js-modes)
      (add-hook mode (lambda ()
                       (flymake-eslint-easy-load)))))

  (use-package prettier-js
    :init
    (setf prettier-js-args '(
                             "--trailing-comma" "all"
                             "--bracket-spacing" "true"
                             "--no-semi"
                             ))
    :config
    (dolist (hook shackra/js-modes)
      (add-hook hook 'prettier-js-mode)
      (add-hook hook (lambda () (setq-local electric-indent-inhibit t)))))

  ;; asume que (>= emacs-major-version 27)
  (use-package js-mode
    :ensure js
    :hook (js-mode . (lambda () (add-to-list (make-local-variable 'grep-find-ignored-directories) "build")))
    :straight nil
    :mode (rx ".js" (? "x") string-end)
    :init
    (setf js-indent-level shackra-webdev-indent)
    (setf js-switch-indent-offset shackra-webdev-indent)
    (setf js-jsx-indent-level shackra-webdev-indent))

  (use-package typescript-mode
    :hook (typescript-mode .
                           (lambda ()
                             (add-to-list
                              (make-local-variable
                               'grep-find-ignored-directories) "build")
                             (electric-indent-mode -1)))
    :mode (rx ".ts" (? "x") string-end)
    :init
    (setf typescript-indent-level shackra-webdev-indent))
#+END_SRC
*** =html-mode=
#+BEGIN_SRC emacs-lisp
  (use-package sgml-mode
    :init
    (setf sgml-basic-offset shackra-webdev-indent))
#+END_SRC
**** HTML con LSP
***** dependencias externas
#+BEGIN_SRC sh :results silent
npm i -g vscode-html-languageserver-bin
#+END_SRC
*** SLIME
SLIME is the Superior Lisp Interaction Mode for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :init
    ;; Sacado de https://www.emacswiki.org/emacs/ParEdit#toc3 evita que SLIME
    ;; coja DEL porque interfiere con el funcionamiento normal de paredit
    (defun override-slime-repl-bindings-with-paredit ()
      (define-key slime-repl-mode-map
        (read-kbd-macro paredit-backward-delete-key) nil))
    ;; Estoy leyendo Land of Lisp, así que necesito usar CLISP
    (setf inferior-lisp-program "/usr/bin/clisp")
    (setf slime-contribs '(slime-fancy))
    (add-hook 'slime-repl-mode-hook #'enable-paredit-mode)
    (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit))
#+END_SRC
*** Gherkin
#+BEGIN_SRC emacs-lisp
  (use-package feature-mode
    :mode ("\\.feature$" . feature-mode))
#+END_SRC
*** Nginx
#+begin_src emacs-lisp
  (use-package nginx-mode)

  (use-package company-nginx)
#+end_src
*** PlantUML
Para ubicar el archivo JAR en diferentes sistemas se inspecciona el script que siempre esta ubicado en =/usr/bin/plantuml= y se extrae la ubicación del archivo que nos interesa como una cadena de texto.
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :init
    (setf plantuml-jar-path (with-temp-buffer
                              (when (file-exists-p "/usr/bin/plantuml")
                                (insert-file-contents "/usr/bin/plantuml")
                                (let ((max)
                                      (min))
                                  (goto-char (point-min))
                                  (search-forward "plantuml.jar")
                                  (setf max (point))
                                  (search-backward "/usr")
                                  (setf min (point))
                                  (buffer-substring-no-properties min max))))))
#+end_src
*** GraphQL
#+begin_src emacs-lisp
  (use-package graphql-mode)
#+end_src
*** shell
#+begin_src emacs-lisp
  (when (and (eq system-type "windows-nt")
             (fboundp 'module-load))
    ;; instala vterm
    (use-package vterm
      :init
      (defun vterm-counsel-yank-pop-action (orig-fun &rest args)
        (if (equal major-mode 'vterm-mode)
            (let ((inhibit-read-only t)
                  (yank-undo-function (lambda (_start _end) (vterm-undo))))
              (cl-letf (((symbol-function 'insert-for-yank)
                         (lambda (str) (vterm-send-string str t))))
                (apply orig-fun args)))
          (apply orig-fun args)))
      :config
      (advice-add 'counsel-yank-pop-action :around #'vterm-counsel-yank-pop-action)
      :custom
      (vterm-kill-buffer-on-exit t)))

  (use-package multi-vterm
    :bind (:map global-map ("C-t" . multi-vterm-dedicated-toggle))
    :bind (:map vterm-mode-map ("C-t" . multi-vterm-dedicated-toggle))
    :custom
    (multi-vterm-dedicated-window-height 18))

  (use-package flymake-shell
    :hook (sh-set-shell . flymake-shell-load))
#+end_src
*** Godot Engine
Modo mayor para editar archivos GDScript y =.tscn=
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :straight (gdscript-mode
               :type git
               :host github
               :repo "godotengine/emacs-gdscript-mode"
               :files ("*.el" "data/*.txt"))
    :init
    (setf gdscript-gdformat-save-and-format t)
    :config
    ;; Temporary workaround issues with the language server
    ;; https://github.com/godotengine/emacs-gdscript-mode/issues/95#issuecomment-707145449
    (defun franco/godot-gdscript--lsp-ignore-error (original-function &rest args)
      "Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
      (if (string-equal major-mode "gdscript-mode")
          (let ((json-data (nth 0 args)))
            (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
                     (not (gethash "id" json-data nil))
                     (not (gethash "method" json-data nil)))
                nil
              (apply original-function args)))
        (apply original-function args)))

    (with-eval-after-load "lsp-mode.el"
      (advice-add #'lsp--get-message-type :around #'franco/godot-gdscript--lsp-ignore-error)))
#+end_src
*** gRPC
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :hook (protobuf-mode . (lambda () (setf c-basic-offset 4))))
#+end_src
*** Flutter
#+begin_src emacs-lisp
  (use-package dart-mode
    ;; Optional
    :hook (dart-mode . flutter-test-mode))

  (use-package flutter
    :after dart-mode)

  (use-package lsp-dart
    :after (lsp-mode dart-mode)
    :hook (dart-mode . lsp))
#+end_src
*** OPA/Rego
#+begin_src emacs-lisp
  (use-package rego-mode)
#+end_src
** Edición de texto y generalidades relacionadas
*** =flyspell-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:56]
- Refiled on [2015-11-12 jue 16:51]
:END:
Revisión ortográfica al vuelo. Asociado a @@html:<kbd>C-.</kbd>@@. @@html:<kbd><f8></kbd>@@ cambia el idioma de Español a Inglés y viceversa.
#+BEGIN_SRC emacs-lisp
  (setf flyspell-issue-message-flag nil)

  (defun flyspell-ignore-js-import ()
    "Función usada para `flyspell-generic-check-word-predicate' que ignora cadenas usadas en la importación en Javascript."
    (save-excursion
      (widen)
      (not (or (search-backward "from" (line-beginning-position) t)
               (search-backward "import" (line-beginning-position) t)
               (get-char-property (point) 'font-lock-doc-face)
               (get-char-property (point) 'font-lock-comment-face)))))

  ;; (put 'js-mode 'flyspell-mode-predicate #'flyspell-ignore-js-import)

  (with-eval-after-load 'flyspell
    (use-package flyspell-correct-ivy
      :after (ivy-mode)
      :bind (:map flyspell-mode-map ("C-." . flyspell-correct-previous-word-generic))
      :init
      (setf flyspell-correct-auto-delay 2.0)))
  (use-package flyspell
    :if (or (executable-find "ispell") (executable-find "hunspell"))
    :diminish flyspell-mode
    :init
    ;; sacado de http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
    ;; if (aspell installed) { use aspell}
    ;; else if (hunspell installed) { use hunspell }
    ;; whatever spell checker I use, I always use English dictionary
    ;; I prefer use aspell because:
    ;; 1. aspell is older
    ;; 2. looks Kevin Atkinson still get some road map for aspell:
    ;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
    (defun flyspell-detect-ispell-args (&optional run-together)
      "if RUN-TOGETHER is true, spell check the CamelCase words."
      (let (args)
        (cond
         ((string-match  "aspell$" ispell-program-name)
          ;; Force the Spanish dictionary for aspell
          ;; Support Camel Case spelling check (tested with aspell 0.6)
          (setq args (list "--sug-mode=ultra" "--lang=es_ES"))
          (if run-together
              (setq args (append args '("--run-together" "--run-together-limit=5" "--run-together-min=2")))))
         ((string-match "hunspell$" ispell-program-name)
          ;; Force the Spanish dictionary for hunspell
          (setq args "-d es_ES")))
        args))

    (cond
     ((executable-find "aspell")
      ;; you may also need `ispell-extra-args'
      (setq ispell-program-name "aspell"))
     ((executable-find "hunspell")
      (setq ispell-program-name "hunspell")

      ;; Please note that `ispell-local-dictionary` itself will be passed to hunspell cli with "-d"
      ;; it's also used as the key to lookup ispell-local-dictionary-alist
      ;; if we use different dictionary
      (setq ispell-local-dictionary "es_ES")
      (setq ispell-local-dictionary-alist
            '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
              ("es_ES" "[[:alpha:]]" "[^[:alpha:]]" "[ñ]" nil ("-d" "es_ES") nil utf-8))))
     (t (setq ispell-program-name nil)))

    ;; ispell-cmd-args is useless, it's the list of *extra* arguments we will append to the ispell process when "ispell-word" is called.
    ;; ispell-extra-args is the command arguments which will *always* be used when start ispell process
    ;; Please note when you use hunspell, ispell-extra-args will NOT be used.
    ;; Hack ispell-local-dictionary-alist instead.
    (setq-default ispell-extra-args (flyspell-detect-ispell-args t))
    ;; (setq ispell-cmd-args (flyspell-detect-ispell-args))
    (defadvice ispell-word (around my-ispell-word activate)
      (let ((old-ispell-extra-args ispell-extra-args))
        (ispell-kill-ispell t)
        (setq ispell-extra-args (flyspell-detect-ispell-args))
        ad-do-it
        (setq ispell-extra-args old-ispell-extra-args)
        (ispell-kill-ispell t)))

    (defadvice flyspell-auto-correct-word (around my-flyspell-auto-correct-word activate)
      (let ((old-ispell-extra-args ispell-extra-args))
        (ispell-kill-ispell t)
        ;; use emacs original arguments
        (setq ispell-extra-args (flyspell-detect-ispell-args))
        ad-do-it
        ;; restore our own ispell arguments
        (setq ispell-extra-args old-ispell-extra-args)
        (ispell-kill-ispell t)))

    (defadvice flyspell-correct-word-generic (around my-flyspell-correct-word-generic activate)
      (let ((old-ispell-extra-args ispell-extra-args))
        (ispell-kill-ispell t)
        ;; use emacs original arguments
        (setq ispell-extra-args (flyspell-detect-ispell-args))
        ad-do-it
        ;; restore our own ispell arguments
        (setq ispell-extra-args old-ispell-extra-args)
        (ispell-kill-ispell t)))

    (defun text-mode-hook-setup ()
      ;; Turn off RUN-TOGETHER option when spell check text-mode
      (setq-local ispell-extra-args (flyspell-detect-ispell-args)))
    :config
    (add-hook 'text-mode #'text-mode-hook-setup))

  (global-set-key (kbd "<f8>") #'shackra-ispell-cycle-dict)
  (setf shackra-ispell-dict-list (list "es" "en"))
  (defvar shackra-ispell-dict-list (list) "Lista de diccionarios para cambiar")

  (defun shackra--ispell-current-dict ()
    "Obtiene el diccionario actual o retorna el establecido por defecto"
    (if ispell-current-dictionary
        (cl-position ispell-current-dictionary shackra-ispell-dict-list :test 'string=)
      (if (stringp (getenv "LANG"))
          (cl-position (nth 0 (split-string (getenv "LANG") "_")) shackra-ispell-dict-list :test 'string=)
        0))) ;; retorna español mientras tanto

  (defun shackra-ispell-cycle-dict ()
    "Cambia de un diccionario a otro"
    (interactive)
    (let ((dict-list-size (- (length shackra-ispell-dict-list) 1))
          (dict-current-index (shackra--ispell-current-dict)))
      (if (> (+ dict-current-index 1) dict-list-size)
          (setf dict-current-index 0)
        (setf dict-current-index (+ dict-current-index 1)))
      ;; luego de realizar la matemática, cambiamos el diccionario
      (ispell-change-dictionary (nth dict-current-index shackra-ispell-dict-list)))
    ;; Nuevo diccionario, nada de palabras subrayadas
    (flyspell-delete-all-overlays)
    ;; Mandamos a revisar la ortografía del párrafo en que estamos
    (flyspell-region (line-beginning-position) (line-end-position)))
#+END_SRC
*** =multiple-cursors=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:56]
- Refiled on [2015-11-12 jue 16:51]
:END:
Multiples cursores en Emacs. Asociado a @@html:<kbd>C-c n</kbd>@@
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :init
    (add-hook 'multiple-cursors-mode-hook #'shackra-lsp-on-change-modify-hook)
    :bind (:map global-map (("C-c n" . hydra-multiple-cursors/body)))
    :custom
    (mc/cmds-to-run-once
     '(ace-window
       dap-tooltip-mouse-motion
       find-file
       golden-ratio-scroll-screen-up
       hydra-multiple-cursors/ignore
       hydra-multiple-cursors/mc/add-cursor-on-click
       hydra-multiple-cursors/mc/edit-lines-and-exit
       hydra-multiple-cursors/mc/insert-numbers-and-exit
       hydra-multiple-cursors/mc/mark-next-like-this
       ignore
       counsel-M-x
       indent-for-tab-command
       special-hydra-lispy-mark/body
       special-lispy-occur
       undo-tree-visualize
       undo-fu-only-redo-all
       undo-fu-only-redo
       undo-fu-only-undo))
    (mc/cmds-to-run-for-all
     '(TeX-insert-backslash
       electric-pair-delete-pair
       hungry-delete-backward
       hungry-delete-forward
       lispy-delete-backward
       lispy-move-beginning-of-line
       lispy-move-end-of-line
       lispy-parens
       mwim-beginning
       mwim-end
       org-self-insert-command
       special-lispy-flow
       special-lispy-left
       yaml-electric-backspace
       yaml-electric-dash-and-dot))
    :hydra (hydra-multiple-cursors (:hint nil)
                                   "
   Arriba^^         Abajo^^          Varios            % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Sigu.    [_n_]   Sigu.    [_l_] Editar lineas  [_0_] Insertar números
   [_P_]   Omitir   [_N_]   Omitir   [_a_] Marcar todo    [_A_] Insertar letras
   [_M-p_] Desmarc. [_M-n_] Desmarc. [_s_] Buscar
   [_<mouse-1>_] Cursor en punto     [_q_] Salir"
                                   ("l" mc/edit-lines :exit t)
                                   ("a" mc/mark-all-like-this :exit t)
                                   ("n" mc/mark-next-like-this)
                                   ("N" mc/skip-to-next-like-this)
                                   ("M-n" mc/unmark-next-like-this)
                                   ("p" mc/mark-previous-like-this)
                                   ("P" mc/skip-to-previous-like-this)
                                   ("M-p" mc/unmark-previous-like-this)
                                   ("s" mc/mark-all-in-region-regexp :exit t)
                                   ("0" mc/insert-numbers :exit t)
                                   ("A" mc/insert-letters :exit t)
                                   ("<mouse-1>" mc/add-cursor-on-click)
                                   ;; Help with click recognition in this hydra
                                   ("<down-mouse-1>" ignore)
                                   ("<drag-mouse-1>" ignore)
                                   ("q" nil)))
#+END_SRC
*** =pcre2el=
Convierte entre sintaxis de expresiones regulares PCRE, Emacs y RX.

#+BEGIN_SRC emacs-lisp
  (use-package pcre2el
    :diminish pcre-mode
    :config (pcre-mode t))
#+END_SRC
*** =visual-fill-column=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:57]
- Refiled on [2015-11-12 jue 16:49]
:END:
/fill-column for visual-line-mode/
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :defer t)
#+END_SRC
*** =subword-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:57]
- Refiled on [2015-11-12 jue 16:50]
:END:
Navegación y edición de /SubPalabras/. Siendo "HolaMundoAdios" una nomenclatura, =subword-mode= permite mover el cursor entre cada subpalabra, deteniéndolo en "Adios", "Mundo" y "Hola" si se mueve el cursor de derecha a izquierda presionando la tecla CTRL. Este modo menor es muy útil, especialmente para aquellos desarrolladores en Java que usan variables con JorobasDeCamello.
#+BEGIN_SRC emacs-lisp
  (use-package subword
    :diminish subword-mode)
#+END_SRC
*** =hungry-delete=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:58]
- Refiled on [2015-11-12 jue 16:53]
:END:
Borra espacios en blanco consecutivos con sólo presionar =backspace= una vez :)
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :diminish hungry-delete-mode
    :config
    (global-hungry-delete-mode))
#+END_SRC
*** =text-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 17:00]
:END:
Cualquier modo mayor que /herede/ de =text-mode= sera afectado por esta configuración.
#+BEGIN_SRC emacs-lisp
  (defun shackra-text-mode ()
    (when (or (executable-find "ispell") (executable-find "hunspell"))(flyspell-mode))
    (set (make-local-variable 'fill-column) 100)
    (turn-off-auto-fill)
    (turn-on-visual-line-mode))
  (remove-hook 'text-mode-hook #'turn-on-auto-fill)
  (add-hook 'text-mode-hook #'shackra-text-mode)
#+END_SRC
**** Mover el cursos de manera inteligente al inicio/fin de la linea
#+begin_src emacs-lisp
  (use-package mwim
    :bind (:map global-map
                (("C-a" . mwim-beginning)
                 ("<home>" . mwim-beginning)
                 ("C-e" . mwim-end)
                 ("<end>" . mwim-end))))
#+end_src
*** Lispy
Un modo menor para la edición de parentesis. Se usa [[https://github.com/itsjeyd/lispy-mnemonic][lispy-mnemonic]] porque no se nada de edición modal estilo Vim
#+begin_src emacs-lisp
  (use-package lispy)

  (use-package lispy-mnemonic
    :init
    (add-hook 'emacs-lisp-mode-hook 'lispy-mnemonic-mode)
    (add-hook 'lisp-mode-hook 'lispy-mnemonic-mode)
    (add-hook 'lisp-interaction-mode-hook 'lispy-mnemonic-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook 'lispy-mnemonic-mode)
    (add-hook 'ielm-mode-hook 'lispy-mnemonic-mode)
    (add-hook 'scheme-mode-hook 'lispy-mnemonic-mode))
#+end_src
*** Move-text
Mover texto a voluntad
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :config (move-text-default-bindings))
#+END_SRC
*** Conversión de nombres de variables
#+BEGIN_SRC emacs-lisp
  (use-package string-inflection
    :bind (:map global-map
                ("C-c C-u" . string-inflection-all-cycle)))
#+END_SRC
*** Escritura de guiones cinematográficos
- [[https://fountain.io/syntax][Sintaxis (inglés)]]
- [[https://fountain.io/howto][Ayuda rápida (inglés)]]
  el formato de archivo debe ser =.fountain=.
#+begin_src emacs-lisp
  (use-package fountain-mode)
#+end_src
** Otros
*** spotify
#+begin_src emacs-lisp
  (use-package spotify
    :config (spotify-enable-song-notifications)
    :bind (:map global-map ("C-c s" . hydra-spotify/body))
    :hydra (hydra-spotify (:hint nil)
                          "
  ^Spotify^
  ^^^^^^^^^-----------------------------------------------------------
  _s_: reproducir   _<left>_:  canción anterior   _b_: mostrar canción
  _p_: pausa        _<right>_: canción siguiente  _q_: salir
  "
                          ("s" spotify-play :exit t)
                          ("p" spotify-pause :exit t)
                          ("<left>" spotify-previous :exit nil)
                          ("<right>" spotify-next :exit nil)
                          ("b" spotify-current :exit nil)
                          ("q" nil)))
#+end_src
*** presentation
Escala el texto en pantalla para presentaciones
#+begin_src emacs-lisp
  (use-package presentation
    :bind (([f9] . presentation-mode))
    :config
    (defalias 'pm presentation-mode))
#+end_src
*** dashboard
Panel de control para Emacs. Aquí se muestra un trigrama IHS que significa /Iesu Hominis Salvator/, que a su vez significa "Jesus, de la raza humana, el salvador".
#+begin_src emacs-lisp
  (use-package dashboard
    :if (not (version<= emacs-version "25.2"))
    :init
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title (propertize "Iesu Hominis Salvator" 'help-echo "Jesús salvador de los hombres"))
    (setq dashboard-startup-banner (expand-file-name "dashboard/JHS.png" user-emacs-directory))
    (setq dashboard-center-content t)
    (setq dashboard-items '((agenda    . 5)
                            (bookmarks . 5)))
    :config
    (dashboard-setup-startup-hook))
#+end_src
*** golden-ratio-scroll-screen
Subraya la linea anterior y la siguiente luego de hacer saltar de linea el cursor del mouse
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio-scroll-screen
    :config
    (global-set-key [remap scroll-down-command] 'golden-ratio-scroll-screen-down)
    (global-set-key [remap scroll-up-command] 'golden-ratio-scroll-screen-up))
#+END_SRC
*** =prescient.el=
Sorteo y filtrado simple.
#+begin_src emacs-lisp
  (use-package prescient
    :config (prescient-persist-mode 1))
  (use-package ivy-prescient
    :config (ivy-prescient-mode 1))
  (use-package company-prescient
    :config (company-prescient-mode 1))
#+end_src
*** all-the-icons
Paquete de utilidades para formatear varios fuentes de iconos dentro de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)

  (use-package all-the-icons-dired
    :init
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
*** mode-line
Los caracteres en el mode-line de Emacs pueden ser modificados ¿No es genial? (según [[http://tromey.com/blog/?p%3D831][The Cliffs of Inanity]], también [[http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html][lunarsite]]. referencias sobre =mode-line-format= en la [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Format.html][referencia de Elisp]])
**** Utilidades
#+BEGIN_SRC emacs-lisp
  (defvar shackra-vc-mode nil)
  (make-variable-buffer-local 'shackra-vc-mode)

  (require 'vc)
  (defun shackra-vc-command-hook (&rest args)
    (let ((file-name (buffer-file-name)))
      (setq shackra-vc-mode (and file-name
                                 (not (vc-registered file-name))
                                 (ignore-errors
                                   (vc-responsible-backend file-name))))))

  (add-hook 'vc-post-command-functions #'shackra-vc-command-hook)
  (add-hook 'find-file-hook #'shackra-vc-command-hook)

  (defun shackra-faicon-icon (icon &optional color help-echo)
    "Retorna una cadena de texto formateada con `propertize' de un icono de all-the-icons"
    (propertize (all-the-icons-faicon icon) 'face `(:foreground ,(or color "white") :height 1.3 :family ,(all-the-icons-faicon-family))
                'display '(raise -0.1) 'help-echo help-echo))

  (defun shackra-flycheck-errors ()
    "Retorna una cadena con errores y warnings de Flycheck"
    (if (and (boundp 'flycheck-current-errors) flycheck-current-errors)
        (let* ((count (flycheck-count-errors flycheck-current-errors))
               (warns (let-alist count
                        (or .warning 0)))
               (errors (let-alist count
                         (or .error 0)))
               (info (let-alist count
                       (or .info 0)))
               (messages nil))
          (when (> warns 0)
            (push (propertize (format "Adv: %s" warns) 'face 'flycheck-error-list-warning) messages))
          (when (> errors 0)
            (push (propertize (format "Err: %s" errors) 'face 'flycheck-error-list-error) messages))
          (when (> info 0)
            (push (propertize (format "Inf: %s" info) 'face 'flycheck-error-list-info) messages))
          (when (> (+ warns errors info) 0)
            (string-join messages ", ")))
      (propertize "Nada que reportar" 'face 'success)))

  (defun shackra-vc-state ()
    "Revisa el estado VC del buffer"
    (if vc-mode
        (vc-state (buffer-file-name (current-buffer)))
      nil))

  (defun shackra-buffer-vc-modified ()
    "Retorna iconos de acuerdo al estado VCS del buffer actual"
    (let ((vc-modified ""))
      (if (buffer-modified-p)
          (setf vc-modified (concat vc-modified (shackra-faicon-icon "exclamation-circle" "tomato" "Buffer modificado.")))
        (setf vc-modified (concat vc-modified (shackra-faicon-icon "check-circle" "medium sea green" "Guardado."))))
      (when (eq (shackra-vc-state) 'edited)
        (setf vc-modified (concat vc-modified " " (shackra-faicon-icon "exclamation-triangle" "tomato" "Cambios sin registrar en VCS remoto."))))
      (when (eq (shackra-vc-state) 'missing)
        (setf vc-modified (concat vc-modified " " (shackra-faicon-icon "trash" nil "Archivo sólo existe en VCS, no en el disco duro."))))
      (when (eq (shackra-vc-state) 'ignored)
        (setf vc-modified (concat vc-modified " " (shackra-faicon-icon "ban" nil  "Archivo ignorado"))))
      (when (eq (shackra-vc-state) 'added)
        (setf vc-modified (concat vc-modified " " (shackra-faicon-icon "plus" nil "Archivo será registrado en VCS en el siguiente commit."))))
      (when (eq (shackra-vc-state) 'unregistered)
        (setf vc-modified (concat vc-modified " " (shackra-faicon-icon "question" nil  "Archivo sin registrar al VCS."))))
      vc-modified))

  (defun shackra-vc-info-slice (branch)
    "Recorta el nombre de la rama si es muy larga"
    (let ((size (length "xx00000/xxxx"))
          (branch (format "%s" branch)))
      (if (> (length branch) size)
          (concat (substring branch 0 size) "…")
        branch)))

  (defun shackra-vc-info ()
    "Icono del sistema VCS y rama actual"
    (when vc-mode
      (cond ((string-match "Git[:-]" vc-mode)
             (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
               (concat
                (propertize (format " %s " (all-the-icons-faicon "git-square" :v-adjust -0.1)) 'face `(:foreground ,(if (string= branch "master") "orange" "purple") :height 1.3 :family ,(all-the-icons-octicon-family)))
                (propertize (shackra-vc-info-slice branch) 'face `(:foreground ,(if (string= branch "master") "orange" "purple"))))))
            (t (format "%s" vc-mode)))))

  (defun shackra-flycheck-status ()
    "Estado de Flycheck"
    (when (fboundp 'flycheck-last-status-change)
      (let* ((text (pcase flycheck-last-status-change
                     (`finished (shackra-flycheck-errors))
                     (`running     (propertize "En ejecución" 'face `(:foreground "#040687")))
                     (`no-checker  (propertize "No existe revisor" 'face `(:foreground "black")))
                     (`not-checked (propertize "Sin revisar" 'face `(:foreground "black")))
                     (`errored     (propertize "Error con Flycheck" 'face `(:foreground "#870448")))
                     (`interrupted (propertize "Interrumpido" 'face `(:foreground "#870448")))
                     (`suspicious  (shackra-faicon-icon "question" "tomato")))))
        (propertize (concat (propertize "!Flyc" 'face 'flycheck-error-list-error) (propertize "{" 'face 'flycheck-error-list-error) text (propertize "}" 'face 'flycheck-error-list-error))
                    'help-echo "Reporte de Flycheck para errores de alta y baja prioridad"
                    'local-map (make-mode-line-mouse-map
                                'mouse-1 (lambda () (interactive) (flycheck-list-errors)))))))

  (defun shackra-virtualenv-name ()
    (when (boundp 'venv-current-name)
      (if venv-current-name
          (format "venv: %s" venv-current-name)
        nil)))
#+END_SRC
**** =mode-line-format=
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
                '("%e"
                  mode-line-front-space
                  mode-line-buffer-identification
                  "   "
                  (:eval (concat
                          (shackra-buffer-vc-modified)
                          "  "
                          (shackra-vc-info)
                          "	"
                          (shackra-flycheck-status)
                          ))
                  "	"
                  mode-line-modes
                  mode-line-misc-info))
#+END_SRC
*** =doom-modeline=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:50]
:END:
mode-line minimalista, reemplazo para =telephone-line=.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook ((after-init . doom-modeline-mode)
           (doom-modeline-mode . shackra-default-doom-modeline-format))
    :init
    (if (daemonp)
        (setq doom-modeline-icon t)
      (setq doom-modeline-icon (display-graphic-p)))
    :config
    (doom-modeline-def-modeline 'personal
      '(bar matches buffer-info vcs checker buffer-position selection-info)
      '(misc-info minor-modes debug buffer-encoding major-mode))
    (defun shackra-default-doom-modeline-format ()
      (doom-modeline-set-modeline 'personal 'default))
    :custom
    (doom-modeline-height 44)
    (doom-modeline-bar-width 7)
    (doom-modeline-checker-simple-format nil)
    (doom-modeline-vcs-max-length (length "chxxxxx/xxxxx"))
    (doom-modeline-modal-icon nil)
    (doom-modeline-mu4e (fboundp 'mu4e))
    (doom-modeline-minor-modes t))
#+END_SRC
*** =visual-line-mode=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:50]
:END:
Envuelve las filas de texto si son muy anchas visualmente en nuevas filas.
#+BEGIN_SRC emacs-lisp
  (setf visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC
*** =notify=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:52]
:END:
Permite a emacs enviar notificaciones por DBus o diferentes medios. En este caso usare libnotify (el método definido no es multiplataforma).
#+BEGIN_SRC emacs-lisp
  (setf notify-method 'notify-via-libnotify)
#+END_SRC
*** alert
#+BEGIN_SRC emacs-lisp
  (use-package alert
    :init
    (if (eq system-type 'windows-nt)
        (setf alert-default-style 'message)
      (setf alert-default-style 'libnotify)))
#+END_SRC
*** =appt=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:53]
:END:
Appointments me alerta de mis citas o pendientes que tengo por hacer.
#+BEGIN_SRC emacs-lisp
  ;; configuración adaptada de http://emacs.stackexchange.com/a/5821/690 Gracias
  ;; a http://redd.it/35kbf6
  (use-package appt
    :straight nil
    :after (alert)
    :if (not (eq system-type 'darwin))
    :init
    (setf appt-message-warning-time 10
          appt-display-interval (1+ appt-message-warning-time)
          appt-display-mode-line nil)
    ;; Muestra las citas como notificaciones en el manejador de ventanas
    (setf appt-disp-window-function 'shackra-appt-muestra-notificacion)
    ;;(setf appt-delete-window-function nil)
    (defun shackra-appt-muestra-notificacion (min-to-app new-time msg)
      "Envia notificaciones usando libnotify. Esto no funcionara si DBus no esta instalado y corriendo"
      ;; `min-to-app' puede ser una lista, o no.
      (if (atom min-to-app)
          (alert
           (if (<= (string-to-number min-to-app) 1)
               (format "<b>Cita en %s minuto</b>" min-to-app)
             (format "<b>Cita en %s minutos</b>" min-to-app))
           :title msg
           :mode 'Emacs-Org
           :severity 'high
           :persistent t)
        ;; no entiendo este trozo de código, pero asumo que itera una lista de
        ;; cosas por hacer.
        (dolist (i (number-sequence 0 (1- (length min-to-app))))
          (alert
           (if (<= (string-to-number (nth i min-to-app)) 1)
               (format "<b>Cita en %s minuto</b>" (nth i min-to-app))
             (format "<b>Cita en %s minutos</b>" (nth i min-to-app)))
           :title (nth i msg)
           :mode 'Emacs-Org
           :severity 'high
           :persistent t))))
    (defun shackra-appt-update-when-file-updated ()
      "Actualiza appt cuando ciertos archivos son actualizados"
      ;; si `org-directory' es prefijo en el nombre del archivo del buffer
      ;; actual, ejecuta la funcion `shackra-org-agenda-to-appt'
      (if (string-prefix-p org-directory (buffer-file-name))
          (shackra-org-agenda-to-appt)))
    (defun shackra-org-agenda-to-appt ()
      (interactive)
      (setf appt-time-msg-list nil)
      (org-agenda-to-appt))
    :config
    (shackra-org-agenda-to-appt)
    (run-at-time "12:05am" (* 24 3600) 'shackra-org-agenda-to-appt)
    (appt-activate t)
    ;; automáticamente actualiza las citas cuando el archivo cosasporhacer.org es
    ;; salvado (ahí es donde yo guardo mi lista de cosas por hacer, y mi agenda)
    (add-hook 'after-save-hook #'shackra-appt-update-when-file-updated))
#+END_SRC
*** =uniquify=
:LOGBOOK:
- Refiled on [2015-11-12 jue 16:54]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :straight nil
    :init
    (setf uniquify-buffer-name-style 'forward))
#+END_SRC
*** =systemd=
Modo mayor para editar archivos de servicio systemd.
#+BEGIN_SRC emacs-lisp
  (use-package systemd
    :config
    (add-hook 'systemd-mode-hook #'yas-minor-mode-on))
#+END_SRC
*** RSS feed
Lector de RSS feed dentro de Emacs
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :bind (:map elfeed-show-mode-map (("." . elfeed-open-url)))
    :init
    (setf url-queue-timeout 30)
    (defun elfeed-open-url ()
      "Open an URL with eww"
      (interactive)
      (let* ((url-to-visit))
        (save-excursion
          (goto-char (point-min))
          (search-forward "Link: " nil t)
          (setf url-to-visit (thing-at-point 'url t)))
        (eww url-to-visit)))
    (defun elfeed-search-format-date (date)
      (format-time-string "%d-%m-%Y %H:%M" (seconds-to-time date)))
    ;; fuentes RSS feed
    (setf elfeed-feeds '(("https://www.aciprensa.com/rss/noticias.xml" Iglesia noticias)
                         ("http://feeds.feedburner.com/santodeldia" Iglesia santoral)
                         ("http://www.asianews.it/es.xml" Iglesia asía)
                         ("http://localhost:9077/feed/crhoy/atom" noticias nacionales)
                         ("http://localhost:9077/feed/rt-espanol/atom" noticias internacionales)
                         ("https://godotengine.org/rss.xml" godot gamedev)))
    :config
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "2 weeks ago"
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "\\.crhoy\\.com"
                                  :entry-title "Video"
                                  :remove 'unread)))
#+END_SRC
*** Shackle
Como =display-buffer-alist= pero más sencillo
#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :init
    (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.3)
                          ((circe-server-mode circe-channel-mode circe-query-mode) :ignore t)
                          (compilation-mode :select t :align 'right :size 0.3)))
    :config
    (add-hook 'after-init-hook 'shackle-mode))
#+END_SRC
*** pdf-tools
Mejor visor de PDFs para Emacs
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("C-r" . isearch-backward)))
#+END_SRC
*** CANCELADO Emojify 😏                                        :CANCELADO:
- State "CANCELADO"  from              [2020-08-31 lun 12:42] \\
  paquete obsoleto, ver nota.
Muestra imágenes de emojis en lugar de los caracteres utf-8.

#+begin_notes
Gracias a [[*Configura tipografías unicode][Configura tipografías unicode]] en Emacs 27 podemos mostrar emojis coloridos en lugar de imagenes, haciendo obsoleto este paquete.
#+end_notes
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    ;; Este paquete sólo funciona si la versión de Emacs es mayor o igual a 24.3
    ;; y Emacs fue compilado con soporte para PNG
    :if (and (version<= "24.3" emacs-version) (image-type-available-p 'png))
    :bind (:map global-map ("s-i" . emojify-insert-emoji))
    :init
    (add-hook 'after-init-hook #'global-emojify-mode)
    (setf emojify-point-entered-behaviour 'uncover)
    :config
    (emojify-set-emoji-styles '(unicode)))
#+END_SRC
*** free-keys
Muestra cuales combinaciones de teclas están libres para asignar. Asociado @@html:<kbd>C-h C-k</kbd>@@.
#+BEGIN_SRC emacs-lisp
  (use-package free-keys
    :bind (:map help-map
                ("C-k" . free-keys)))
#+END_SRC
*** highlight-indent-guides
Modo menor que subraya los niveles de identación en el buffer usando font-lock. Los anchos de identación son descubiertos de manera dinámica.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :after (python-mode)
    :init
    (setf highlight-indent-guides-method 'fill)
    (add-hook 'python-mode 'highlight-indent-guides-mode))
#+END_SRC
**** Limitaciones
Este modo menor no funciona bien con otros modos menores que hacen uso de la propiedad =display= de los textos en el buffer o que modifican como se muestran los espacios en blanco como hace whitespace-mode. Más info: [[https://github.com/DarthFennec/highlight-indent-guides#limitations][Limitations]].
*** Manejador de procesos para el sistema
#+BEGIN_SRC emacs-lisp
  (use-package proced
    :if (or (string-equal system-type "gnu/linux") (string-equal system-type "gnu/kfreebsd")))
#+END_SRC
*** =webpaste=
Pega regiones o buffers completos en servicios como pastebin
#+BEGIN_SRC emacs-lisp
  (use-package webpaste
    :bind (("C-c C-p C-b" . webpaste-paste-buffer)
           ("C-c C-p C-r" . webpaste-paste-region)))
#+END_SRC
*** Chronos
Multiples temporizadores simultaneos
#+BEGIN_SRC emacs-lisp
  (use-package chronos
    :init
    (setf chronos-expiry-functions '(chronos-desktop-notifications-notify)))
#+END_SRC
*** docker 🐋
Utilidades para integrar Emacs y docker
#+BEGIN_SRC emacs-lisp
  (use-package docker)

  (use-package docker-compose-mode)

  (use-package dockerfile-mode
    :init
    (defun shackra/aggresive-indent-mode-off ()
      (when (fboundp 'aggressive-indent-mode)
        (aggressive-indent-mode -1)))
    (add-hook 'dockerfile-mode-hook #'shackra/aggresive-indent-mode-off)
    :mode "Dockerfile\\'")
#+END_SRC
*** explain-pause-mode
reporta y explica porque Emacs esta lento
#+begin_src emacs-lisp
  (use-package explain-pause-mode
    :diminish explain-pause-mode
    :straight (explain-pause-mode :type git :host github :repo "lastquestion/explain-pause-mode")
    :hook (after-init . explain-pause-mode)
    :custom
    (explain-pause-blocking-too-long-ms (* 1000 2))
    (explain-pause-alert-via-message nil))
#+end_src
*** Temas
Establece cuales temás son seguros.
#+BEGIN_SRC emacs-lisp
  (setf custom-safe-themes '("d5a878172795c45441efcd84b20a14f553e7e96366a163f742b95d65a3f55d71" default))
#+END_SRC
**** doom-themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-miramare t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src
